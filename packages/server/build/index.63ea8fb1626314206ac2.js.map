{"version":3,"file":"index.4a50f35ee3d1efbe4dda.hot-update.js","sources":["src/middleware/website.jsx"],"sourcesContent":["import React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { SchemaLink } from 'apollo-link-schema';\nimport { CookiesProvider } from 'react-cookie';\n\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport { Provider } from 'react-redux';\nimport { StaticRouter } from 'react-router';\nimport { ServerStyleSheet } from 'styled-components';\nimport fs from 'fs';\nimport path from 'path';\nimport Helmet from 'react-helmet';\n\nimport { isApiExternal, apiUrl } from '../net';\nimport createApolloClient from '../../../common/createApolloClient';\nimport createReduxStore from '../../../common/createReduxStore';\nimport Html from './html';\nimport Routes from '../../../client/src/app/Routes';\nimport modules from '../modules';\nimport createSchema from '../api/schema';\n\nlet assetMap;\nconst playgroundUrl = '/graphiql';\n\nconst renderServerSide = async (req, res) => {\n  // console.log('EXECUTING RENDER ', new Date().getMinutes(), new Date().getSeconds());\n  const clientModules = require('../../../client/src/modules').default;\n  // console.log('ABOUT TO CREATE SCHEMA;::', new Date().getMinutes(), new Date().getSeconds());\n  const schema = await createSchema();\n  // console.log('CREATED SCHEMA::', new Date().getMinutes(), new Date().getSeconds());\n  const schemaLink = new SchemaLink({\n    schema: schema,\n    context: await modules.createContext(req, res)\n  });\n\n  const client = createApolloClient({\n    apiUrl,\n    createNetLink: !isApiExternal ? () => schemaLink : undefined,\n    links: clientModules.link,\n    clientResolvers: clientModules.resolvers\n  });\n\n  let initialState = {};\n  console.log('CLIENT::', client);\n  const store = createReduxStore(initialState, client);\n\n  const context = {};\n  // const App = clientModules.getWrappedRoot(\n  //   <Provider store={store}>\n  //     <ApolloProvider client={client}>\n  //       {clientModules.getDataRoot(\n  //         <StaticRouter location={req.url} context={context}>\n  //           {Routes}\n  //         </StaticRouter>\n  //       )}\n  //     </ApolloProvider>\n  //   </Provider>,\n  //   req\n  // );\n  const App = (\n          clientModules.getWrappedRoot(\n\n    // <CookiesProvider cookies={req.universalCookies}>\n      <Provider store={store}>\n        <ApolloProvider client={client}>\n          {clientModules.getDataRoot(\n          <StaticRouter location={req.url} context={context}>\n            {Routes}\n          </StaticRouter>\n          )}\n        </ApolloProvider>\n      </Provider>\n    // </CookiesProvider>\n  )\n  );\n  await getDataFromTree(App);\nconsole.log('CLIENT: AFTER:::', client);\n  const sheet = new ServerStyleSheet();\n  const html = ReactDOMServer.renderToString(\n    sheet.collectStyles(\n      // clientModules.getWrappedRoot(\n      <CookiesProvider cookies={req.universalCookies}>\n        <Provider store={store}>\n          <ApolloProvider client={client}>\n            {/* {clientModules.getDataRoot( */}\n            <StaticRouter location={req.url} context={context}>\n              {Routes}\n            </StaticRouter>\n            {/* )} */}\n          </ApolloProvider>\n        </Provider>\n      </CookiesProvider>\n      // )\n    )\n  );\n  const css = sheet.getStyleElement().map((el, idx) => (el ? React.cloneElement(el, { key: idx }) : el));\n  const helmet = Helmet.renderStatic(); // Avoid memory leak while tracking mounted instances\n  if (context.pageNotFound === true) {\n    res.status(404);\n    // res.end();\n  } else {\n    if (context.url) {\n      res.writeHead(301, { Location: context.url });\n      res.end();\n    } else {\n      if (__DEV__ || !assetMap) {\n        assetMap = JSON.parse(fs.readFileSync(path.join(__FRONTEND_BUILD_DIR__, 'assets.json')));\n      }\n      const apolloState = Object.assign({}, client.cache.extract());\n      const page = <Html content={html} state={apolloState} assetMap={assetMap} css={css} helmet={helmet} />;\n      res.send(`<!doctype html>\\n${ReactDOMServer.renderToStaticMarkup(page)}`);\n      res.end();\n    }\n  }\n};\n\nexport default async (req, res, next) => {\n  try {\n    if (req.url === playgroundUrl) {\n      return next();\n    } else if (req.path.indexOf('.') < 0 && __SSR__) {\n      return await renderServerSide(req, res);\n    } else if (!__SSR__ && req.method === 'GET') {\n      res.sendFile(path.resolve(__FRONTEND_BUILD_DIR__, 'index.html'));\n    } else {\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AAMA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAFA;AADA;AASA;AAZA;AApCA;AAAA;AACA;AADA;AAoDA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AAFA;AADA;AADA;AAWA;AAbA;AAgBA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA2FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA,yBAEA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAWA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}