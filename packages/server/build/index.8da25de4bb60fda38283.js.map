{"version":3,"file":"index.88ea603d21b2d858a9ca.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/containers/Dashboard.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/CreateSiteMap.graphql"],"sourcesContent":["/*eslint-disable no-unused-vars*/\nimport React from 'react';\nimport { graphql, compose, withApollo } from 'react-apollo';\nimport ManageAdmins from '../../profile/components/ManageAdmins';\nimport SiteMap from '../components/SiteMap';\nimport AdminView from '../components/AdminView';\nimport PRODUCTS_QUERY from '../graphql/SiteMapProds.graphql';\nimport UPLOAD_CONTENT from '../graphql/UploadContent.graphql';\nimport SIMPLE_PAGE_QUERY from '../graphql/SimplePageQuery.graphql';\nimport DEALERS_QUERY from '../graphql/Dealers.graphql';\nimport DEALER_BY_HANDLE_QUERY from '../graphql/DealerQuery.graphql';\nimport UPDATE_DEALER from '../graphql/UpdateDealer.graphql';\nimport CREATE_SITEMAP from '../graphql/CreateSiteMap.graphql';\n\nclass Admin extends React.Component {\n  render() {\n    console.log('The props::::', this.props);\n    return (\n      <AdminView {...this.props}>\n        <div className=\"admin__dashboard\">\n          <ManageAdmins {...this.props} />\n          <SiteMap {...this.props} />\n        </div>\n      </AdminView>\n    );\n  }\n}\n\nconst AdminWithApollo = compose(\n  graphql(PRODUCTS_QUERY, {\n    options: () => ({\n      variables: { first: 250 }\n    }),\n    props: ({ data }) => {\n      console.log('DATA;::', data);\n      const { loading, error, admin_products, variables, fetchMore } = data;\n      if (error) {\n        throw new Error(error);\n      }\n      if (loading) {\n        return { productsLoading: loading };\n      }\n      if (!loading && admin_products) {\n        let currEndCursor;\n        let hasNextPage;\n        let hasPreviousPage;\n        const { edges } = admin_products;\n        if (edges.length > 0) {\n          currEndCursor = edges[edges.length - 1].cursor;\n        }\n        hasNextPage = admin_products.pageInfo.hasNextPage;\n        hasPreviousPage = admin_products.pageInfo.hasPreviousPage;\n        console.log('Curr end cursor::', currEndCursor);\n        const loadMore = (first = 50, after = currEndCursor) => {\n          const updatedVars = { ...variables, after, first };\n          console.log('UPDATED VARS::', updatedVars);\n          return fetchMore({\n            variables: updatedVars,\n            updateQuery: (prevResult, { fetchMoreResult }) => {\n              console.log('PREVRESULT:', prevResult);\n              if (fetchMoreResult.admin_products.edges.length === 0) return prevResult;\n              const updatedResult = JSON.parse(JSON.stringify(prevResult));\n              console.log('PREV RESULT STRING', updatedResult);\n              // const updatedResult = Object.assign({}, prevResult);\n              updatedResult.admin_products.edges = [\n                ...prevResult.admin_products.edges,\n                ...fetchMoreResult.admin_products.edges\n              ];\n              //\n              updatedResult.pageInfo = fetchMoreResult.admin_products.pageInfo;\n              // updatedResult.admin_products.pageInfo = fetchMoreResult.admin_products.pageInfo;\n              // console.log('udpatedres', updatedResult);\n              // const update = Object.assign({}, prevResult, {\n              //   admin_products: {\n              //     edges: [...prevResult.admin_products.edges, ...fetchMoreResult.admin_products.edges],\n              //     pageInfo: fetchMoreResult.admin_products.pageInfo\n              //     // __typename: prevResult.admin_products.__typename\n              //   },\n              //   __typename: prevResult.admin_products.__typename\n              // });\n              console.log('UPDATE::', updatedResult);\n              return updatedResult;\n            }\n          });\n        };\n        return {\n          productsLoading: loading,\n          admin_products,\n          loadMore,\n          products: {\n            currEndCursor,\n            hasNextPage,\n            hasPreviousPage\n          }\n        };\n      }\n    }\n  }),\n  graphql(CREATE_SITEMAP, {\n    props: ({ mutate }) => ({\n      createSiteMap: async () => {\n        // console.log('UPLOAD SEO DATA:', seoData);\n        const {\n          data: { createSiteMap }\n        } = await mutate();\n        // console.log('CONTENT:', updateProductSeo);\n        return createSiteMap;\n      }\n    })\n  })\n)(Admin);\n\nexport default AdminWithApollo;\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"createSiteMap\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createSiteMap\"},\"arguments\":[],\"directives\":[]}]}}],\"loc\":{\"start\":0,\"end\":42}};\n    doc.loc.source = {\"body\":\"mutation createSiteMap{\\n  createSiteMap\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"createSiteMap\"] = oneQuery(doc, \"createSiteMap\");\n        \n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAOA;;;;AAXA;AACA;AAaA;AAEA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AACA;AAnEA;AAsEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AACA;AAaA;;;;;;;AChsourceRoot":""}