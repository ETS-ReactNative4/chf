{"version":3,"file":"index.4ce7a1daa207f14247c1.hot-update.js","sources":["src/modules/vendor/resolvers.js"],"sourcesContent":["/*eslint-disable no-unused-vars*/\nexport default pubsub => ({\n  Query: {\n    async vendors(_, __, context) {\n      try {\n        return await context.Vendor.get.vendors();\n      } catch (err) {\n        console.log('Error resolving query of vendors', err);\n      }\n    },\n    async vendor(_, { input }, context) {\n      const { handle, id } = input;\n      try {\n        if (id) {\n          return await context.Vendor.get.vendorById(id);\n        }\n        if (handle) {\n          return await context.Vendor.get.vendorByHandle(handle);\n        }\n      } catch (err) {\n        console.log('Error resolving query of single Vendor', err);\n      }\n    }\n  },\n  Vendor: {\n    async categories(obj, _, context) {\n      const { id } = obj;\n      try {\n        return await context.Vendor.get.vendorCategories(id);\n      } catch (err) {\n        console.log('Error resolving categories inside of Vendor', err);\n      }\n    },\n    async vendorData(\n      obj,\n      {\n        input: { handle }\n      },\n      { Admin }\n    ) {\n      // console.log('OBJ::', obj);\n      // console.log(' input', handle);\n      // const handle = '';\n      try {\n        const data = await Admin.get.vendorByHandle(handle);\n        // console.log('DATA::', data, handle.length);\n        if (typeof data == 'undefined' && handle.length > 0) {\n          const vendor = await Admin.insert.vendorSeo(handle);\n          // console.log('VENDOR::', vendor);\n          return vendor;\n        }\n        if (handle.length == 0) {\n          return null;\n        }\n        if (data) {\n          return { handle, seo: data };\n        }\n      } catch (e) {\n        return e;\n      }\n    }\n  },\n  Mutation: {\n    async updateBrand(_, { input }, { Vendor }) {\n      // console.log('INPUT::;', input);\n      try {\n        await Vendor.insertOrUpdate.vendorInfo(input);\n      } catch (e) {\n        console.log('ERROR IN UPDATE MUTATION', e);\n      }\n      return null;\n    }\n  }\n});\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AASA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AApBA;AAsBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAMA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAQA;AARA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AApCA;AAsCA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AATA;AA7DA;AAAA;;;;A","sourceRoot":""}