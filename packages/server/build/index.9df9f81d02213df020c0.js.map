{"version":3,"file":"index.e2bff5c2bf9c0829da31.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/containers/Location.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/index.web.jsx"],"sourcesContent":["import React from 'react';\nimport { graphql, compose, withApollo } from 'react-apollo';\n\nimport DEALERS_QUERY from '../graphql/Dealers.graphql';\nimport DEALER_BY_HANDLE_QUERY from '../graphql/DealerQuery.graphql';\nimport UPDATE_DEALER from '../graphql/UpdateDealer.graphql';\n\nimport LocationsView from '../components/Locations';\n\n/*eslint-disable no-unused-vars*/\n\nimport AdminView from '../components/AdminView';\n\nclass Location extends React.Component {\n  render() {\n    console.log('The props::::', this.props);\n    return (\n      <AdminView {...this.props}>\n        <LocationsView {...this.props} />\n      </AdminView>\n    );\n  }\n}\nconst LocationWithApollo = compose(\n  withApollo,\n  // graphql(PAGES_QUERY, {\n  //   props: ({ data }) => {\n  //     const { pages, loading: loadingPages, error } = data;\n  //     console.log('pages', pages);\n  //     if (loadingPages && !error) {\n  //       return { loadingPages, pages: null };\n  //     } else {\n  //       return { pages, loadingPages };\n  //     }\n  //   }\n  // }),\n  // graphql(UPLOAD_CONTENT, {\n  //   props: ({ mutate }) => ({\n  //     uploadContent: async ({ page_id, content }) => {\n  //       // console.log('PAGE ID::', page_id);\n  //       // console.log('content::', content);\n  //       const {\n  //         data: { uploadPageContent }\n  //       } = await mutate({ variables: { pageContent: { page_id: page_id, content } } });\n  //       console.log('RETURN DATA::: ', uploadPageContent);\n  //       return uploadPageContent;\n  //     }\n  //   })\n  // }),\n  graphql(DEALER_BY_HANDLE_QUERY, {\n    options: props => {\n      const handle = props.match.params.location_handle;\n      return { variables: { handle } };\n    },\n    props: ({ data }) => {\n      console.log('data', data);\n      return { ...data };\n    }\n  }),\n  // graphql(SIMPLE_PAGE_QUERY, {\n  //   options: () => {\n  //     return { variables: { pageTitle: 'Locations' } };\n  //   },\n  //   props: ({ data }) => {\n  //     console.log('Locations Page data', data);\n  //     const { page, loading: loadingPage, error } = data;\n  //     if (loadingPage && !error) {\n  //       return { loadingPage, page: null };\n  //     } else {\n  //       return { page, loadingPage };\n  //     }\n  //   }\n  // }),\n  graphql(DEALERS_QUERY, {\n    options: () => ({\n      variables: { first: 12, after: 0 }\n    }),\n    props: ({ data }) => {\n      console.log('DATA:::', data);\n      const { loading, error, dealers } = data;\n      if (error) {\n        console.log('DEALERS ERROR:::', error);\n        return { dealersError: error };\n      }\n      if (loading) {\n        return { loadingDealers: loading };\n      }\n      if (!loading && !error) {\n        return { loadingDealers: loading, dealers };\n      }\n    }\n  }),\n  graphql(UPDATE_DEALER, {\n    props: ({ mutate }) => ({\n      updateDealer: async dealer => {\n        try {\n          const {\n            data: { updateDealer }\n          } = await mutate({\n            variables: { dealer }\n          });\n          console.log('UPDATED::', updateDealer);\n          return updateDealer;\n        } catch (e) {\n          console.log('ERROR UPDATING:', e);\n        }\n      }\n    })\n    // options: {\n    //   refetchQueries: ({ data: { updateDealer } }) => {\n    //     console.log('RESULT', updateDealer);\n    //     return [\n    //       { query: DEALER_BY_HANDLE_QUERY, variables: { handle: updateDealer.handle } },\n    //       // { query: DEALERS_QUERY, variables: { first: 12, after: 0 } }\n    //     ];\n    //   }\n    // }\n  })\n)(Location);\n\nexport default LocationWithApollo;\n","import React from 'react';\n// import { Route } from 'react-router-dom';\nimport Dashboard from './containers/Dashboard';\nimport Carousel from './containers/Carousel';\nimport ProductSpecs from './containers/ProductSpecs';\nimport Seo from './containers/Seo';\nimport Locations from './containers/Locations';\nimport Location from './containers/Location';\n\nimport reducers from './reducers';\nimport { AuthRoute /*withLoadedUser,*/ } from '../user/containers/Auth';\n\nimport Feature from '../connector';\n\nexport default new Feature({\n  route: [\n    <AuthRoute exact path=\"/admin/dashboard\" role={['admin']} component={Dashboard} />,\n    <AuthRoute exact path=\"/admin/carousel\" role={['admin']} component={Carousel} />,\n    <AuthRoute exact path=\"/admin/product-specs\" role={['admin']} component={ProductSpecs} />,\n    <AuthRoute exact path=\"/admin/seo\" role={['admin']} component={Seo} />,\n    <AuthRoute exact path=\"/admin/locations\" role={['admin']} component={Locations} />,\n    <AuthRoute exact path=\"/admin/locations/:location_handle\" role={['admin']} component={Location} />\n  ],\n  reducer: { admin: reducers }\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;;AARA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AACA;AALA;AAAA;AAGA;AACA;AAGA;AAPA;AACA;AADA;AAAA;AAAA;AACA;AASA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AA2BA;;;;;;;;ACxHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AATA;;;;A","sourceRoot":""}