{"version":3,"file":"index.1cb56fd44ae9d5f91403.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/common/components/global/components/LocationList.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\n// import { MdChevronRight } from 'react-icons/md';\nimport settings from '../../../../../../../../settings';\nimport '../styles/modules/location-list.scss';\n\nclass LocationList extends React.Component {\n  state = {\n    width: null,\n    height: null\n  };\n  componentDidMount() {\n    this.measureLocationList();\n    if (typeof window !== 'undefined') {\n      window.addEventListener('resize', this.measureLocationList, false);\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.width !== nextState.width || this.state.height !== nextState.height || this.props !== nextProps;\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.measureLocationList, false);\n  }\n  saveRef = ref => (this.containerNode = ref);\n  measureLocationList = () => {\n    const { clientWidth, clientHeight } = this.containerNode;\n    this.setState({\n      width: clientWidth,\n      height: clientHeight\n    });\n  };\n\n  render() {\n    const { locations, selectLocation, selectedLocation } = this.props;\n    const { width } = this.state;\n    return (\n      <section\n        ref={this.saveRef}\n        className={classnames(\n          'location-list',\n          {\n            'location-list--xsmall': width < settings.breakpoints.small\n          },\n          {\n            'location-list--small': width >= settings.breakpoints.small && width < settings.breakpoints.medium\n          },\n          {\n            'location-list--medium': width >= settings.breakpoints.medium && width < settings.breakpoints.large\n          },\n          {\n            'location-list--large': width >= settings.breakpoints.large\n          }\n        )}\n      >\n        {'locations' in this.props && locations.length > 0 ? (\n          locations.map(({ node }) => (\n            <button\n              key={node.id}\n              className={classnames('location-list__item', {\n                'location-list__item--selected': node.street === selectedLocation\n              })}\n              onClick={() => {\n                selectLocation(node.street);\n              }}\n            >\n              <FaMapMarkerAlt size=\"1.5em\" className=\"location-list__icon location-list__icon--pin\" />\n              <address className=\"location-list__address\">\n                <h5 className=\"header header--secondary location-list__address-header\">{node.name}</h5>\n                <div className=\"location-list__address-item\">\n                  <a\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                    href={`https://www.google.com/maps/dir/?api=1&destination=${node.street.replace(\n                      ' ',\n                      '+'\n                    )}+${node.city.replace(' ', '+')}+${node.country.replace(' ', '+')}`}\n                  >\n                    {node.street}\n                  </a>\n                </div>\n                <div className=\"location-list__address-item\">\n                  <a\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                    href={`https://www.google.com/maps/dir/?api=1&destination=${location.address_1.replace(\n                      ' ',\n                      '+'\n                    )}+${node.city.replace(' ', '+')}+${node.country.replace(' ', '+')}`}\n                  />\n                  {node.city}, {node.state} {node.zip}\n                </div>\n                <div className=\"location-list__address-item\">\n                  Phone: <a href={`tel:${node.phone}`}>{node.phone}</a>\n                </div>\n                <div className=\"location-list__address-item\">{node.hours}</div>\n              </address>\n              <Link to={`/locations/${node.handle}`} className=\"location-list__arrow\" />\n              {/* <MdChevronRight size=\"2em\" className=\"location-list__icon location-list__icon--arrow\" /> */}\n            </button>\n          ))\n        ) : (\n          <span>No location(s) to display</span>\n        )}\n      </section>\n    );\n  }\n}\n\nLocationList.propTypes = {\n  locations: PropTypes.array,\n  selectLocation: PropTypes.func,\n  selectedLocation: PropTypes.string\n};\nLocationList.defaultProps = {};\n\nexport default LocationList;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AAgBA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;AAnBA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAbA;AAkBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAPA;AASA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AARA;AADA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAQA;AATA;AASA;AATA;AASA;AATA;AAWA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AA5BA;AA8BA;AAxCA;AADA;AA8CA;AAAA;AAAA;AAAA;AAjEA;AAqEA;;;;AAnGA;AACA;AAqGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;A","sourceRoot":""}