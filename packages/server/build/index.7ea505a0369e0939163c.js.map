{"version":3,"file":"index.3e9b3597431610dbbcba.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/products/components/ShopGrid.jsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n// import classnames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Badge } from '../../common/components/global';\n//import { toUrlName } from '../../common/components/global/components/PageBreadcrumbs';\nimport ResponsiveShpfyPicture from '../../common/components/global/components/ResponsiveShpfyPicture';\n\nimport '../styles/shop-grid.scss';\n\nclass ShopGrid extends React.Component {\n  componentDidMount() {\n    const { selectedCategory, selectedVendor, priceConfirmed } = this.props;\n    if (priceConfirmed || selectedCategory || selectedVendor) {\n      const filtered = this.applyFilter(this.props.products.edges);\n      return this.props.setFilteredFinalIdx(filtered);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    const { selectedCategory, selectedVendor, priceConfirmed } = this.props;\n    const {\n      selectedCategory: prevCategory,\n      selectedVendor: prevVendor,\n      priceConfirmed: prevPriceConfirmed\n    } = prevProps;\n    const filtered = this.applyFilter(this.props.products.edges);\n    if (selectedCategory !== prevCategory && selectedCategory) {\n      return this.props.setFilteredFinalIdx(filtered);\n    }\n    if (selectedVendor !== prevVendor && selectedVendor) {\n      return this.props.setFilteredFinalIdx(filtered);\n    }\n    if (priceConfirmed !== prevPriceConfirmed && priceConfirmed) {\n      return this.props.setFilteredFinalIdx(filtered);\n    }\n  }\n  getDisplayPrice = input =>\n    parseInt(input)\n      .toFixed(2)\n      .replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n  formatVendor = name => {\n    return name.replace(/[\\s/-]/g, '').toLowerCase();\n  };\n  productLocation = (vendor, handle, id, title, productType) => {\n    // console.log('ID', id, 'TITLE', title, 'PRODUCT TYPE', productType);\n    // console.log('NODE::', node);\n    const regex = /(\\/|[\"])/gm;\n    const subst = ``;\n\n    // The substituted value will be contained in the result variable\n    const result = title.replace(regex, subst);\n    const path = vendor\n      .split(' ')\n      .join('-')\n      .toLowerCase();\n    // console.log('HANDLE:::', `/product/${path}/${handle}`);\n\n    return {\n      pathname: `/product/${path}/${result\n        .split(' ')\n        .join('-')\n        .toLowerCase()}/${productType\n        .split('/')\n        .join('-')\n        .toLowerCase()}`,\n      state: handle,\n      search: handle\n    };\n  };\n  applySort = prods => {\n    const { sortMethod } = this.props;\n    let shopProducts = [...prods];\n    switch (sortMethod) {\n      case 'alpha':\n        shopProducts = _.orderBy(shopProducts, ['node.title'], ['asc']);\n        break;\n      case 'alphaReverse':\n        shopProducts = _.orderBy(shopProducts, ['node.title'], ['desc']);\n        break;\n      case 'price':\n        shopProducts = _.orderBy(shopProducts, p => parseFloat(p.node.variants.edges[0].node.price), ['asc']);\n        break;\n      case 'priceReverse':\n        shopProducts = _.orderBy(shopProducts, p => parseFloat(p.node.variants.edges[0].node.price), ['desc']);\n        break;\n      case 'featured':\n        break;\n    }\n    return shopProducts;\n  };\n  applyFilter = prods => {\n    const { selectedCategory, selectedVendor, priceConfirmed, priceFilterUpper: u, priceFilterLower: l } = this.props;\n    let shopProducts = [...prods];\n    // First filter layer\n    if (priceConfirmed && u && l) {\n      shopProducts = shopProducts.filter(({ node: { variants: { edges } } }) => {\n        const parsedPr = parseFloat(edges[0].node.price);\n        return parseFloat(l) <= parsedPr && parsedPr <= parseFloat(u);\n      });\n    }\n    // Second filter layer\n    if (selectedCategory) {\n      return shopProducts.filter(({ node: { collections: { edges } } }) => {\n        const res = edges.some(({ node: { id } }) => id === selectedCategory);\n        return res;\n      });\n    }\n    if (selectedVendor) {\n      return shopProducts.filter(p => this.formatVendor(p.node.vendor) === this.formatVendor(selectedVendor));\n    }\n    return shopProducts;\n  };\n  firstImg = node => node.images.edges[0].node;\n  renderImage = image => {\n    const className = image.hasOwnProperty('className') ? image.className : '';\n    const options = {\n      image: image.link,\n      altText: image.name,\n      className,\n      image_size: '300X300',\n      sources: [\n        {\n          image: image.link,\n          image_size: '700X700',\n          size: '(min-width: 990px)'\n        },\n        {\n          image: image.link,\n          image_size: '370X370',\n          size: '(max-width: 450px)'\n        }\n      ]\n    };\n    return <ResponsiveShpfyPicture options={options} />;\n  };\n  render() {\n    const { products, displayLim, startDisplayIdx } = this.props;\n    const lowerLim = startDisplayIdx;\n    const upperLim = startDisplayIdx + (displayLim - 1);\n    // console.log('PRODUCTS::', products);\n    // Apply any chosen sort and/or filter\n    const sorted = this.applySort(products.edges);\n    const sortedAndFiltered = this.applyFilter(sorted);\n\n    return (\n      <div className=\"shop-grid\">\n        {sortedAndFiltered.length > 0\n          ? sortedAndFiltered.map(({ node: { id, title, vendor, handle, productType, images }, node }, i) => {\n              // console.log('LOWER::', lowerLim, 'UPPER', upperLim);\n              const { compareAtPrice, price } = node.variants.edges[0].node;\n              if (i >= lowerLim && i <= upperLim) {\n                return (\n                  <Link\n                    key={id}\n                    to={this.productLocation(vendor, handle, id, title, productType, node)}\n                    className=\"shop-grid__item\"\n                  >\n                    <div className=\"shop-grid__item-image\">\n                      {'edges' in images && images.edges.length > 0 ? (\n                        // <img src={this.firstImg(node).originalSrc} alt={this.firstImg(node).altText} />\n                        this.renderImage({ link: this.firstImg(node).originalSrc, name: this.firstImg(node).altText })\n                      ) : (\n                        <img src=\"https://via.placeholder.com/300x300\" alt=\"placeholder\" />\n                      )}\n                      {compareAtPrice !== null ? <Badge badgeType=\"sale\" /> : null}\n                    </div>\n                    <h3 className=\"shop-grid__item-name\">{`${vendor} ${title}`}</h3>\n                    <h4 className=\"shop-grid__item-category\">{productType}</h4>\n                    {compareAtPrice !== null ? (\n                      <div className=\"shop-grid__item-price-group\">\n                        <span className=\"shop-grid__item-price shop-grid__item-price--sale\">\n                          {`$${this.getDisplayPrice(price)}`}\n                        </span>\n                        <span className=\"shop-grid__item-price shop-grid__item-price--original\">\n                          {`$${this.getDisplayPrice(compareAtPrice)}`}\n                        </span>\n                      </div>\n                    ) : (\n                      <div className=\"shop-grid__item-price\">{`$${this.getDisplayPrice(price)}`}</div>\n                    )}\n                  </Link>\n                );\n              } else {\n                return null;\n              }\n            })\n          : null}\n      </div>\n    );\n  }\n}\n\nShopGrid.propTypes = {\n  selectedPriceRange: PropTypes.string,\n  selectedPromotion: PropTypes.string,\n  selectedCategory: PropTypes.string,\n  selectedVendor: PropTypes.string,\n  sortMethod: PropTypes.string,\n  products: PropTypes.object,\n  categories: PropTypes.array,\n  promotions: PropTypes.array,\n  priceRanges: PropTypes.array,\n  category: PropTypes.object,\n  displayLim: PropTypes.number,\n  startDisplayIdx: PropTypes.number,\n  setFilteredFinalIdx: PropTypes.func,\n  priceConfirmed: PropTypes.bool,\n  priceFilterUpper: PropTypes.string,\n  priceFilterLower: PropTypes.string\n};\n\nexport default ShopGrid;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AA0BA;AAAA;AAAA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAOA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAXA;AAkBA;AACA;;;;;AA3HA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAoGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAJA;AASA;AAAA;AAAA;AAAA;AA1BA;AA8BA;AACA;AACA;AACA;AAxCA;AA4CA;;;;AAnLA;AACA;AAqLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;;;;A","sourceRoot":""}