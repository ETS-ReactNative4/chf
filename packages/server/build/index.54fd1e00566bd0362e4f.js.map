{"version":3,"file":"index.048d4cf0c73b14ea77f2.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/locations/components/LocationsView.web.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/index.web.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { FaLocationArrow } from 'react-icons/fa';\nimport {\n  PageLayout,\n  ScrollToTop,\n  LocationList\n  // LocationMap,\n  // LocationSearch\n} from '../../common/components/global';\nimport settings from '../../../../../../settings';\nimport Map from './Map';\nimport SearchBox from './SearchBox';\nimport '../styles/locations-view.scss';\n\nconst LoadingIcon = () => (\n  <div className=\"loading-wrapper\">\n    <div className=\"lds-ellipsis\">\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </div>\n);\n\nclass LocationsView extends React.Component {\n  state = {\n    selectedLocation: null,\n    isValidAddress: true,\n    isiOSDevice: null,\n    loading: false,\n    search: false,\n    markers: [],\n    bounds: {\n      NorthEast: { lat: 34.2, lng: -118.25 },\n      SouthWest: { lat: 33.5, lng: -116.7 }\n    },\n    center: {\n      lat: 33.9,\n      lng: -118.1\n    },\n    zoom: 10\n  };\n  componentDidMount() {\n    // console.log('state?', this.state);\n    // TODO: Quick Fix for Scrolling Issue\n    // window.scrollTo(0, 0);\n    if (typeof window !== 'undefined') {\n      this.isiOSDevice();\n    }\n    this.setState({ markers: this.props.locations });\n  }\n  selectLocation = locationAddress => this.setState({ selectedLocation: locationAddress });\n  resetBounds = position => {\n    if (this.state.center.lat !== 0) {\n      return new google.maps.LatLngBounds(position);\n    }\n    // check if center is different\n    // return new bounds to state.bounds\n  };\n  invalidAddress = bool => {\n    this.setState({\n      isValidAddress: bool\n    });\n    // console.log('updated?', this.state.isValidAddress);\n  };\n  clearLocation = () => this.setState({ selectedLocation: null });\n  loadPosition = async () => {\n    this.setState({ loading: true });\n    try {\n      const position = await this.getCurrentPosition();\n\n      if (position.code === 1) throw new Error(position.message);\n\n      const { latitude, longitude } = position.coords;\n\n      const dealer = this.getClosestDealer(this.props.locations, { lat: latitude, lng: longitude });\n      const bounds = new google.maps.LatLngBounds(\n        new google.maps.LatLng(Math.min(latitude, dealer.lat), Math.min(longitude, dealer.lng)),\n        new google.maps.LatLng(Math.max(latitude, dealer.lat), Math.max(longitude, dealer.lng))\n      );\n      this.setState({\n        search: true,\n        bounds,\n        center: {\n          lat: latitude,\n          lng: longitude\n        },\n        zoom: 10,\n        loading: false,\n        selectedLocation: dealer.address_1\n      });\n    } catch (error) {\n      this.setState({ loading: false });\n      console.log(error);\n    }\n  };\n\n  getCurrentPosition = (options = {}) => {\n    return new Promise((resolve, reject) => {\n      window.navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  updateMap = (location, bounds, center) => {\n    this.setState({ location, bounds, center, search: true, selectedLocation: location.address_1 });\n  };\n\n  updateMarkers = markers => {\n    this.setState({ markers });\n  };\n  calculateDistance(center, markers) {\n    const lat1 = center.lat;\n    const lon1 = center.lng;\n\n    const lat2 = markers.markerLat;\n    const lon2 = markers.markerLng;\n\n    const R = 6371e3; // earth radius in meters\n    const φ1 = lat1 * (Math.PI / 180);\n    const φ2 = lat2 * (Math.PI / 180);\n    const Δφ = (lat2 - lat1) * (Math.PI / 180);\n    const Δλ = (lon2 - lon1) * (Math.PI / 180);\n\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * (Math.sin(Δλ / 2) * Math.sin(Δλ / 2));\n\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    const distance = R * c;\n    return distance; // in meters\n  }\n  getClosestDealer = (dealers, center) => {\n    if (dealers && center) {\n      let distance = 10.0e15;\n      let markerDistance;\n      dealers.forEach(({ node }) => {\n        // console.log('/NODE::', node);\n        const { lat: markerLat, lng: markerLng } = node;\n        // console.log('MARKERS:::', markerLat, markerLng);\n        const distanceFromCenter = this.calculateDistance(center, { markerLat, markerLng });\n        if (distanceFromCenter < distance) {\n          distance = distanceFromCenter;\n          markerDistance = { ...node, distanceFromCenter };\n        }\n      });\n      return markerDistance;\n    }\n  };\n  isiOSDevice = () => {\n    this.setState({\n      isiOSDevice: !!window.navigator.platform.match(/iPhone|iPod|iPad/)\n    });\n  };\n  render() {\n    // const {  } = this.props;\n    const { isiOSDevice, selectedLocation } = this.state;\n    const { locations } = this.props;\n    // console.log('THE LOCATIONS::', locations);\n    let closest; // eslint-disable-line no-unused-vars\n    if (this.state.search) {\n      closest = this.getClosestDealer(this.props.locations, this.state.center);\n    }\n\n    const renderMetaData = () => (\n      <Helmet\n        title={`${settings.app.name}:  Quality Home Fitness Equipment for Sale.`}\n        meta={[\n          {\n            name: 'description',\n            content: `Shop local and save!  CA Home Fitness offers the best brands in home fitness equipment at the guaranteed best prices, including treadmills, ellipticals, bikes, rowers, strength training equipment, and more.  `\n          },\n          {\n            name: 'keywords',\n            content: `Treadmill, Elliptical machines, Cross Trainer, Exercise Bike, Home Gym, Rower, Commercial Equipment, Life Fitness, Precor, Spirit Fitness, Inspire Fitness, GoFit, Helix`\n          }\n        ]}\n      />\n    );\n    if (this.props.loadingLocations) {\n      return (\n        <PageLayout>\n          <div>Loading</div>\n        </PageLayout>\n      );\n    }\n    return (\n      <PageLayout>\n        {renderMetaData()}\n        <ScrollToTop />\n        <div className=\"locations-view\">\n          <div className=\"locations-view__sidebar\">\n            <div className=\"locations-view__search\">\n              {/* <LocationSearch /> */}\n              <SearchBox\n                dealers={this.props.locations}\n                updateMap={this.updateMap}\n                closestDealer={this.getClosestDealer}\n                zoom={this.state.zoom}\n                invalidAddress={this.invalidAddress}\n              >\n                {!this.state.loading ? (\n                  <button className=\"location-search__submit\" onClick={this.loadPosition}>\n                    <FaLocationArrow className=\"location-search__icon location-search__icon--arrow\" />\n                    Use My Current Location\n                  </button>\n                ) : (\n                  <LoadingIcon />\n                )}\n              </SearchBox>\n            </div>\n            <div className=\"locations-view__list\">\n              <LocationList\n                locations={locations}\n                selectLocation={this.selectLocation}\n                selectedLocation={selectedLocation}\n              />\n            </div>\n          </div>\n          <div className=\"locations-view__map\">\n            {/* <LocationMap /> */}\n            <Map\n              markers={this.props.locations}\n              bounds={this.state.bounds}\n              updateMarkers={this.updateMarkers}\n              center={this.state.center}\n              zoom={this.state.zoom}\n              search={this.state.search}\n              fullscreenControl={isiOSDevice ? false : true}\n              clearLocation={this.clearLocation}\n              selectLocation={this.selectLocation}\n              selectedLocation={selectedLocation}\n            />\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n}\n\nLocationsView.propTypes = {\n  locations: PropTypes.array,\n  loadingLocations: PropTypes.bool\n};\nLocationsView.defaultProps = {};\n\nexport default LocationsView;\n","import React from 'react';\nimport { CookiesProvider } from 'react-cookie';\nimport { NavLink, withRouter } from 'react-router-dom';\n\nimport translate from '../../i18n';\nimport access from './access';\nimport resolvers from './resolvers';\nimport resources from './locales';\n// import ProfileView from './components/ProfileView';\nimport { MenuItem } from '../../modules/common/components/web';\n// import Users from './containers/Users';\n// import UserEdit from './containers/UserEdit';\n// import UserAdd from './containers/UserAdd';\nimport Register from './containers/Register';\nimport Login from './containers/Login';\n// import ForgotPassword from './containers/ForgotPassword';\n// import ResetPassword from './containers/ResetPassword';\n\nimport { AuthRoute, IfLoggedIn, IfNotLoggedIn, /*withLoadedUser,*/ withLogout } from './containers/Auth';\n\nimport Feature from '../connector';\n\n// const ProfileName = withLoadedUser(\n//   ({ currentUser }) => (currentUser ? currentUser.fullName || currentUser.username : null)\n// );\n\nconst LogoutLink = withRouter(\n  withLogout(({ logout, history }) => (\n    <a\n      href=\"javascript:void(0)\"\n      onClick={e => {\n        e.preventDefault();\n        (async () => {\n          await logout();\n          history.push('/');\n        })();\n      }}\n      className=\"nav-link\"\n    >\n      Logout\n    </a>\n  ))\n);\n\nexport * from './containers/Auth';\n\nconst NavLinkUsersWithI18n = translate('user')(({ t }) => (\n  <NavLink to=\"/users\" className=\"nav-link\" activeClassName=\"active\">\n    {t('navLink.users')}\n  </NavLink>\n));\nconst NavLinkLoginWithI18n = translate('user')(({ t }) => (\n  <NavLink to=\"/login\" className=\"nav-link\" activeClassName=\"active\">\n    {t('navLink.sign')}\n  </NavLink>\n));\n\nexport default new Feature(access, {\n  route: [\n    // <AuthRoute exact path=\"/profile\" role={['user', 'admin']} redirect=\"/login\" component={ProfileView} />,\n    // <AuthRoute exact path=\"/users\" redirect=\"/profile\" role=\"admin\" component={Users} />,\n    // <AuthRoute exact path=\"/users/new\" role={['admin']} component={UserAdd} />,\n    // <AuthRoute path=\"/users/:id\" redirect=\"/profile\" role={['user', 'admin']} component={UserEdit} />,\n    <AuthRoute exact path=\"/register\" redirectOnLoggedIn redirect=\"/admin/dashboard\" component={Register} />,\n    <AuthRoute\n      exact\n      path=\"/admin/login\"\n      redirectOnLoggedIn\n      redirect=\"/admin/dashboard\"\n      component={withRouter(({ history }) => (\n        <Login onLogin={() => history.push('/admin/dashboard')} />\n      ))}\n    />,\n    // <AuthRoute exact path=\"/forgot-password\" redirectOnLoggedIn redirect=\"/profile\" component={ForgotPassword} />,\n    // <AuthRoute exact path=\"/reset-password/:token\" redirectOnLoggedIn redirect=\"/profile\" component={ResetPassword} />\n  ],\n  // navItem: [\n  //   <IfLoggedIn key=\"/users\" role=\"admin\">\n  //     <MenuItem>\n  //       <NavLinkUsersWithI18n />\n  //     </MenuItem>\n  //   </IfLoggedIn>\n  // ],\n  // navItemRight: [\n  //   // <IfLoggedIn key=\"/profile\">\n  //   //   <MenuItem>\n  //   //     <NavLink to=\"/profile\" className=\"nav-link\" activeClassName=\"active\">\n  //   //       <ProfileName />\n  //   //     </NavLink>\n  //   //   </MenuItem>\n  //   // </IfLoggedIn>,\n  //   <IfLoggedIn key=\"/logout\">\n  //     <MenuItem>\n  //       <LogoutLink />\n  //     </MenuItem>\n  //   </IfLoggedIn>,\n  //   <IfNotLoggedIn key=\"/login\">\n  //     <MenuItem>\n  //       <NavLinkLoginWithI18n />\n  //     </MenuItem>\n  //   </IfNotLoggedIn>\n  // ],\n  resolver: resolvers,\n  localization: { ns: 'user', resources },\n  // eslint-disable-next-line react/display-name\n  rootComponentFactory: req => (req ? <CookiesProvider cookies={req.universalCookies} /> : <CookiesProvider />)\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AADA;AADA;AACA;AAUA;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAfA;AA0BA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AASA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AATA;AAdA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAyBA;AACA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAsBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;;;;;AA7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAuBA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAPA;AADA;AAeA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AADA;AAAA;AARA;AAFA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AApBA;AA4BA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAFA;AA7BA;AAHA;AAkDA;;;;AAnNA;AACA;AAqNA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AATA;AAAA;AAAA;AADA;AACA;AAgBA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AALA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAhDA;;;;A","sourceRoot":""}