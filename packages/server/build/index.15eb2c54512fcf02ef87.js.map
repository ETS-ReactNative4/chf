{"version":3,"file":"index.9231c88a71e4dbb793a2.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/containers/Products.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/Products.graphql"],"sourcesContent":["import React, { Component } from 'react';\nimport { compose } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport AdminView from '../components/AdminView';\nimport Loader from '../../common/components/global/components/Loader';\nimport '../styles/productspecs.scss';\nimport ProductSpecs from '../components/ProductSpecs';\nimport { ADMIN_PRODUCTS_QUERY /*MODIFY_PRODUCT_DATA*/ } from '../../common/schema';\nimport PRODUCTS_QUERY from '../graphql/Products.graphql';\n\nconst Query = gql`\n  query adminProducts($first: Int, $after: String) {\n    # sfy_shop {\n    admin_products(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          featuredImage {\n            transformedSrc(maxWidth: 100, maxHeight: 100)\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n    # }\n  }\n`;\n\nconst columns = [\n  {\n    title: (\n      <a href=\"#\">\n        {/* {t('users.column.name')} {this.renderOrderByArrow('username')} */}\n        Name\n      </a>\n    ),\n    dataIndex: 'node',\n    key: 'title',\n    // eslint-disable-next-line\n    render: (text, record) => {\n      // console.log('TEXT::', text);\n      console.log('RECORD:', record);\n      return (\n        <div>\n          {text}\n          {/* <Link to={{ pathname: `/admin/locations/${record.node.handle}` }}>{text}</Link> */}\n        </div>\n      );\n    }\n  },\n  {\n    title: (\n      <a href=\"#\">\n        {/* {t('users.column.name')} {this.renderOrderByArrow('username')} */}\n        Name\n      </a>\n    ),\n    dataIndex: 'node',\n    key: 'title',\n    // eslint-disable-next-line\n    render: (text, record) => {\n      // console.log('TEXT::', text);\n      // console.log('RECORD:', record);\n      return (\n        <div>\n          {text}\n          {/* <Link to={{ pathname: `/admin/locations/${record.node.handle}` }}>{text}</Link> */}\n        </div>\n      );\n    }\n  }\n];\nclass Products extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { productsLoading, sfy_shop } = this.props;\n    console.log('The PRODUCT PROPS::::', sfy_shop);\n\n    if (productsLoading) {\n      return (\n        <AdminView {...this.props}>\n          <Loader />\n        </AdminView>\n      );\n    }\n    return (\n      <AdminView {...this.props}>\n        <div className=\"admin__productspecs\">\n          <ProductSpecs dataSource={sfy_shop.products.edges} columns={columns} />\n        </div>\n      </AdminView>\n    );\n  }\n}\nconst ProductsApollo = compose(\n  grphql(PRODUCTS_QUERY, {\n    options: () => ({\n      variables: { first: 50 }\n    }),\n     props: (data) => {\n       console.log('DATA;::', data);\n     }\n  })\n)(Products);\n\nexport default ProductsApollo;\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"admin_products\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"admin_products\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transformedSrc\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"maxWidth\"},\"value\":{\"kind\":\"IntValue\",\"value\":\"100\"}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"maxHeight\"},\"value\":{\"kind\":\"IntValue\",\"value\":\"100\"}}],\"directives\":[]}]}}]}}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":218}};\n    doc.loc.source = {\"body\":\"query admin_products($first: Int) {\\n  admin_products(first: $first) {\\n    edges {\\n      node {\\n        title\\n        featuredImage {\\n          transformedSrc(maxWidth: 100, maxHeight:100)\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"admin_products\"] = oneQuery(doc, \"admin_products\");\n        \n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAEA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAKA;AAnBA;AAsBA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAKA;AAnBA;AACA;AAqBA;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;;;;AAvBA;AACA;AAwBA;AAEA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AANA;AACA;AASA;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}