{"version":3,"file":"index.d54235e195c09f1425c3.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/index.web.jsx","src/middleware/website.jsx"],"sourcesContent":["import React from 'react';\nimport { CookiesProvider } from 'react-cookie';\nimport { NavLink, withRouter } from 'react-router-dom';\n\nimport translate from '../../i18n';\nimport access from './access';\nimport resolvers from './resolvers';\nimport resources from './locales';\n// import ProfileView from './components/ProfileView';\nimport { MenuItem } from '../../modules/common/components/web';\n// import Users from './containers/Users';\n// import UserEdit from './containers/UserEdit';\n// import UserAdd from './containers/UserAdd';\nimport Register from './containers/Register';\nimport Login from './containers/Login';\n// import ForgotPassword from './containers/ForgotPassword';\n// import ResetPassword from './containers/ResetPassword';\n\nimport { AuthRoute, IfLoggedIn, IfNotLoggedIn, /*withLoadedUser,*/ withLogout } from './containers/Auth';\n\nimport Feature from '../connector';\n\n// const ProfileName = withLoadedUser(\n//   ({ currentUser }) => (currentUser ? currentUser.fullName || currentUser.username : null)\n// );\n\nconst LogoutLink = withRouter(\n  withLogout(({ logout, history }) => (\n    <a\n      href=\"javascript:void(0)\"\n      onClick={e => {\n        e.preventDefault();\n        (async () => {\n          await logout();\n          history.push('/');\n        })();\n      }}\n      className=\"nav-link\"\n    >\n      Logout\n    </a>\n  ))\n);\n\nexport * from './containers/Auth';\n\nconst NavLinkUsersWithI18n = translate('user')(({ t }) => (\n  <NavLink to=\"/users\" className=\"nav-link\" activeClassName=\"active\">\n    {t('navLink.users')}\n  </NavLink>\n));\nconst NavLinkLoginWithI18n = translate('user')(({ t }) => (\n  <NavLink to=\"/login\" className=\"nav-link\" activeClassName=\"active\">\n    {t('navLink.sign')}\n  </NavLink>\n));\n\nexport default new Feature(access, {\n  route: [\n    // <AuthRoute exact path=\"/profile\" role={['user', 'admin']} redirect=\"/login\" component={ProfileView} />,\n    // <AuthRoute exact path=\"/users\" redirect=\"/profile\" role=\"admin\" component={Users} />,\n    // <AuthRoute exact path=\"/users/new\" role={['admin']} component={UserAdd} />,\n    // <AuthRoute path=\"/users/:id\" redirect=\"/profile\" role={['user', 'admin']} component={UserEdit} />,\n    <AuthRoute exact path=\"/register\" redirectOnLoggedIn redirect=\"/admin/dashboard\" component={Register} />,\n    <AuthRoute\n      exact\n      path=\"/admin/login\"\n      redirectOnLoggedIn\n      redirect=\"/admin/dashboard\"\n      component={withRouter(({ history }) => (\n        <Login onLogin={() => history.push('/admin/dashboard')} />\n      ))}\n    />,\n    // <AuthRoute exact path=\"/forgot-password\" redirectOnLoggedIn redirect=\"/profile\" component={ForgotPassword} />,\n    // <AuthRoute exact path=\"/reset-password/:token\" redirectOnLoggedIn redirect=\"/profile\" component={ResetPassword} />\n  ],\n  // navItem: [\n  //   <IfLoggedIn key=\"/users\" role=\"admin\">\n  //     <MenuItem>\n  //       <NavLinkUsersWithI18n />\n  //     </MenuItem>\n  //   </IfLoggedIn>\n  // ],\n  // navItemRight: [\n  //   // <IfLoggedIn key=\"/profile\">\n  //   //   <MenuItem>\n  //   //     <NavLink to=\"/profile\" className=\"nav-link\" activeClassName=\"active\">\n  //   //       <ProfileName />\n  //   //     </NavLink>\n  //   //   </MenuItem>\n  //   // </IfLoggedIn>,\n  //   <IfLoggedIn key=\"/logout\">\n  //     <MenuItem>\n  //       <LogoutLink />\n  //     </MenuItem>\n  //   </IfLoggedIn>,\n  //   <IfNotLoggedIn key=\"/login\">\n  //     <MenuItem>\n  //       <NavLinkLoginWithI18n />\n  //     </MenuItem>\n  //   </IfNotLoggedIn>\n  // ],\n  resolver: resolvers,\n  localization: { ns: 'user', resources },\n  // eslint-disable-next-line react/display-name\n  rootComponentFactory: req => (req ? <CookiesProvider cookies={req.universalCookies} /> : <CookiesProvider />)\n});\n","import React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { SchemaLink } from 'apollo-link-schema';\nimport { CookiesProvider } from 'react-cookie';\n\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport { Provider } from 'react-redux';\nimport { StaticRouter } from 'react-router';\nimport { ServerStyleSheet } from 'styled-components';\nimport fs from 'fs';\nimport path from 'path';\nimport Helmet from 'react-helmet';\n\nimport { isApiExternal, apiUrl } from '../net';\nimport createApolloClient from '../../../common/createApolloClient';\nimport createReduxStore from '../../../common/createReduxStore';\nimport Html from './html';\nimport Routes from '../../../client/src/app/Routes';\nimport modules from '../modules';\nimport createSchema from '../api/schema';\n\nlet assetMap;\nconst playgroundUrl = '/graphiql';\n\nconst renderServerSide = async (req, res) => {\n  // console.log('EXECUTING RENDER ', new Date().getMinutes(), new Date().getSeconds());\n  const clientModules = require('../../../client/src/modules').default;\n  // console.log('ABOUT TO CREATE SCHEMA;::', new Date().getMinutes(), new Date().getSeconds());\n  const schema = await createSchema();\n  // console.log('CREATED SCHEMA::', new Date().getMinutes(), new Date().getSeconds());\n  const schemaLink = new SchemaLink({\n    schema: schema,\n    context: await modules.createContext(req, res)\n  });\n\n  const client = createApolloClient({\n    apiUrl,\n    createNetLink: !isApiExternal ? () => schemaLink : undefined,\n    links: clientModules.link,\n    clientResolvers: clientModules.resolvers\n  });\n\n  let initialState = {};\n  console.log('CLIENT::', JSON.stringify(client));\n  const store = createReduxStore(initialState, client);\n\n  const context = {};\n  // const App = clientModules.getWrappedRoot(\n  //   <Provider store={store}>\n  //     <ApolloProvider client={client}>\n  //       {clientModules.getDataRoot(\n  //         <StaticRouter location={req.url} context={context}>\n  //           {Routes}\n  //         </StaticRouter>\n  //       )}\n  //     </ApolloProvider>\n  //   </Provider>,\n  //   req\n  // );\n  const App = (\n          clientModules.getWrappedRoot(\n\n    // <CookiesProvider cookies={req.universalCookies}>\n      <Provider store={store}>\n        <ApolloProvider client={client}>\n          {clientModules.getDataRoot(\n          <StaticRouter location={req.url} context={context}>\n            {Routes}\n          </StaticRouter>\n          )}\n        </ApolloProvider>\n      </Provider>,\n      req\n    // </CookiesProvider>\n  )\n  );\n  await getDataFromTree(App);\nconsole.log('CLIENT: AFTER:::', JSON.stringify(client));\n  const sheet = new ServerStyleSheet();\n  const html = ReactDOMServer.renderToString(\n    sheet.collectStyles(App)\n    // sheet.collectStyles(\n    //   // clientModules.getWrappedRoot(\n    //   <CookiesProvider cookies={req.universalCookies}>\n    //     <Provider store={store}>\n    //       <ApolloProvider client={client}>\n    //         {/* {clientModules.getDataRoot( */}\n    //         <StaticRouter location={req.url} context={context}>\n    //           {Routes}\n    //         </StaticRouter>\n    //         {/* )} */}\n    //       </ApolloProvider>\n    //     </Provider>\n    //   </CookiesProvider>\n    //   // )\n    // )\n  );\n  const css = sheet.getStyleElement().map((el, idx) => (el ? React.cloneElement(el, { key: idx }) : el));\n  const helmet = Helmet.renderStatic(); // Avoid memory leak while tracking mounted instances\n  if (context.pageNotFound === true) {\n    res.status(404);\n    // res.end();\n  } else {\n    if (context.url) {\n      res.writeHead(301, { Location: context.url });\n      res.end();\n    } else {\n      if (__DEV__ || !assetMap) {\n        assetMap = JSON.parse(fs.readFileSync(path.join(__FRONTEND_BUILD_DIR__, 'assets.json')));\n      }\n      const apolloState = Object.assign({}, client.cache.extract());\n      const page = <Html content={html} state={apolloState} assetMap={assetMap} css={css} helmet={helmet} />;\n      res.send(`<!doctype html>\\n${ReactDOMServer.renderToStaticMarkup(page)}`);\n      res.end();\n    }\n  }\n};\n\nexport default async (req, res, next) => {\n  try {\n    if (req.url === playgroundUrl) {\n      return next();\n    } else if (req.path.indexOf('.') < 0 && __SSR__) {\n      return await renderServerSide(req, res);\n    } else if (!__SSR__ && req.method === 'GET') {\n      res.sendFile(path.resolve(__FRONTEND_BUILD_DIR__, 'index.html'));\n    } else {\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AATA;AAAA;AAAA;AADA;AACA;AAgBA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AALA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAhDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AAMA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAFA;AADA;AAUA;AAbA;AApCA;AAAA;AACA;AADA;AAqDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA6FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA,yBAEA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAWA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}