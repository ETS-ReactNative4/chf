{"version":3,"file":"index.1ada6de2eb75492ee73f.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport SIMPLE_PAGE_QUERY from '../../graphql/SimplePageQuery.graphql';\nimport DEALERS_QUERY from '../../graphql/Dealers.graphql';\nimport DEALER_BY_HANDLE_QUERY from '../../graphql/DealerQuery.graphql';\nimport UPDATE_DEALER from '../../graphql/UpdateDealer.graphql';\n\nimport LocationsView from './LocationsView';\n// import FormCreator from '../FormCreator';\n// import Text from '../FormCreator/FormTypes/Text';\n// import Formic from './Form';\n//\n// const LocationForm = new FormCreator({\n//   field: [<Text />]\n// });\n\nclass Locations extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <LocationsView {...this.props} />;\n  }\n}\n\nconst LocationsWithApollo = compose(\n  graphql(DEALER_BY_HANDLE_QUERY, {\n    options: props => {\n      return { variables: { handle: ' ' } };\n    },\n    props: ({ data }) => {\n      console.log('data', data);\n      return { ...data };\n    }\n  }),\n  graphql(SIMPLE_PAGE_QUERY, {\n    options: () => {\n      return { variables: { pageTitle: 'Locations' } };\n    },\n    props: ({ data }) => {\n      console.log('Locations Page data', data);\n      const { page, loading: loadingPage, error } = data;\n      if (loadingPage && !error) {\n        return { loadingPage, page: null };\n      } else {\n        return { page, loadingPage };\n      }\n    }\n  }),\n  graphql(DEALERS_QUERY, {\n    options: () => ({\n      variables: { first: 12, after: null }\n    }),\n    props: ({ data }) => {\n      console.log('DATA:::', data);\n      const { loading, error, dealers } = data;\n      if (error) {\n        return { dealersError: error };\n      }\n      if (loading) {\n        return { loadingDealers: loading };\n      }\n      if (!loading && !error) {\n        return { loadingDealers: loading, dealers };\n      }\n    }\n  }),\n  graphql(UPDATE_DEALER, {\n    props: ({ mutate }) => ({\n      updateDealer: async dealer => {\n        try {\n          const { data } = await mutate({\n            variables: { dealer },\n            refetchQueries: [{ query: DEALERS_QUERY }]\n            // update: (proxy, { data: { updateDealer } }) => {\n            //   console.log('UPDATED UPDATE:::', updateDealer);\n            //   // console.log('WHAT :???', DEALER_BY_HANDLE_QUERY);\n            //   // const query = DEALER_BY_HANDLE_QUERY;\n            //   // const data = proxy.readQuery({\n            //   //   query: gql`\n            //   //     query dealerByHandle($handle: String) {\n            //   //       dealerByHandle(handle: $handle) {\n            //   //         id\n            //   //         handle\n            //   //         name\n            //   //         street\n            //   //         suite\n            //   //         city\n            //   //         zip\n            //   //         state\n            //   //         country\n            //   //         email\n            //   //         phone\n            //   //         website\n            //   //         lat\n            //   //         lng\n            //   //       }\n            //   //     }\n            //   //   `,\n            //   //   variables: { handle: ' ' }\n            //   // });\n            //   console.log('DEALERS QUERY::', DEALERS_QUERY);\n            //   // const test = proxy.readQuery({ query: gql`\n            //   //   query dealers($first: Int, $after: Int) {\n            //   //     dealers(first: $first, after: $after) {\n            //   //       dealers_count\n            //   //       edges {\n            //   //         node {\n            //   //           id\n            //   //         }\n            //   //       }\n            //   //     }\n            //   //   }\n            //   //   `,\n            //   //   variables: { first: 12 }\n            //   //  });\n            //\n            //   console.log('DATA::', test);\n            //   // data.dealers.push(updatedDealer);\n            //   // proxy.writeQuery({ query: DEALERS_QUERY, data });\n            // }\n          });\n          console.log('UPDATED::', data);\n          return data;\n        } catch (e) {\n          console.log('ERROR UPDATING:', e);\n        }\n      }\n    })\n  })\n)(Locations);\nexport default LocationsWithApollo;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;;;;AARA;AACA;AAUA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjDA;AACA;AAHA;AAAA;AAEA;AACA;AAkDA;AArDA;AACA;AADA;AAAA;AAAA;AACA;AAuDA;AACA;AAzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAgEA;;;;A","sourceRoot":""}