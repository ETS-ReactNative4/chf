{"version":3,"file":"index.9659106ae47f70b65d61.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/components/UsersFilterView.web.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/components/UsersListView.web.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/containers/UserOperations.js","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/containers/Users.web.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/containers/UsersFilter.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/containers/UsersList.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/graphql/DeleteUser.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/graphql/UpdateFilter.client.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/graphql/UpdateOrderBy.client.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/graphql/UsersQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/graphql/UsersSubscription.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/index.web.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/common/utils.js","external \"react-debounce-input\""],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DebounceInput } from 'react-debounce-input';\n\nimport translate from '../../../i18n';\nimport { Form, FormItem, Select, Option, Label, Input } from '../../common/components/web';\n\nclass UsersFilterView extends React.PureComponent {\n  static propTypes = {\n    searchText: PropTypes.string,\n    filter: PropTypes.object,\n    role: PropTypes.string,\n    isActive: PropTypes.bool,\n    onSearchTextChange: PropTypes.func.isRequired,\n    onRoleChange: PropTypes.func.isRequired,\n    onIsActiveChange: PropTypes.func.isRequired,\n    t: PropTypes.func\n  };\n\n  handleSearch = e => {\n    const { onSearchTextChange } = this.props;\n    onSearchTextChange(e.target.value);\n  };\n\n  handleRole = e => {\n    const { onRoleChange } = this.props;\n    onRoleChange(e.target.value);\n  };\n\n  handleIsActive = () => {\n    const {\n      onIsActiveChange,\n      filter: { isActive }\n    } = this.props;\n    onIsActiveChange(!isActive);\n  };\n\n  render() {\n    const {\n      filter: { role, isActive },\n      t\n    } = this.props;\n    return (\n      <Form layout=\"inline\">\n        <FormItem label={t('users.list.item.filter')}>\n          <DebounceInput\n            minLength={2}\n            debounceTimeout={300}\n            placeholder={t('users.list.item.search')}\n            element={Input}\n            onChange={this.handleSearch}\n          />\n        </FormItem>\n        &nbsp;\n        <FormItem label={t('users.list.item.role.label')}>\n          <Select name=\"role\" defaultValue={role} onChange={this.handleRole}>\n            <Option key={1} value=\"\">\n              {t('users.list.item.role.all')}\n            </Option>\n            <Option key={2} value=\"user\">\n              {t('users.list.item.role.user')}\n            </Option>\n            <Option key={3} value=\"admin\">\n              {t('users.list.item.role.admin')}\n            </Option>\n          </Select>\n        </FormItem>\n        &nbsp;\n        <FormItem>\n          <Label>\n            <Input type=\"checkbox\" defaultChecked={isActive} onChange={this.handleIsActive} />\n            {t('users.list.item.active')}\n          </Label>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nexport default translate('user')(UsersFilterView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport translate from '../../../i18n';\nimport { Table, Button } from '../../common/components/web';\n\nclass UsersView extends React.PureComponent {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    users: PropTypes.array,\n    orderBy: PropTypes.object,\n    onOrderBy: PropTypes.func.isRequired,\n    deleteUser: PropTypes.func.isRequired,\n    t: PropTypes.func\n  };\n\n  state = {\n    errors: []\n  };\n\n  handleDeleteUser = async id => {\n    const { deleteUser } = this.props;\n    const result = await deleteUser(id);\n    if (result && result.errors) {\n      this.setState({ errors: result.errors });\n    } else {\n      this.setState({ errors: [] });\n    }\n  };\n\n  renderOrderByArrow = name => {\n    const { orderBy } = this.props;\n\n    if (orderBy && orderBy.column === name) {\n      if (orderBy.order === 'desc') {\n        return <span className=\"badge badge-primary\">&#8595;</span>;\n      } else {\n        return <span className=\"badge badge-primary\">&#8593;</span>;\n      }\n    } else {\n      return <span className=\"badge badge-secondary\">&#8645;</span>;\n    }\n  };\n\n  orderBy = (e, name) => {\n    const { onOrderBy, orderBy } = this.props;\n\n    e.preventDefault();\n\n    let order = 'asc';\n    if (orderBy && orderBy.column === name) {\n      if (orderBy.order === 'asc') {\n        order = 'desc';\n      } else if (orderBy.order === 'desc') {\n        return onOrderBy({\n          column: '',\n          order: ''\n        });\n      }\n    }\n\n    return onOrderBy({ column: name, order });\n  };\n\n  render() {\n    const { loading, users, t } = this.props;\n    const { errors } = this.state;\n\n    const columns = [\n      {\n        title: (\n          <a onClick={e => this.orderBy(e, 'username')} href=\"#\">\n            {t('users.column.name')} {this.renderOrderByArrow('username')}\n          </a>\n        ),\n        dataIndex: 'username',\n        key: 'username',\n        render: (text, record) => (\n          <Link className=\"user-link\" to={`/users/${record.id}`}>\n            {text}\n          </Link>\n        )\n      },\n      {\n        title: (\n          <a onClick={e => this.orderBy(e, 'email')} href=\"#\">\n            {t('users.column.email')} {this.renderOrderByArrow('email')}\n          </a>\n        ),\n        dataIndex: 'email',\n        key: 'email'\n      },\n      {\n        title: (\n          <a onClick={e => this.orderBy(e, 'role')} href=\"#\">\n            {t('users.column.role')} {this.renderOrderByArrow('role')}\n          </a>\n        ),\n        dataIndex: 'role',\n        key: 'role'\n      },\n      {\n        title: (\n          <a onClick={e => this.orderBy(e, 'isActive')} href=\"#\">\n            {t('users.column.active')} {this.renderOrderByArrow('isActive')}\n          </a>\n        ),\n        dataIndex: 'isActive',\n        key: 'isActive',\n        render: text => text.toString()\n      },\n      {\n        title: t('users.column.actions'),\n        key: 'actions',\n        render: (text, record) => (\n          <Button color=\"primary\" size=\"sm\" onClick={() => this.handleDeleteUser(record.id)}>\n            {t('users.btn.delete')}\n          </Button>\n        )\n      }\n    ];\n\n    if (loading && !users) {\n      return <div className=\"text-center\">{t('users.loadMsg')}</div>;\n    } else {\n      return (\n        <div>\n          {errors &&\n            errors.map(error => (\n              <div className=\"alert alert-danger\" role=\"alert\" key={error.field}>\n                {error.message}\n              </div>\n            ))}\n          <Table dataSource={users} columns={columns} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default translate('user')(UsersView);\n","import { graphql } from 'react-apollo';\nimport update from 'immutability-helper';\nimport { removeTypename } from '../../../../../common/utils';\n\nimport USERS_STATE_QUERY from '../graphql/UsersStateQuery.client.graphql';\nimport UPDATE_ORDER_BY from '../graphql/UpdateOrderBy.client.graphql';\nimport USERS_QUERY from '../graphql/UsersQuery.graphql';\nimport DELETE_USER from '../graphql/DeleteUser.graphql';\nimport UPDATE_FILTER from '../graphql/UpdateFilter.client.graphql';\nimport USERS_SUBSCRIPTION from '../graphql/UsersSubscription.graphql';\n\nconst withUsersState = Component =>\n  graphql(USERS_STATE_QUERY, {\n    props({ data: { usersState } }) {\n      return removeTypename(usersState);\n    }\n  })(Component);\n\nconst withUsers = Component =>\n  graphql(USERS_QUERY, {\n    options: ({ orderBy, filter }) => {\n      return {\n        fetchPolicy: 'network-only',\n        variables: { orderBy, filter }\n      };\n    },\n    props({ data: { loading, users, refetch, error, subscribeToMore } }) {\n      return { loading, users, refetch, subscribeToMore, errors: error ? error.graphQLErrors : null };\n    }\n  })(Component);\n\nconst withUsersDeleting = Component =>\n  graphql(DELETE_USER, {\n    props: ({ mutate }) => ({\n      deleteUser: async id => {\n        try {\n          const {\n            data: { deleteUser }\n          } = await mutate({\n            variables: { id }\n          });\n\n          if (deleteUser.errors) {\n            return { errors: deleteUser.errors };\n          }\n        } catch (e) {\n          console.log(e.graphQLErrors);\n        }\n      }\n    })\n  })(Component);\n\nconst withOrderByUpdating = Component =>\n  graphql(UPDATE_ORDER_BY, {\n    props: ({ mutate }) => ({\n      onOrderBy: orderBy => {\n        mutate({ variables: { orderBy } });\n      }\n    })\n  })(Component);\n\nconst withFilterUpdating = Component =>\n  graphql(UPDATE_FILTER, {\n    props: ({ mutate }) => ({\n      onSearchTextChange(searchText) {\n        mutate({ variables: { filter: { searchText } } });\n      },\n      onRoleChange(role) {\n        mutate({ variables: { filter: { role } } });\n      },\n      onIsActiveChange(isActive) {\n        mutate({ variables: { filter: { isActive } } });\n      }\n    })\n  })(Component);\n\nfunction addUser(prev, node) {\n  return update(prev, {\n    users: {\n      $set: [...prev.users, node]\n    }\n  });\n}\n\nfunction deleteUser(prev, id) {\n  const index = prev.users.findIndex(user => user.id === id);\n  // ignore if not found\n  if (index < 0) {\n    return prev;\n  }\n  return update(prev, {\n    users: {\n      $splice: [[index, 1]]\n    }\n  });\n}\n\nconst subscribeToUsersList = (subscribeToMore, filter) => {\n  return subscribeToMore({\n    document: USERS_SUBSCRIPTION,\n    variables: { filter },\n    updateQuery: (\n      prev,\n      {\n        subscriptionData: {\n          data: {\n            usersUpdated: { mutation, node }\n          }\n        }\n      }\n    ) => {\n      switch (mutation) {\n        case 'CREATED':\n          return addUser(prev, node);\n        case 'DELETED':\n          return deleteUser(prev, node.id);\n        case 'UPDATED':\n          return deleteUser(prev, node.id);\n        default:\n          return prev;\n      }\n    }\n  });\n};\n\nexport { withUsersState, withUsers, withUsersDeleting, withOrderByUpdating, withFilterUpdating };\nexport { subscribeToUsersList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\n\nimport translate from '../../../i18n';\nimport UsersFilter from '../containers/UsersFilter';\nimport UsersList from '../containers/UsersList';\nimport { Button, PageLayout } from '../../common/components/web';\n\nimport settings from '../../../../../../settings';\n\nconst Users = ({ t }) => {\n  const renderMetaData = () => (\n    <Helmet\n      title={`${settings.app.name} - ${t('users.title')}`}\n      meta={[\n        {\n          name: 'description',\n          content: `${settings.app.name} - ${t('users.meta')}`\n        }\n      ]}\n    />\n  );\n\n  return (\n    <PageLayout>\n      {renderMetaData()}\n      <h2>{t('users.list.title')}</h2>\n      <Link to=\"/users/new\">\n        <Button color=\"primary\">{t('users.btn.add')}</Button>\n      </Link>\n      <hr />\n      <UsersFilter />\n      <hr />\n      <UsersList />\n    </PageLayout>\n  );\n};\n\nUsers.propTypes = {\n  t: PropTypes.func\n};\n\nexport default translate('user')(Users);\n","// React\nimport React from 'react';\nimport { compose } from 'react-apollo';\n\n// Components\nimport UsersFilterView from '../components/UsersFilterView';\n\nimport { withUsersState, withFilterUpdating } from './UserOperations';\n\nclass UsersFilter extends React.Component {\n  render() {\n    return <UsersFilterView {...this.props} />;\n  }\n}\n\nexport default compose(\n  withUsersState,\n  withFilterUpdating\n)(UsersFilter);\n","// React\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'react-apollo';\n\n// Components\nimport UsersListView from '../components/UsersListView';\n\nimport {\n  withUsersState,\n  withUsers,\n  withUsersDeleting,\n  withOrderByUpdating,\n  subscribeToUsersList\n} from './UserOperations';\n\nclass UsersList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.subscription = null;\n  }\n\n  componentDidMount() {\n    this.checkSubscription();\n  }\n\n  componentDidUpdate() {\n    this.checkSubscription();\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription();\n    }\n  }\n\n  checkSubscription() {\n    const { loading, subscribeToMore, filter } = this.props;\n\n    if (!loading) {\n      // The component must re-subscribe every time filters changed.\n      // That allows to get valid data after some CRUD operation happens.\n      if (this.subscription) {\n        this.subscription();\n        this.subscription = null;\n      }\n\n      this.subscription = subscribeToUsersList(subscribeToMore, filter);\n    }\n  }\n\n  render() {\n    return <UsersListView {...this.props} />;\n  }\n}\n\nUsersList.propTypes = {\n  filter: PropTypes.object,\n  users: PropTypes.array,\n  subscribeToMore: PropTypes.func,\n  loading: PropTypes.bool\n};\n\nexport default compose(\n  withUsersState,\n  withUsers,\n  withOrderByUpdating,\n  withUsersDeleting\n)(UsersList);\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"deleteUser\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"deleteUser\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"errors\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":134}};\n    doc.loc.source = {\"body\":\"mutation deleteUser($id: Int!) {\\n  deleteUser(id: $id) {\\n    user {\\n      id\\n    }\\n    errors {\\n      field\\n      message\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"deleteUser\"] = oneQuery(doc, \"deleteUser\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateFilter\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterUserInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateFilter\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}}],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"client\"},\"arguments\":[]}]}]}}],\"loc\":{\"start\":0,\"end\":132}};\n    doc.loc.source = {\"body\":\"#import \\\"./UsersState.client.graphql\\\"\\n\\nmutation updateFilter($filter: FilterUserInput!) {\\n  updateFilter(filter: $filter) @client\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./UsersState.client.graphql\").definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"updateFilter\"] = oneQuery(doc, \"updateFilter\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateOrderBy\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"orderBy\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrderByUserInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateOrderBy\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"orderBy\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"orderBy\"}}}],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"client\"},\"arguments\":[]}]}]}}],\"loc\":{\"start\":0,\"end\":138}};\n    doc.loc.source = {\"body\":\"#import \\\"./UsersState.client.graphql\\\"\\n\\nmutation updateOrderBy($orderBy: OrderByUserInput!) {\\n  updateOrderBy(orderBy: $orderBy) @client\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./UsersState.client.graphql\").definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"updateOrderBy\"] = oneQuery(doc, \"updateOrderBy\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"orderBy\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrderByUserInput\"}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterUserInput\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"orderBy\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"orderBy\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserInfo\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":162}};\n    doc.loc.source = {\"body\":\"#import \\\"./User.graphql\\\"\\n\\nquery users($orderBy: OrderByUserInput, $filter: FilterUserInput) {\\n  users(orderBy: $orderBy, filter: $filter) {\\n    ...UserInfo\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./User.graphql\").definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"users\"] = oneQuery(doc, \"users\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"subscription\",\"name\":{\"kind\":\"Name\",\"value\":\"onUsersUpdated\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterUserInput\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"usersUpdated\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"mutation\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserInfo\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":170}};\n    doc.loc.source = {\"body\":\"#import \\\"./User.graphql\\\"\\n\\nsubscription onUsersUpdated($filter: FilterUserInput) {\\n  usersUpdated(filter: $filter) {\\n    mutation\\n    node {\\n      ...UserInfo\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./User.graphql\").definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"onUsersUpdated\"] = oneQuery(doc, \"onUsersUpdated\");\n        \n","import React from 'react';\nimport { CookiesProvider } from 'react-cookie';\nimport { NavLink, withRouter } from 'react-router-dom';\n\nimport translate from '../../i18n';\nimport access from './access';\nimport resolvers from './resolvers';\nimport resources from './locales';\n// import ProfileView from './components/ProfileView';\nimport { MenuItem } from '../../modules/common/components/web';\nimport Users from './containers/Users';\n// import UserEdit from './containers/UserEdit';\n// import UserAdd from './containers/UserAdd';\nimport Register from './containers/Register';\nimport Login from './containers/Login';\n// import ForgotPassword from './containers/ForgotPassword';\n// import ResetPassword from './containers/ResetPassword';\n\nimport { AuthRoute, IfLoggedIn, IfNotLoggedIn, /*withLoadedUser,*/ withLogout } from './containers/Auth';\n\nimport Feature from '../connector';\n\n// const ProfileName = withLoadedUser(\n//   ({ currentUser }) => (currentUser ? currentUser.fullName || currentUser.username : null)\n// );\n\nconst LogoutLink = withRouter(\n  withLogout(({ logout, history }) => (\n    <a\n      href=\"javascript:void(0)\"\n      onClick={e => {\n        e.preventDefault();\n        (async () => {\n          await logout();\n          history.push('/');\n        })();\n      }}\n      className=\"nav-link\"\n    >\n      Logout\n    </a>\n  ))\n);\n\nexport * from './containers/Auth';\n\nconst NavLinkUsersWithI18n = translate('user')(({ t }) => (\n  <NavLink to=\"/users\" className=\"nav-link\" activeClassName=\"active\">\n    {t('navLink.users')}\n  </NavLink>\n));\nconst NavLinkLoginWithI18n = translate('user')(({ t }) => (\n  <NavLink to=\"/login\" className=\"nav-link\" activeClassName=\"active\">\n    {t('navLink.sign')}\n  </NavLink>\n));\n\nexport default new Feature(access, {\n  route: [\n    // <AuthRoute exact path=\"/profile\" role={['user', 'admin']} redirect=\"/login\" component={ProfileView} />,\n    <AuthRoute exact path=\"/admin/users\" redirect=\"/profile\" role=\"admin\" component={Users} />,\n    // <AuthRoute exact path=\"/users/new\" role={['admin']} component={UserAdd} />,\n    // <AuthRoute path=\"/users/:id\" redirect=\"/profile\" role={['user', 'admin']} component={UserEdit} />,\n    <AuthRoute exact path=\"/register\" redirectOnLoggedIn redirect=\"/admin/dashboard\" component={Register} />,\n    <AuthRoute\n      exact\n      path=\"/admin/login\"\n      redirectOnLoggedIn\n      redirect=\"/admin/dashboard\"\n      component={withRouter(({ history }) => (\n        <Login onLogin={() => history.push('/admin/dashboard')} />\n      ))}\n    />,\n    // <AuthRoute exact path=\"/forgot-password\" redirectOnLoggedIn redirect=\"/profile\" component={ForgotPassword} />,\n    // <AuthRoute exact path=\"/reset-password/:token\" redirectOnLoggedIn redirect=\"/profile\" component={ResetPassword} />\n  ],\n  // navItem: [\n  //   <IfLoggedIn key=\"/users\" role=\"admin\">\n  //     <MenuItem>\n  //       <NavLinkUsersWithI18n />\n  //     </MenuItem>\n  //   </IfLoggedIn>\n  // ],\n  // navItemRight: [\n  //   // <IfLoggedIn key=\"/profile\">\n  //   //   <MenuItem>\n  //   //     <NavLink to=\"/profile\" className=\"nav-link\" activeClassName=\"active\">\n  //   //       <ProfileName />\n  //   //     </NavLink>\n  //   //   </MenuItem>\n  //   // </IfLoggedIn>,\n  //   <IfLoggedIn key=\"/logout\">\n  //     <MenuItem>\n  //       <LogoutLink />\n  //     </MenuItem>\n  //   </IfLoggedIn>,\n  //   <IfNotLoggedIn key=\"/login\">\n  //     <MenuItem>\n  //       <NavLinkLoginWithI18n />\n  //     </MenuItem>\n  //   </IfNotLoggedIn>\n  // ],\n  resolver: resolvers,\n  localization: { ns: 'user', resources },\n  // eslint-disable-next-line react/display-name\n  rootComponentFactory: req => (req ? <CookiesProvider cookies={req.universalCookies} /> : <CookiesProvider />)\n});\n","import _ from 'lodash';\nimport log from './log';\n\nexport const nestedOmit = (obj, iteratee, context) => {\n  let r = _.omit(obj, iteratee, context);\n\n  _.each(r, function(val, key) {\n    if (typeof val === 'object') r[key] = nestedOmit(val, iteratee, context);\n  });\n\n  return r;\n};\n\nexport const removeTypename = obj => nestedOmit(obj, '__typename');\n\n/**\n * Wraps target object to trace and log all method calls\n *\n * @param {*} obj target object to trace\n */\nexport const traceMethodCalls = obj => {\n  return new Proxy(obj, {\n    get(target, property) {\n      const origProperty = target[property];\n      return function(...args) {\n        const result = origProperty.apply(target, args);\n        log.debug(property + JSON.stringify(args) + ' -> ' + JSON.stringify(result));\n        return result;\n      };\n    }\n  });\n};\n\n// Get current platform\nconst getPlatform = () => {\n  if (typeof document !== 'undefined') {\n    return 'web';\n  } else if (typeof window === 'undefined') {\n    return 'server';\n  } else {\n    return 'mobile';\n  }\n};\n\nexport const PLATFORM = getPlatform();\n","module.exports = require(\"react-debounce-input\");"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAYA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAIA;AACA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAPA;AADA;AAXA;AAyBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAzBA;AAiCA;;;;AArEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AACA;AAqEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAUA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AADA;AARA;AAeA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AAPA;AAUA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AAPA;AAUA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AARA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AADA;AAHA;AACA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AADA;AAKA;AAPA;AAUA;AACA;;;;AAnIA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AAmIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAHA;AADA;AACA;AAMA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AATA;AADA;AACA;AAYA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AACA;AALA;AAAA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAWA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AADA;AACA;AAoBA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AADA;AADA;AACA;AAQA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AADA;AADA;AACA;AAcA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAvBA;AAyBA;AACA;AACA;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AADA;AACA;AAWA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AArCA;AACA;AAuCA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnpppHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AATA;AAAA;AAAA;AADA;AACA;AAgBA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AALA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAhDA;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5CA;;;;A","sourceRoot":""}