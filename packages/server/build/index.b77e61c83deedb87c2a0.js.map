{"version":3,"file":"index.769366de62efa56b2a6e.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Formik, Field, Form } from 'formik';\nimport { Table } from '../../../common/components/web';\n\n// import FormCreator from '../FormCreator';\n// import Text from '../FormCreator/FormTypes/Text';\n// import DealerForm from './Form';\n//\n// const LocationForm = new FormCreator({\n//   field: [<Text />]\n// });\nconst SelectLocationString = 'Please select a location';\n// const AddDealer = props => {\n//   return (\n//     <Formik\n//       enableReinitialize={true}\n//       initialValues={{ name: '' }}\n//       validateOnBlur={true}\n//       // validate={validateAll}\n//       validateOnChange={false}\n//       onSubmit={async ({ name, ...values }, actions) => {\n//         console.log('Values::', values);\n//         console.log('ACTIONS::', actions);\n//         const dealer = await props.updateDealer({\n//           name,\n//           handle: name\n//             .split(' ')\n//             .join('-')\n//             .toLowerCase(),\n//           ...values\n//         });\n//         // props.handleInitialLocation(dealer.name);\n//         // console.log('DEALER:::', dealer);\n//\n//         // try {\n//         //   switch (selectedCategory) {\n//         //     case 'products':\n//         //       await uploadSeoContent({ handle: selectedProduct, ...values });\n//         //\n//         //       break;\n//         //     case 'brands':\n//         //       await uploadSeo({ path: 'vendor', handle: selectedBrand, seo: { ...values } });\n//         //       break;\n//         //     case 'collections':\n//         //       await uploadSeo({ path: 'collection', handle: selectedCollection, seo: { ...values } });\n//         //       break;\n//         //     default:\n//         //       return;\n//         //   }\n//         // } catch (e) {\n//         //   console.log('ERROR:', e);\n//         // }\n//         // MyImaginaryRestApiCall(user.id, values).then(\n//         // updatedUser => {\n//         actions.setSubmitting(false);\n//         // updateUser(updatedUser);\n//         // onClose();\n//         // },\n//         // error => {\n//         // actions.setSubmitting(false);\n//         // actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n//         // actions.setStatus({ msg: 'Set some arbitrary status or data' });\n//         // }\n//         // );\n//       }}\n//       render={({ errors, status, touched, isSubmitting, isValid }) => {\n//         return (\n//           <Form className=\"admin__form__seo\">\n//             <div className=\"admin__form__seo--field\">\n//               <label htmlFor=\"Location\"> Please add your first location</label>\n//               <Field className=\"admin__form__seo--input\" type=\"text\" name=\"name\" placeholder=\"Name\" />\n//               {errors.title && touched.title && <div className=\"admin__form__seo--error\">{errors.name}</div>}\n//             </div>\n//             {status && status.msg && <div className=\"admin__form__seo--status\">{status.msg}</div>}\n//\n//             <button type=\"submit\" disabled={isSubmitting}>\n//               Submit\n//             </button>\n//           </Form>\n//         );\n//       }}\n//     />\n//   );\n// };\nconst columns = [\n  {\n    title: (\n      <a href=\"#\">\n        {/* {t('users.column.name')} {this.renderOrderByArrow('username')} */}\n        Name\n      </a>\n    ),\n    dataIndex: 'node',\n    key: 'name',\n    // eslint-disable-next-line\n    render: (text, record) => (\n      <div>\n        <Link to={{ pathname: `/admin/locations/${record.node.handle}` }}>{text}</Link>\n      </div>\n    )\n  }\n];\nexport default class LocationsView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLocation: SelectLocationString\n    };\n  }\n  componentDidMount() {\n    console.log('MOUNTING PROPS::', this.props);\n    // this.setState({ selectedLocation: dealers.edges[0].node.name });\n  }\n  componentDidUpdate(prevProps) {\n    // if (this.props.dealers) {\n    //   console.l/og('WE HAVE DEALERS');\n    // }\n    if (prevProps.loadingDealers !== this.props.loadingDealers) {\n      const { dealers } = this.props;\n      // console.log('COMPONENT DID UPDATE::', dealers.edges[0].node);\n      this.setState({ selectedLocation: dealers.edges[0].node.name });\n    }\n    return;\n  }\n  handleSelectedLocation = e => {\n    return this.setState({ selectedLocation: e.target.value });\n  };\n  handleInitialLocation = location => {\n    // console.log('LOCATION::', location);\n    this.setState({ selectedLocation: location });\n  };\n  render() {\n    // const { selectedLocation } = this.state;\n    const { loadingDealers, dealers } = this.props;\n    if (loadingDealers) {\n      return <div>Loading</div>;\n    }\n    /*\n    {dealers.edges.length == 0 ? (\n      <AddDealer {...this.state} {...this.props} />\n    ) : (\n      <DealerForm {...this.state} {...this.props} />\n    )}\n\n    */\n    // console.log('THE RENDER PROPS:::', dealers.edges.length);\n    return (\n      <div className={'admin__page__view'}>\n        <Table dataSource={dealers.edges} columns={columns} />\n      </div>\n    );\n  }\n}\n\nLocationsView.propTypes = {\n  children: PropTypes.node,\n  updateDealer: PropTypes.func,\n  dealers: PropTypes.object,\n  loadingDealers: PropTypes.bool\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAVA;AACA;AAgBA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAsBA;AACA;AACA;AAxBA;AAyBA;AACA;AACA;AACA;AA1BA;AACA;AADA;AAFA;AAKA;AACA;;;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;;;AAQA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;;AAjDA;AACA;AADA;AACA;AACA;AAkDA;AACA;AACA;AACA;AACA;AAJA;;;;A","sourceRoot":""}