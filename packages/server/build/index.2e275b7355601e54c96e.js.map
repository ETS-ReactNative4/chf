{"version":3,"file":"index.525e7fc78d6d021cff81.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/profile/components/ManageSpecs.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\n// import classnames from 'classnames';\nimport { MdClose, MdSave } from 'react-icons/md';\n// import {  } from '../../common/components/global';\n// import settings from '../../../../../../settings';\nimport '../styles/manage-specs.scss';\n// import { ADMIN_PRODUCTS_QUERY, CURRENT_USER_QUERY, DELETE_TOKEN, LOGOUT_ADMIN } from '../../common/schema';\n\nimport PRODUCT_DATA_QUERY from '../../common/graphql/ProductDataQuery.graphql';\nimport ADD_PRODUCT_DATA from '../../common/graphql/AddProductData.graphql';\nimport UPDATE_PRODUCT_DATA from '../../common/graphql/UpdateProductData.graphql';\nimport { ADMIN_PRODUCTS_QUERY, MODIFY_PRODUCT_DATA } from '../../common/schema';\nimport { prodFeatures, prodSpecs } from '../../products/components/SingleProductView';\n\nconst selectProdString = 'Select a product';\nconst selectSpecString = 'Select a specification';\nconst fullSpecs = [...prodSpecs, ...prodFeatures];\nconst clearedSubmissionResult = { submissionError: null, submissionSuccess: null };\n\nclass ManageSpecs extends React.Component {\n  state = {\n    currentEdit: {},\n    selectedProduct: selectProdString,\n    selectedSpec: selectSpecString,\n    specInput: '',\n    submissionError: null,\n    submissionSuccess: null\n  };\n  componentDidMount() {\n    if (this.props.productData) {\n      console.log('PRODUCT DATA::', this.props.productData);\n      this.setState({ selectedProduct: this.props.productData.product_name });\n    }\n    // console.log('The props::', this.props);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.productData !== prevProps.productData) {\n      console.log('DID UPDATE THE PROPS::', this.props);\n      return this.setState({ selectedProduct: this.props.productData.product_name });\n    }\n    if (prevState.selectedProduct !== this.state.selectedProduct) {\n      // return this.props.refetchProductData({ handle: this.state.selectedProduct });\n    }\n  }\n\n  handleProductSelect = e =>\n    this.setState({\n      selectedProduct: e.target.value,\n      selectedSpec: selectSpecString,\n      currentEdit: {},\n      ...clearedSubmissionResult\n    });\n\n  handleSpecSelect = e =>\n    this.setState({\n      selectedSpec: e.target.value,\n      ...clearedSubmissionResult\n    });\n\n  handleSpecInput = e => {\n    const { currentEdit: prevEdit } = this.state;\n    const {\n      target: { name, value }\n    } = e;\n    this.setState({ currentEdit: { ...prevEdit, [name]: value } });\n  };\n\n  submitSpecs = async e => {\n    e.preventDefault();\n\n    const {\n      productData,\n      addProductData,\n      updateProductData,\n      sfy_shop: { products }\n    } = this.props;\n    const { currentEdit, selectedProduct } = this.state;\n\n    const currentSpecs = productData === null ? {} : productData;\n    const { __typename, id, ...specsToSubmit } = Object.assign(currentSpecs, currentEdit, {\n      handle: selectedProduct\n    });\n\n    let dataUpdateResult;\n    if (productData === null) {\n      // If adding a new product data to rcomm db, add sku and product name from Shopify\n      const [sfyData] = products.edges.filter(({ node }) => node.handle === selectedProduct);\n      const {\n        title,\n        vendor,\n        variants: { edges: variantEdges }\n      } = sfyData.node;\n      const { sku: _sku } = variantEdges[0].node;\n      const updatedSubmission = { ...specsToSubmit, product_name: `${vendor} ${title}`, sku: _sku };\n      dataUpdateResult = await addProductData(updatedSubmission);\n    } else {\n      dataUpdateResult = await updateProductData(specsToSubmit);\n    }\n\n    if (!dataUpdateResult) return;\n\n    if ('errors' in dataUpdateResult) {\n      return this.setState({ submissionError: dataUpdateResult.errors[0] });\n    }\n\n    if ('productData' in dataUpdateResult && dataUpdateResult.productData) {\n      const { product_name, handle } = dataUpdateResult.productData;\n      this.props.refetchProductData({ handle });\n      return this.setState({\n        submissionSuccess: `Successfully updated ${product_name}!`,\n        currentEdit: {},\n        selectedSpec: selectSpecString\n      });\n    }\n  };\n\n  renderInputValue = () => {\n    const { selectedSpec, currentEdit } = this.state;\n    const { productData } = this.props;\n    if (selectedSpec in currentEdit) return currentEdit[selectedSpec];\n    else if (productData && selectedSpec in productData) return productData[selectedSpec];\n    else return '';\n  };\n\n  handleCancelEdit = () => {\n    const { currentEdit, selectedSpec } = this.state;\n    if (selectedSpec in currentEdit) {\n      const { [selectedSpec]: removed, ...rest } = currentEdit;\n      this.setState({ currentEdit: rest });\n    }\n    return;\n  };\n\n  isDisabled = () => {\n    const { loadingProductData, productData } = this.props;\n    if (!loadingProductData && !productData) return false;\n    if (Object.keys(this.state.currentEdit).length > 0) return false;\n    return true;\n  };\n\n  render() {\n    const { renderInputValue, handleCancelEdit, isDisabled } = this;\n    const { selectedProduct, selectedSpec } = this.state;\n    const { productsLoading, sfy_shop } = this.props;\n    console.log('PRODUCT::', selectedProduct);\n    let products = null;\n    if (!productsLoading && sfy_shop && 'products' in sfy_shop) {\n      if (sfy_shop.products.edges.length > 0) {\n        products = sfy_shop.products.edges;\n      }\n    }\n\n    return (\n      <section className=\"manage-specs\">\n        <div className=\"form__select-group\">\n          <label htmlFor=\"product-select\">Please select a product to change product specifications</label>\n          <select id=\"product-select\" onChange={this.handleProductSelect} value={selectedProduct}>\n            <option value={selectProdString} disabled>\n              {selectProdString}\n            </option>\n            {products\n              ? products.map(({ node }) => (\n                  <option key={node.handle} value={node.handle}>\n                    {`${node.vendor}: ${node.title}`}\n                  </option>\n                ))\n              : null}\n          </select>\n        </div>\n        {selectedProduct !== selectProdString ? (\n          <form onSubmit={this.submitSpecs} className=\"form manage-specs-form\">\n            <div className=\"form__select-group form__select-group--third\">\n              <select\n                id=\"spec-select\"\n                className=\"manage-specs-form__input\"\n                onChange={this.handleSpecSelect}\n                value={selectedSpec}\n              >\n                <option value={selectSpecString} disabled>\n                  Select a specification\n                </option>\n                {fullSpecs.map(([key, value], i) => (\n                  <option key={i} value={key}>\n                    {value}\n                  </option>\n                ))}\n              </select>\n            </div>\n            {selectedSpec !== selectSpecString ? (\n              <div className=\"form__item form__item--two-thirds\">\n                <input\n                  onChange={this.handleSpecInput}\n                  type=\"text\"\n                  name={this.state.selectedSpec}\n                  value={renderInputValue()}\n                />\n              </div>\n            ) : null}\n            <div className=\"manage-specs-form__button-group\">\n              {this.state.currentEdit.hasOwnProperty(this.state.selectedSpec) ? (\n                <button type=\"button\" onClick={() => handleCancelEdit()}>\n                  <MdClose className=\"manage-specs-form__icon\" />\n                  <span>Cancel Edit</span>\n                </button>\n              ) : null}\n              <button disabled={isDisabled()} type=\"submit\">\n                <MdSave className=\"manage-specs-form__icon\" />\n                <span>Submit Updated Specs</span>\n              </button>\n            </div>\n          </form>\n        ) : null}\n        {['submissionSuccess', 'submissionError'].map(property => {\n          if (property in this.state) return <div key={property}>{this.state[property]}</div>;\n          return null;\n        })}\n      </section>\n    );\n  }\n}\nconst QUERY = gql`\n  query productData($handle: String!) {\n    productData(handle: $handle) {\n      id\n      sku\n      product_name\n      handle\n      shock_absorption\n      console\n      user_ids\n      workouts\n      hrt_monitoring\n      stride_technology\n      power\n      design\n      drive_system\n      handlebars\n      seat\n      pedals\n      frame\n      finish\n      motion\n      exercises\n      weight_stack\n      included_accessories\n      optional_weight_stack\n      running_area\n      motor\n      speed\n      incline\n      resistance_levels\n      resistance_system\n      stride\n      max_user_weight\n      ramp\n      stored_vertical_height\n      seat_floor_distance\n      warranty\n    }\n  }\n`;\nconst ManageSpecsWithApollo = compose(\n  // ADMIN_PRODUCTS_QUERY(),\n  graphql(QUERY, {\n    options: props => {\n      console.log('PROPS. MATCH ', props.match.params);\n      return { variables: { handle: props.match.params.product }, fetchPolicy: 'network-only' };\n    },\n    props: ({ data }) => {\n      const { loading: loadingProductData, error, productData, refetch: refetchProductData } = data;\n      if (error) throw new Error(`Error in Related Prodcuts Query: ${error}`);\n      console.log('ANYTHING:::', productData);\n      return { loadingProductData, productData, refetchProductData };\n    }\n  }),\n  MODIFY_PRODUCT_DATA(ADD_PRODUCT_DATA, 'addProductData'),\n  MODIFY_PRODUCT_DATA(UPDATE_PRODUCT_DATA, 'updateProductData')\n)(ManageSpecs);\n\nManageSpecs.propTypes = {\n  productsLoading: PropTypes.bool,\n  products: PropTypes.array,\n  productSpecs: PropTypes.array,\n  refetchProductData: PropTypes.func,\n  sfy_shop: PropTypes.object,\n  productData: PropTypes.object,\n  loadingProductData: PropTypes.bool\n};\n\nexport default ManageSpecsWithApollo;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAyBA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AAEA;AADA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAWA;AAXA;AAaA;AADA;AAIA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AAiBA;AAlBA;AAmBA;AAAA;AAAA;AAnBA;AAyBA;AACA;AA1BA;AAAA;AACA;AADA;AA2BA;AA3BA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AA6BA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAuCA;AAxCA;AA0CA;AACA;AACA;AAHA;AACA;AA1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAgDA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AA9GA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAiGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AADA;AADA;AALA;AAFA;AAeA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AADA;AATA;AADA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAPA;AA5BA;AA0CA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA9DA;AAiEA;;;;AAvMA;AACA;AAwMA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;;;;A","sourceRoot":""}