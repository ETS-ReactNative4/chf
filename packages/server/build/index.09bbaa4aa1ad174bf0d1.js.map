{"version":3,"file":"index.87ee19b3ec8a167d7f88.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/profile/components/ManageAdmins.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'react-apollo';\n// import Helmet from 'react-helmet';\n// import classnames from 'classnames';\nimport { MdAdd, MdClose } from 'react-icons/md';\n// import {  } from '../../common/components/global';\n// import settings from '../../../../../../settings';\nimport '../styles/manage-admins.scss';\nimport SINGLE_CUSTOMER_QUERY from '../../common/graphql/SFY/sfySingleCustomerQuery.graphql';\nimport { ADD_ADMIN, USERS_QUERY, DELETE_USER } from '../../common/schema';\n\nconst unconfirmedMsg = `We could not find a Shopify account associated with the submitted email.\nPlease have the proposed admin register a Shopify account with the submitted email, and try again.`;\n\nclass ManageAdmins extends React.Component {\n  state = {\n    newAdminEmail: '',\n    error: null,\n    success: null\n  };\n  handleInput = e => this.setState({ [e.target.name]: e.target.value });\n  checkEmailExists = email => {\n    return this.props.client\n      .query({\n        query: SINGLE_CUSTOMER_QUERY,\n        variables: { query: `email:${email}` }\n      })\n      .then(res => {\n        const { edges } = res.data.admin_customers;\n        if (edges.length > 0 && edges[0].node.email) {\n          return { status: 'confirmed', message: 'Shopify account confirmed' };\n        } else {\n          return { status: 'unconfirmed', message: unconfirmedMsg };\n        }\n      })\n      .catch(e => {\n        console.log('Error confirming shopify email: ', e);\n        return { errors: 'There was a Shopify server error. Please try again later.' };\n      });\n  };\n\n  addAdmin = async e => {\n    e.preventDefault();\n    this.setState({ error: null, success: null });\n    const { newAdminEmail } = this.state;\n\n    // Check if proposed admin email is registered with Shopify\n    const emailCheck = await this.checkEmailExists(newAdminEmail);\n\n    if (!emailCheck) {\n      return this.setState({ error: 'There was an error veryfing email.' });\n    }\n\n    if ('errors' in emailCheck) {\n      return this.setState({ error: emailCheck.errors });\n    }\n\n    if ('status' in emailCheck) {\n      // If proposed admin has registered with Shopify then add to our db\n      if (emailCheck.status === 'confirmed') {\n        const addAdminRes = await this.props.addAdmin({ email: newAdminEmail });\n\n        if (!addAdminRes) {\n          return this.setState({ error: 'There was an error adding admin.' });\n        } else if ('errors' in addAdminRes) {\n          return this.setState({ error: addAdminRes.errors[0] });\n        } else if ('user' in addAdminRes) {\n          const { email } = addAdminRes.user;\n          return this.setState({\n            success: `Successfully added ${email} as an admin.`,\n            newAdminEmail: ''\n          });\n        } else {\n          return this.setState({ error: 'There was an error adding admin.' });\n        }\n\n        // Alert user if proposed admin has not registered email with Shopify\n      } else if (emailCheck.status === 'unconfirmed') {\n        return this.setState({ error: emailCheck.message });\n      }\n    }\n  };\n\n  removeAdmin = async id => {\n    this.setState({ error: null, success: null });\n    const removeAdminResult = await this.props.deleteUser(id);\n    if (removeAdminResult && 'errors' in removeAdminResult) {\n      return this.setState({ error: removeAdminResult.errors[0] });\n    } else if (removeAdminResult && 'user' in removeAdminResult) {\n      return this.setState({ success: 'Successfully deleted admin.' });\n    } else {\n      return this.setState({ error: 'There was an error deleting admin.' });\n    }\n  };\n\n  render() {\n    const { newAdminEmail, error } = this.state;\n    const { users } = this.props;\n\n    return (\n      <section className=\"manage-admins\">\n        {/* New Admin form */}\n        <form className=\"manage-admins__form\" onSubmit={this.addAdmin}>\n          <label>Email to make an Administrator:</label>\n          <input id=\"new-admin\" type=\"email\" name=\"newAdminEmail\" value={newAdminEmail} onChange={this.handleInput} />\n          <button type=\"submit\">\n            <MdAdd />\n            <span>Add</span>\n          </button>\n        </form>\n        {error !== null ? <div className=\"manage-admins__error\">{error.message}</div> : null}\n        {/* Display current admins */}\n        {users && users.length > 0 ? (\n          <ul>\n            {users.map(u => (\n              <li key={u.id}>\n                <span>{u.email}</span>\n                <button onClick={() => this.removeAdmin(u.id)}>\n                  <span hidden>Remove</span>\n                  <MdClose />\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div>No Administrators exist, please consult M.O.D.</div>\n        )}\n        {['success', 'error'].map(\n          item =>\n            this.state[item] ? <div style={{ marginTop: '15px', color: '#fc7b18' }}>{this.state[item]}</div> : null\n        )}\n      </section>\n    );\n  }\n}\n\nconst ManageAdminsWithApollo = compose(\n  ADD_ADMIN(),\n  DELETE_USER(),\n  USERS_QUERY()\n)(ManageAdmins);\n\nManageAdmins.propTypes = {\n  admins: PropTypes.array,\n  client: PropTypes.object,\n  addAdmin: PropTypes.func,\n  users: PropTypes.array,\n  deleteUser: PropTypes.func\n};\n\nexport default ManageAdminsWithApollo;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AACA;AADA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAmBA;AACA;AApBA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA;AA1BA;AA4BA;AACA;AAFA;AACA;AA5BA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAWA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAHA;AAQA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAFA;AADA;AADA;AAYA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AA5BA;AAiCA;;;;AAvHA;AACA;AAyHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;;;;A","sourceRoot":""}