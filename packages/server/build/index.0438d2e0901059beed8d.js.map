{"version":3,"file":"index.a5ac5511bac118cc58a8.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/CarouselImages/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, compose } from 'react-apollo';\nimport axios from 'axios';\nimport { forEach, values, pick } from 'ramda';\n\nimport PAGE_QUERY from '../../graphql/PageQuery.graphql';\n\n// import ImageUploader from './ImageUploader';\nimport ImagePreview from './ImagePreview';\nimport AWSImageAdapter from './ImageAdapter';\n\nimport '../../styles/carousel.scss';\n\nconst uploadToS3 = () => {\n  return;\n};\nclass Carousel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      percentCompleted: 0,\n      carouselStatus: false,\n      page_content: {\n        page_id: null,\n        content: [\n          {\n            section_name: 'hero',\n            field_name: 'Carousel',\n            field_label: 'carousel',\n            field_type: 'Carousel',\n            field_value: null\n          }\n        ]\n      },\n      images: new Map()\n    };\n  }\n  componentDidMount() {\n    // console.log('CAROUSEL PROPS DID MOUNT', this.props.loadingPage);\n    if (!this.props.loadingPage) {\n      const { pages } = this.props;\n      const page = pages[0];\n      const { fields } = this.props.page;\n      const rootFields = fields[0];\n      const { content } = this.state.page_content;\n      const fieldsToUpdate = content[0];\n      const transformImages = new Map([...JSON.parse(rootFields.field_value).images]);\n\n      const updatedFields = Object.assign({}, fieldsToUpdate, {\n        field_value: Object.assign({}, JSON.parse(rootFields.field_value), { images: transformImages })\n      });\n      this.setState({\n        loaded: true,\n        images: transformImages,\n        page_content: Object.assign({}, this.state.page_content, {\n          page_id: parseInt(page.id),\n          content: [updatedFields]\n        })\n      });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const { loadingPages, loadingPage, page, pages } = this.props;\n    const { page_content, loaded } = this.state;\n    if (prevProps.loadingPages !== loadingPages || !loadingPages) {\n      console.log('PREV LOADING PAGE', prevProps.page, 'PROPS PAGE', page);\n      if (prevProps.page !== page && !prevState.loaded) {\n        console.log('PAGE IS DIFF', loaded, prevState.loaded);\n        return this.initializeView();\n      } else if (!prevState.loaded && page) {\n        return this.initializeView();\n      }\n      return;\n    }\n  }\n  initializeView = () => {\n    const { page_content } = this.state;\n\n    const { pages } = this.props;\n    const page = pages[0];\n    if (this.props.page) {\n      const { fields } = this.props.page;\n      const rootFields = fields[0];\n      const { content } = page_content;\n      const fieldsToUpdate = content[0];\n      const transformImages = new Map([...JSON.parse(rootFields.field_value).images]);\n\n      const updatedFields = Object.assign({}, fieldsToUpdate, {\n        field_value: Object.assign({}, JSON.parse(rootFields.field_value), { images: transformImages })\n      });\n      this.setState({\n        loaded: true,\n        images: transformImages,\n        page_content: Object.assign({}, page_content, { page_id: parseInt(page.id), content: [updatedFields] })\n      });\n    }\n    const { percentCompleted } = this.state;\n    // if (percentCompleted > 0) {\n    //   this.updateProgress(percentCompleted);\n    // }\n    if (percentCompleted == 0 || percentCompleted == 100) {\n      const elem = document.getElementById('upload-bar');\n      elem.style.visibility = 'hidden';\n      return;\n    }\n  };\n  imageToState = images => {\n    this.setState({\n      images\n    });\n  };\n  updateProgress = percent => {\n    const elem = document.getElementById('upload-bar');\n    elem.style.visibility = 'visible';\n    elem.style.width = percent + '%';\n    elem.innerHTML = percent * 1 + '%';\n  };\n  handleDragStart = e => {\n    e.dataTransfer.setData('text', e.currentTarget.id);\n    e.dataTransfer.dropEffect = 'move';\n    this.setState({ mouseY: e.clientY });\n  };\n\n  handleDragEnter = e => {\n    e.preventDefault();\n    let target = e.target;\n    if (target.parentElement.className === 'drag-drop-item') target = e.target.parentNode;\n    target.style.borderTop = '1px solid red';\n  };\n\n  handleDragOver = e => e.preventDefault();\n\n  handleDrop = e => {\n    // NOTE used currentTarget as it seemed to pick up the div much easier\n    // also used clientY prop from event object to determine if we are draggin item upward\n\n    e.preventDefault();\n    const dataToDrop = e.dataTransfer.getData('text');\n    const dataEl = document.getElementById(dataToDrop);\n    let target = e.currentTarget;\n    target.style.borderTop = 'none';\n    e.target.style.borderTop = 'none';\n    // NOTE: we are pulling from the top item in list no element above\n    if (!dataEl.previousElementSibling) {\n      return target.insertAdjacentElement('afterend', dataEl);\n    }\n    if (dataEl.previousElementSibling && target.nextElementSibling) {\n      const oldY = this.state.mouseY;\n      const newY = e.clientY;\n      if (oldY > newY) {\n        return target.insertAdjacentElement('beforebegin', dataEl);\n      }\n      return target.insertAdjacentElement('afterend', dataEl);\n    }\n\n    // NOTE we are trying to drop in the last position so we should insert above the target\n    if (!target.nextElementSibling) {\n      return target.insertAdjacentElement('afterend', dataEl);\n    }\n  };\n  handleDragEnd = e => {\n    const imageNodeList = e.target.parentNode.children;\n    const imagesArray = Array.prototype.slice.call(imageNodeList);\n    const imageMap = new Map();\n    imagesArray.map(node => {\n      imageMap.set(node.id, this.state.images.get(node.id));\n    });\n    // needed? NOTE YES THIS IS NEEDED TO THE IMAGE ADAPTER CAN UPDATE ITS INTERNAL\n    // TRACK OF WHAT THE IMAGE ORDER\n    this.handleReorder(imageMap);\n  };\n  handleDragLeave = e => {\n    e.target.style.borderTop = 'none';\n    e.target.parentNode.borderTop = 'none';\n  };\n  handleReorder = reOrderedImages => {\n    this.setState({ images: reOrderedImages });\n  };\n  removeImage = key => {\n    const currentImages = new Map([...this.state.images]);\n    currentImages.delete(key);\n    this.setState({ images: currentImages });\n  };\n  uploadToS3 = async (signedRequest, file) => {\n    const options = {\n      headers: {\n        'Content-Type': `\"${file.type}\"`\n      },\n      onUploadProgress: function(progressEvent) {\n        let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n        this.setState({ percentCompleted });\n      }.bind(this)\n    };\n    await axios.put(signedRequest, file, options);\n  };\n  adaptFileEventToValue = delegate => async e => {\n    const {\n      target: { files }\n    } = e;\n    const { signS3 } = this.props;\n    const image_data = new Map();\n    const getFileNameAndType = file => pick(['name', 'type'], file);\n    const response = async (signS3, { name, type }) => await signS3(name, type);\n\n    if (files.length !== 0 && typeof files !== 'undefined') {\n      let updatedImageData;\n      // TODO THIS FOREACH BIZ SUCKS WE ARE HAVING TO SET STATE WAY TO MUCH IN THIS LOOP\n      // BUT PLACING SETSTATE AFTER FOREACH FIRES BEFORE UPDATED IMAGEMAP IS CREATED\n      forEach(async file => {\n        // NOTE JUST need to update the state and then map the urls down on the preview component\n        const { name } = getFileNameAndType(file);\n        const res = await response(signS3, getFileNameAndType(file));\n        const { signedRequest, url } = res.data.signS3;\n        await this.uploadToS3(signedRequest, file);\n        const currentImageSize = this.state.images.size;\n        const fileIndex = currentImageSize === 0 ? 0 : currentImageSize;\n        // indexOf(file, values(files));\n        image_data.set(`image_url-${fileIndex}`, { name: name, url });\n        updatedImageData = new Map([...this.state.images, ...image_data]);\n        this.setState({ images: updatedImageData });\n        delegate(url);\n      }, values(files));\n    }\n  };\n  handleChecked = () => {\n    this.setState({ carouselStatus: !this.state.carouselStatus });\n  };\n  saveCarouselContent = async () => {\n    const { page_content } = this.state;\n    const [content] = page_content.content;\n\n    const field_value = Object.assign({}, { images: this.state.images, carouselActive: this.state.carouselStatus });\n    const updatedContent = Object.assign({}, content, { field_value: JSON.stringify(field_value) });\n\n    const pageData = Object.assign({}, page_content, { content: [updatedContent] });\n    try {\n      const [data] = await this.props.uploadContent(pageData);\n      console.log('DATA:::', data);\n      const { images, carouselActive } = JSON.parse(data.field_value);\n      console.log('IAMGES:::', images);\n      this.setState({ images: new Map([...images]), carouselStatus: carouselActive, saveSuccess: true });\n    } catch (e) {\n      console.log('ERRROR UPLOADING', e);\n    }\n  };\n  render() {\n    // console.log('CAROUSEL State::', this.state);\n    // console.log('CAROUSEL PROPS:', this.props);\n    const { loadingPage } = this.props;\n    if (loadingPage) {\n      return (\n        <div className={'admin'}>\n          <div className=\"admin__btn\">\n            <button type=\"button\" className=\"admin__btn--upload\">\n              Upload\n              <input style={{ opacity: 0 }} onChange={this.adaptFileEventToValue(uploadToS3)} type={'file'} multiple />\n            </button>\n            <button className={'admin__btn--save'} onClick={this.saveCarouselContent}>\n              Save\n            </button>\n          </div>\n          <div className={'admin__carousel__toggle'}>\n            <span>Carousel On/Off</span>\n            <label className=\"admin__carousel__switch\">\n              <input type=\"checkbox\" checked={this.state.carouselStatus} onChange={this.handleChecked} />\n              <span className=\"admin__carousel__slider admin__carousel__slider--round\" />\n            </label>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className={'admin'}>\n        <div className=\"admin__btn\">\n          <button type=\"button\" className=\"admin__btn--upload\">\n            Upload\n            <input style={{ opacity: 0 }} onChange={this.adaptFileEventToValue(uploadToS3)} type={'file'} multiple />\n          </button>\n          <button className={'admin__btn--save'} onClick={this.saveCarouselContent}>\n            Save\n          </button>\n        </div>\n        <div className={'admin__carousel__toggle'}>\n          <span>Carousel On/Off</span>\n          <label className=\"admin__carousel__switch\">\n            <input type=\"checkbox\" checked={this.state.carouselStatus} onChange={this.handleChecked} />\n            <span className=\"admin__carousel__slider admin__carousel__slider--round\" />\n          </label>\n        </div>\n        {/* <ImageUploader imageToState={this.imageToState} {...this.props} /> */}\n        <ImagePreview\n          images={this.state.images}\n          removeImage={this.removeImage}\n          handleDragStart={this.handleDragStart}\n          handleDragEnter={this.handleDragEnter}\n          handleDrop={this.handleDrop}\n          handleDragOver={this.handleDragOver}\n          handleDragLeave={this.handleDragLeave}\n          handleDragEnd={this.handleDragEnd}\n          handleReorder={this.handleReorder}\n        />\n        <div id=\"upload-bar\" className=\"upload-progress\">\n          <div className=\"upload-bar\">0%</div>\n        </div>\n      </div>\n    );\n  }\n}\nCarousel.propTypes = {\n  loadingPages: PropTypes.bool,\n  loadingPage: PropTypes.bool,\n  fields: PropTypes.array,\n  pages: PropTypes.array,\n  uploadContent: PropTypes.func\n};\nconst CarouselWithApollo = compose(\n  graphql(PAGE_QUERY, {\n    options: () => {\n      return { variables: { pageTitle: 'Home', fieldNames: [['hero', 'images'], ['hero', 'carouselActive']] } };\n    },\n    props: ({ data }) => {\n      // console.log('WHY IS THIS NOT RUNNING::', data);\n      const { page, loading: loadingPage, error } = data;\n      if (loadingPage && !error) {\n        return { loadingPage, page: null };\n      } else {\n        return { page, loadingPage };\n      }\n    }\n  })\n)(Carousel);\nexport default AWSImageAdapter(CarouselWithApollo);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AA2DA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AApBA;AAsBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA1FA;AA2FA;AACA;AADA;AAGA;AACA;AA/FA;AAgGA;AACA;AACA;AACA;AACA;AACA;AArGA;AAsGA;AACA;AACA;AACA;AACA;AA1GA;AA4GA;AACA;AACA;AACA;AACA;AACA;AAjHA;AAkHA;AAAA;AACA;AAnHA;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhJA;AAiJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3JA;AA4JA;AACA;AACA;AACA;AA/JA;AAgKA;AACA;AACA;AAlKA;AAmKA;AACA;AACA;AACA;AACA;AAvKA;AAAA;AAuKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAPA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAxKA;AAAA;AAAA;AAAA;AACA;AADA;AAmLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAPA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAcA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AApLA;AAiNA;AACA;AACA;AAnNA;AAmNA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAEA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AAAA;AAVA;AACA;AAWA;AACA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAcA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlNA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAYA;AAhBA;AAFA;AAoBA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA2KA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAFA;AAVA;AAmBA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AA7BA;AAkCA;;;;AAnSA;AACA;AAoSA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;;;;A","sourceRoot":""}