{"version":3,"file":"index.4e2d53fba44fecffdc94.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/carousel.scss","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/forms.scss","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/main-layout.scss","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/navbar.scss","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/AdminLayout.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/AdminView.web.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/CarouselImages/ImageAdapter.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/CarouselImages/ImagePreview.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/CarouselImages/index.js","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/Form.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/LocationsView.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/index.js","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Menu.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Nav.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Seo/SeoForm.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Seo/index.js","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/containers/Dashboard.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/CollectionSeoQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/CollectionsQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/DealerQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/Dealers.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/Frags/DealerFrag.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/PageQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/PagesQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/ProductSeoQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/S3Upload.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/SimplePageQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/UpdateDealer.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/UploadContent.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/UploadSeo.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/UploadSeoContent.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/VendorSeoQuery.graphql","webpack:///../client/src/modules/admin/styles/carousel.scss?4de6","webpack:///../client/src/modules/admin/styles/forms.scss?7032","webpack:///../client/src/modules/admin/styles/main-layout.scss?f7c8","webpack:///../client/src/modules/admin/styles/navbar.scss?342b","external \"axios\"","external \"ramda\""],"sourcesContent":["exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".admin{-ms-flex-direction:column;flex-direction:column}.admin,.admin__carousel,.admin__carousel__toggle{display:-ms-flexbox;display:flex}.admin__carousel__toggle{-ms-flex-pack:end;justify-content:flex-end;-ms-flex-align:center;align-items:center;margin-bottom:30px}.admin__carousel__toggle span:first-child{margin-right:1em}.admin__carousel__switch{position:relative;display:inline-block;width:60px;height:34px}.admin__carousel__switch input{opacity:0;width:0;height:0}.admin__carousel__switch input:checked+.admin__carousel__slider{background-color:#177e89}.admin__carousel__switch input:checked+.admin__carousel__slider:before{-webkit-transform:translateX(26px);transform:translateX(26px)}.admin__carousel__switch input:focus{box-shadow:0 0 1px #2196f3}.admin__carousel__slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;transition:.4s}.admin__carousel__slider:before{position:absolute;content:\\\"\\\";height:26px;width:26px;left:4px;bottom:4px;background-color:#fff;transition:.4s}.admin__carousel__slider--round{border-radius:34px}.admin__carousel__slider--round:before{border-radius:50%}.admin__btn{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:30px}.admin__btn--container{width:16%;position:relative}.admin__btn--upload{background-color:#1a2774;color:#fff;width:calc(15vw - 1em);position:relative;border-radius:10em;height:40px}.admin__btn--upload input{position:absolute;left:0}.admin__btn--save{background-color:#177e89;color:#fff;width:calc(10vw - 1em);height:40px;border-radius:10em}.admin__btn--remove{position:absolute;top:0;right:0;border-radius:30px;padding:0}.admin__images--spacer{position:absolute;top:200px;height:30px;width:100%;background-color:#1d2870}.admin__images--item{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;height:200px;position:relative;margin-bottom:30px}.admin__images--image{width:33%;height:200px}.admin__images--image--info{width:33%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}\", \"\", {\"version\":3,\"sources\":[\"/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/carousel.scss\"],\"names\":[],\"mappings\":\"AAEA,OAEE,0BAAA,qBAAsB,CAGpB,iDAJF,oBAAA,YAAa,CAIX,yBAEI,kBAAA,yBAAyB,sBACzB,mBAAmB,kBACA,CAJtB,0CAOO,gBAAiB,CAClB,yBAIL,kBAAkB,qBACG,WACV,WACC,CAJb,+BAMG,UAAU,QACF,QACC,CARZ,gEAWO,wBAAyB,CAXhC,uEAcS,mCAAmC,0BAER,CAhBpC,qCAoBK,0BAA2B,CAC5B,yBAID,kBAAkB,eACH,MACT,OACC,QACC,SACC,sBACa,cAEP,CATlB,gCAWK,kBAAkB,WACP,YACC,WACD,SACF,WACE,sBACY,cAER,CAChB,gCAEC,kBAAmB,CADpB,uCAGK,iBAAkB,CAErB,YAKP,oBAAA,aAAa,sBACb,8BAA8B,kBACX,CACnB,uBACE,UAAU,iBACQ,CACnB,oBAEC,yBAAyB,WACX,uBACS,kBACL,mBACC,WACP,CANb,0BASK,kBAAkB,MACX,CACR,kBAGD,yBAAyB,WACX,uBACS,YACX,kBACO,CACtB,oBAEC,kBAAkB,MACZ,QACE,mBACW,SACT,CACX,uBAIC,kBAAkB,UACR,YACE,WACD,wBACc,CAC1B,qBAEC,oBAAA,aAAa,sBACb,8BAA8B,aACjB,kBACK,kBACC,CACpB,sBAEC,UAAU,YACG,CACb,4BACE,UAAU,oBACV,aAAa,0BACb,qBAAsB,CACvB\",\"file\":\"carousel.scss\",\"sourcesContent\":[\"@import './utils/index';\\n\\n.admin {\\n  display: flex;\\n  flex-direction: column;\\n  &__carousel {\\n    display: flex;\\n    &__toggle {\\n        display: flex;\\n        justify-content: flex-end;\\n        align-items: center;\\n        margin-bottom: 30px;\\n        span {\\n          &:nth-child(1) {\\n            margin-right: 1em;\\n          }\\n        }\\n    }\\n    &__switch {\\n      position: relative;\\n      display: inline-block;\\n      width: 60px;\\n      height: 34px;\\n      input {\\n        opacity: 0;\\n        width: 0;\\n        height: 0;\\n        &:checked {\\n          + .admin__carousel__slider {\\n            background-color: #177E89;\\n          }\\n          + .admin__carousel__slider:before {\\n              -webkit-transform: translateX(26px);\\n              -ms-transform: translateX(26px);\\n              transform: translateX(26px);\\n          }\\n        }\\n        &:focus {\\n          box-shadow: 0 0 1px #2196F3;\\n        }\\n      }\\n    }\\n    &__slider{\\n        position: absolute;\\n        cursor: pointer;\\n        top: 0;\\n        left: 0;\\n        right: 0;\\n        bottom: 0;\\n        background-color: #ccc;\\n        -webkit-transition: .4s;\\n        transition: .4s;\\n        &:before {\\n          position: absolute;\\n          content: \\\"\\\";\\n          height: 26px;\\n          width: 26px;\\n          left: 4px;\\n          bottom: 4px;\\n          background-color: white;\\n          -webkit-transition: .4s;\\n          transition: .4s;\\n        }\\n        &--round {\\n          border-radius: 34px;\\n          &:before {\\n              border-radius: 50%;\\n\\n          }\\n        }\\n    }\\n  }\\n  &__btn {\\n    display: flex;\\n    justify-content: space-between;\\n    margin-bottom: 30px;\\n    &--container {\\n      width: 16%;\\n      position: relative;\\n    }\\n    &--upload {\\n      background-color: #1a2774;\\n      color: #ffffff;\\n      width: calc(15vw - 1em);\\n      position: relative;\\n      border-radius: 10em;\\n      height: 40px;\\n\\n        input {\\n          position: absolute;\\n          left: 0;\\n        }\\n    }\\n    &--save {\\n        background-color: #177E89;\\n        color: #ffffff;\\n        width: calc(10vw - 1em);\\n        height: 40px;\\n        border-radius: 10em;\\n    }\\n    &--remove {\\n      position: absolute;\\n      top: 0;\\n      right: 0;\\n      border-radius: 30px;\\n      padding: 0;\\n    }\\n  }\\n  &__images {\\n    &--spacer {\\n      position: absolute;\\n      top: 200px;\\n      height: 30px;\\n      width: 100%;\\n      background-color: #1d2870;\\n    }\\n    &--item {\\n      display: flex;\\n      justify-content: space-between;\\n      height: 200px;\\n      position: relative;\\n      margin-bottom: 30px;\\n    }\\n    &--image {\\n      width: 33%;\\n      height: 200px;\\n      &--info {\\n        width: 33%;\\n        display: flex;\\n        flex-direction: column;\\n      }\\n    }\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".admin__form__seo{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;width:67%}.admin__form__seo--field{position:relative;margin-bottom:30px}.admin__form__seo--field textarea{width:100%;height:100px;height:-webkit-fill-available;height:-moz-available;height:stretch;max-height:200px}.admin__form__seo--input{border:solid}.admin__form__seo--error{position:absolute;right:0;color:#db3a34}\", \"\", {\"version\":3,\"sources\":[\"/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/forms.scss\"],\"names\":[],\"mappings\":\"AAII,kBACE,oBAAA,aAAa,0BACb,sBAAsB,SACC,CACvB,yBACE,kBAAkB,kBACC,CAFpB,kCAIG,WAAW,aACE,8BACb,sBAAA,eAAe,gBACE,CAClB,yBAGD,YAAa,CACd,yBAEC,kBAAkB,QACV,aACM,CACf\",\"file\":\"forms.scss\",\"sourcesContent\":[\"@import './utils/index';\\n\\n.admin {\\n  &__form {\\n    &__seo {\\n      display: flex;\\n      flex-direction: column;\\n      width: calc(100% - 33%);\\n      &--field {\\n        position: relative;\\n        margin-bottom: 30px;\\n        textarea {\\n          width: 100%;\\n          height: 100px;\\n          height: stretch;\\n          max-height: 200px;\\n        }\\n      }\\n      &--input {\\n        border: solid;\\n      }\\n      &--error {\\n        position: absolute;\\n        right: 0;\\n        color: #DB3A34;\\n      }\\n    }\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"html{overflow-x:hidden}#root{position:relative;min-height:100vh;-ms-flex-direction:column;flex-direction:column}#root,.admin-layout{display:-ms-flexbox;display:flex}.admin-layout{background-color:#f9f9f9;height:100vh}.admin-layout__content{-ms-flex-direction:column;flex-direction:column;background-color:#f9f9f9;min-height:calc(100vh - 80px)}\", \"\", {\"version\":3,\"sources\":[\"/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/main-layout.scss\"],\"names\":[],\"mappings\":\"AAEA,KACE,iBAAkB,CACnB,MAKC,kBAAkB,iBAED,0BACjB,qBAAsB,CAEvB,oBANC,oBAAA,YAAa,CAQf,cACE,yBACA,YAAa,CASb,uBACE,0BAAA,sBAAsB,yBAEtB,6BAA0C,CAE3C\",\"file\":\"main-layout.scss\",\"sourcesContent\":[\"@import './utils/index';\\n\\nhtml {\\n  overflow-x: hidden;\\n}\\n\\n// sass-lint:disable-block no-ids\\n#root {\\n  display: flex;\\n  position: relative;\\n  // max-width: 100vw;\\n  min-height: 100vh;\\n  flex-direction: column;\\n  // overflow-x: hidden;\\n}\\n\\n.admin-layout {\\n  background-color: $siteBackgroundColor;\\n  height: 100vh;\\n  display: flex;\\n  // &__navbar {\\n  //   background-color: $contentBackgroundColor;\\n  //   @media (min-width: 1109px) {\\n  //     background-color: $headerBackgroundColor;\\n  //     height: $headerHeight;\\n  //   }\\n  // }\\n  &__content {\\n    flex-direction: column;\\n    background-color: $contentBackgroundColor;\\n    min-height: calc(100vh - #{$headerHeight});\\n    // width: calc(100% - 15%);\\n  }\\n  // &__footer {\\n  //   background-color: $footerBackgroundColor;\\n  // }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".admin__navbar{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-wrap:nowrap;flex-wrap:nowrap;position:absolute;left:0;width:calc(20vw - 2em);padding:1em .5em;box-shadow:inset 0 80px 0 0 #fcfcfc;-ms-flex-pack:justify;justify-content:space-between;top:0;transition:box-shadow .35s ease-in-out;z-index:100}@media (max-width:400px){.admin__navbar{padding:1em 0 1em .5em}}@media (max-width:1030px){.admin__navbar{-ms-flex-align:start;align-items:flex-start}}.admin__navbar__header{position:relative;-ms-flex-preferred-size:10%;flex-basis:10%;top:24px;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:auto}.admin__navbar__header img{width:auto;height:calc(80px - 2em)}@media (min-width:500px){.admin__navbar__header{padding:0 1em}}@media (min-width:1109px){.admin__navbar__header{padding:0 2em;-ms-flex-preferred-size:15%;flex-basis:15%;top:auto;-webkit-transform:none;transform:none}.admin__navbar__header img{height:calc(80px - 2em);width:100%}}.admin__navbar__logo-link{display:block}.admin__navbar__content{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-ms-flex-preferred-size:90%;flex-basis:90%;-ms-flex-pack:end;justify-content:flex-end}@media (min-width:1109px){.admin__navbar__content{-ms-flex-pack:justify;justify-content:space-between}}.admin__navbar__hamburger{margin:1em;cursor:pointer;-webkit-transform:rotate(0deg) translateY(-40%);transform:rotate(0deg) translateY(-40%);transition:.5s ease-in-out;width:40px}@media (max-width:400px){.admin__navbar__hamburger{width:30px}}@media (min-width:1109px){.admin__navbar__hamburger{display:none}}.admin__navbar__hamburger-item{display:block;position:absolute;background-color:#1d2870;border-radius:3px;height:3px;left:0;opacity:1;-webkit-transform:rotate(0deg);transform:rotate(0deg);transition:.25s ease-in-out;width:100%}.admin__navbar__hamburger-item:first-child{top:0}.admin__navbar__hamburger-item:nth-child(2),.admin__navbar__hamburger-item:nth-child(3){top:10px}.admin__navbar__hamburger-item:nth-child(4){top:20px}.admin__navbar__hamburger-item:first-child .navbar__hamburger.open .admin__navbar__hamburger-item:first-child .navbar__hamburger{top:10px;width:0;left:50%}.admin__navbar__hamburger-item:nth-child(2) .navbar__hamburger.open .admin__navbar__hamburger-item:nth-child(2) .navbar__hamburger{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.admin__navbar__hamburger-item:nth-child(3) .navbar__hamburger.open .admin__navbar__hamburger-item:nth-child(3) .navbar__hamburger{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.admin__navbar__hamburger-item:nth-child(4) .navbar__hamburger.open .admin__navbar__hamburger-item:nth-child(4) .navbar__hamburger{top:10px;width:0;left:50%}.admin__navbar__collapse{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-wrap:nowrap;flex-wrap:nowrap;position:absolute;top:80px;right:0;-ms-flex-align:end;align-items:flex-end;-ms-flex-preferred-size:100%;flex-basis:100%;-ms-flex-pack:end;justify-content:flex-end;max-height:0;opacity:0;transition:max-height .3s ease-in-out;visibility:hidden;width:100%}.admin__navbar__collapse.open{background-color:#f9f9f9;max-height:400px;opacity:1;visibility:visible}@media (min-width:1109px){.admin__navbar__collapse{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;position:relative;-ms-flex-align:center;align-items:center;background-color:transparent;-ms-flex-preferred-size:65%;flex-basis:65%;top:unset;right:unset;-ms-flex-pack:start;justify-content:flex-start;max-height:none;opacity:1;visibility:visible;width:auto}}.admin__navbar__triggers{display:-ms-flexbox;display:flex}@media (min-width:1109px){.admin__navbar__triggers{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-ms-flex-align:center;align-items:center;-ms-flex-preferred-size:35%;flex-basis:35%;-ms-flex-pack:distribute;justify-content:space-around}}.admin__navbar__collapse-item{padding:.5em 1.25em}.admin__navbar__collapse-item:before{position:absolute;background-color:#1d2870;bottom:0;content:\\\" \\\";height:2px;left:0;-webkit-transform:scaleX(0);transform:scaleX(0);transition:-webkit-transform 175ms ease-in-out 0s;transition:transform 175ms ease-in-out 0s;transition:transform 175ms ease-in-out 0s,-webkit-transform 175ms ease-in-out 0s;visibility:hidden;width:100%}.admin__navbar__collapse-item:hover:before{-webkit-transform:scaleX(1);transform:scaleX(1);visibility:visible}@media (min-width:900px){.admin__navbar__collapse-item{padding:.5em .75em}}@media (min-width:1200px){.admin__navbar__collapse-item{padding:.5em 1.25em}}.admin__navbar__collapse-item:before{bottom:5px;left:12.5%;width:75%}.admin__navbar__trigger-item:before{position:absolute;background-color:#1d2870;bottom:0;content:\\\" \\\";height:2px;left:0;-webkit-transform:scaleX(0);transform:scaleX(0);transition:-webkit-transform 175ms ease-in-out 0s;transition:transform 175ms ease-in-out 0s;transition:transform 175ms ease-in-out 0s,-webkit-transform 175ms ease-in-out 0s;visibility:hidden;width:100%}.admin__navbar__trigger-item:hover:before{-webkit-transform:scaleX(1);transform:scaleX(1);visibility:visible}.admin__navbar__trigger-item--cart,.admin__navbar__trigger-item--profile{position:relative;background-color:transparent;color:#1d2870}.admin__navbar__trigger-item--profile{padding:.5em 17.5px .5em 10px}@media (max-width:400px){.admin__navbar__trigger-item--profile{padding:.5em 5px}}.admin__navbar__trigger-item--cart{padding:.5em 40px .5em 10px}.admin__navbar__trigger-item--cart:after{position:absolute;padding:5px;background-color:#1d2870;border-radius:50%;color:#fcfcfc;content:attr(data-cart-count);font-size:10px;height:20px;line-height:10px;right:7.5px;text-align:center;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);vertical-align:middle;width:20px}.admin__navbar__trigger-item--search{padding:.5em 1.25em}@media (min-width:900px){.admin__navbar__trigger-item--search{padding:.5em .75em}}@media (min-width:1200px){.admin__navbar__trigger-item--search{padding:.5em 1.25em}}.admin__navbar__search-text{padding-right:.5em}.admin__navbar__trigger-item-icon{margin-right:.5em;vertical-align:middle}.admin__navbar__trigger-item-icon path{color:#fc7b18}\", \"\", {\"version\":3,\"sources\":[\"/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/navbar.scss\",\"/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/utils/_mixins.scss\",\"/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/styles/utils/_variables.scss\"],\"names\":[],\"mappings\":\"AAEE,eCiEI,oBAAA,aAAa,0BD9DK,sBAAA,qBAAQ,iBAAA,kBAIV,OACT,uBACc,iBACL,oCAKlB,sBAAA,8BAA8B,MACtB,uCAC0C,WACtC,CAEZ,yBApBF,eAqBI,sBAA0B,CAmP7B,CAjPC,0BAvBF,eAwBI,qBAAA,sBAAuB,CAgP1B,CAzOC,uBACE,kBAAkB,4BAClB,eAAe,SACN,mCACT,2BAA2B,UAChB,CALZ,2BAOG,WAAW,uBACa,CACzB,yBATH,uBAWI,aAAgB,CAYnB,CAVC,0BAbF,uBAcI,cAAgB,4BAChB,eAAe,SACN,uBACT,cAAe,CAjBlB,2BAmBK,wBAAwB,UACb,CACZ,CAAA,0BAIH,aAAc,CACf,wBCQC,oBAAA,aAAa,uBDNI,mBAAA,qBAAQ,iBAAA,4BACzB,eAAe,kBACf,wBAAyB,CACzB,0BAJF,wBAKI,sBAAA,6BAA8B,CAEjC,CAAA,0BAEC,WAAW,eACI,gDACf,wCAAwC,2BACb,UAlER,CAqEnB,yBAPF,0BAQI,UAAW,CAKd,CAHC,0BAVF,0BAWI,YAAa,CAEhB,CAAA,+BAEC,cAAc,kBACI,yBAElB,kBAAkB,WACP,OACF,UACC,+BACV,uBAAuB,4BACK,UACjB,CAVZ,2CAaG,KAAQ,CAbX,wFAkBG,QAAS,CAlBZ,4CAsBG,QAAS,CAtBZ,iIA6BS,SAAS,QACA,QACA,CA/BlB,mIAyCS,gCAAA,uBAAwB,CAzCjC,mIAmDS,iCAAA,wBAAyB,CAnDlC,mIA6DS,SAAS,QACA,QACA,CACV,yBC/EP,oBAAA,aAAa,0BDqFO,sBAAA,qBAAQ,iBAAA,kBACV,SACT,QACC,mBACV,qBAAqB,6BACrB,gBAAgB,kBAChB,yBAAyB,aACV,UACL,sCAC8B,kBACtB,UACP,CAZZ,8BAcG,yBACA,iBAAiB,UAEP,kBACS,CACpB,0BAnBH,yBCpFE,oBAAA,aAAa,uBDyGM,mBAAA,qBAAQ,iBAAA,kBACP,sBAClB,mBAAmB,6BACU,4BAC7B,eAAe,UACL,YACE,oBACZ,2BAA2B,gBACX,UACN,mBACS,UACR,CAEd,CAAA,yBAEC,oBAAA,YAAa,CACb,0BAFF,yBCvHE,oBAAA,aAAa,uBD0HM,mBAAA,qBAAQ,iBAAA,sBACzB,mBAAmB,4BACnB,eAAe,yBACf,4BAA6B,CAEhC,CAAA,8BASC,mBAAqB,CARtB,qCCzEC,kBAAkB,yBAElB,SAAW,YACC,WACD,OACF,4BACT,oBAAoB,kDACpB,0CAAA,iFAAwD,kBACtC,UACP,CDgEZ,2CC5DG,4BAAA,oBAAoB,kBACD,CApHzB,yBD+KE,8BAGI,kBAAqB,CAWxB,CAAA,0BAdD,8BAMI,mBAAqB,CAQxB,CAdA,qCAUG,WAAW,WAC2B,SA1M3B,CA4MZ,oCCtFD,kBAAkB,yBAElB,SAAW,YACC,WACD,OACF,4BACT,oBAAoB,kDACpB,0CAAA,iFAAwD,kBACtC,UACP,CD+EZ,0CC3EG,4BAAA,oBAAoB,kBACD,CD6ErB,yEAEE,kBAAkB,6BACW,aEpNb,CFsNjB,sCAEC,6BAAgC,CAChC,yBAFF,sCAGI,gBAA4B,CAE/B,CAAA,mCAEC,2BAA8B,CAD/B,yCAIG,kBAAkB,YACkB,yBAEpC,kBAAkB,cAElB,8BAA8B,eACO,YAPpB,iBASsB,YAC3B,kBACM,QACV,mCACR,2BAA2B,sBACL,UAdL,CAgBlB,qCASD,mBAAqB,CACtB,yBARD,qCAEI,kBAAqB,CAMxB,CAAA,0BARD,qCAKI,mBAAqB,CAGxB,CAAA,4BAGD,kBAAoB,CACrB,kCAEC,kBAAmB,qBACG,CAFvB,uCAIG,aEpQc,CFqQf\",\"file\":\"navbar.scss\",\"sourcesContent\":[\"@import './utils/index';\\n.admin {\\n  &__navbar {\\n    $navRoot: &;\\n    $lineWidth: 75%;\\n    @include flex(column, nowrap);\\n    $hamburgerWidth: 40px;\\n    $mobileBreakpoint: 1109px;\\n    $desktopBreakpoint: 1230px;\\n    position: absolute;\\n    left: 0px;\\n    width: calc(20vw - 2em);\\n    padding: 1em 0.5em;\\n    // align-items: center;\\n    // Added Code Until ScrollMagic Implemented\\n    // box-shadow: inset 0px 35px 35px -10px $white;\\n    box-shadow: inset 0px #{$headerHeight} 0px 0px $white;\\n    justify-content: space-between;\\n    top: 0em;\\n    transition: box-shadow $animationSpeed ease-in-out;\\n    z-index: 100;\\n\\n    @media (max-width: 400px) {\\n      padding: 1em 0em 1em 0.5em;\\n    }\\n    @media (max-width: 1030px) {\\n      align-items: flex-start;\\n    }\\n    // Commented Out Until ScrollMagic Implemented\\n    // &:hover,\\n    // &--active {\\n    //   box-shadow: inset 0px #{$headerHeight} 0px 0px $white;\\n    // }\\n    &__header {\\n      position: relative;\\n      flex-basis: 10%;\\n      top: 24px;\\n      transform: translateY(-50%);\\n      width: auto;\\n      img {\\n        width: auto;\\n        height: calc(80px - 2em);\\n      }\\n      @media (min-width: 500px) {\\n        padding: 0em 1em;\\n      }\\n      @media (min-width: $mobileBreakpoint) {\\n        padding: 0em 2em;\\n        flex-basis: 15%;\\n        top: auto;\\n        transform: none;\\n        img {\\n          height: calc(80px - 2em);\\n          width: 100%;\\n        }\\n      }\\n    }\\n    &__logo-link {\\n      display: block;\\n    }\\n    &__content {\\n      @include flex(row, nowrap);\\n      flex-basis: 90%;\\n      justify-content: flex-end;\\n      @media (min-width: $mobileBreakpoint) {\\n        justify-content: space-between;\\n      }\\n    }\\n    &__hamburger {\\n      margin: 1em;\\n      cursor: pointer;\\n      transform: rotate(0deg) translateY(-40%);\\n      transition: .5s ease-in-out;\\n      width: $hamburgerWidth;\\n\\n      @media (max-width: 400px) {\\n        width: 30px;\\n      }\\n      @media (min-width: $mobileBreakpoint) {\\n        display: none;\\n      }\\n    }\\n    &__hamburger-item {\\n      display: block;\\n      position: absolute;\\n      background-color: $brandSecondary;\\n      border-radius: 3px;\\n      height: 3px;\\n      left: 0px;\\n      opacity: 1;\\n      transform: rotate(0deg);\\n      transition: .25s ease-in-out;\\n      width: 100%;\\n\\n      &:nth-child(1) {\\n        top: 0px;\\n      }\\n\\n      &:nth-child(2),\\n      &:nth-child(3) {\\n        top: 10px;\\n      }\\n\\n      &:nth-child(4) {\\n        top: 20px;\\n      }\\n\\n      &:nth-child(1) {\\n        .navbar {\\n          &__hamburger {\\n            &.open & {\\n              top: 10px;\\n              width: 0%;\\n              left: 50%;\\n            }\\n          }\\n        }\\n      }\\n\\n      &:nth-child(2) {\\n        .navbar {\\n          &__hamburger {\\n            &.open & {\\n              transform: rotate(45deg);\\n            }\\n          }\\n        }\\n      }\\n\\n      &:nth-child(3) {\\n        .navbar {\\n          &__hamburger {\\n            &.open & {\\n              transform: rotate(-45deg);\\n            }\\n          }\\n        }\\n      }\\n\\n      &:nth-child(4) {\\n        .navbar {\\n          &__hamburger {\\n            &.open & {\\n              top: 10px;\\n              width: 0%;\\n              left: 50%;\\n            }\\n          }\\n        }\\n      }\\n    }\\n    &__collapse {\\n      @include flex(column, nowrap);\\n      position: absolute;\\n      top: 80px;\\n      right: 0em;\\n      align-items: flex-end;\\n      flex-basis: 100%;\\n      justify-content: flex-end;\\n      max-height: 0px;\\n      opacity: 0; // sass-lint:disable-line zero-unit\\n      transition: max-height 300ms ease-in-out;\\n      visibility: hidden;\\n      width: 100%;\\n      &.open {\\n        background-color: $contentBackgroundColor;\\n        max-height: 400px;\\n        // margin-bottom: 0.5em;\\n        opacity: 1;\\n        visibility: visible;\\n      }\\n      @media (min-width: $mobileBreakpoint) {\\n        @include flex(row, nowrap);\\n        position: relative;\\n        align-items: center;\\n        background-color: transparent;\\n        flex-basis: 65%;\\n        top: unset;\\n        right: unset;\\n        justify-content: flex-start;\\n        max-height: none;\\n        opacity: 1;\\n        visibility: visible;\\n        width: auto;\\n      }\\n    }\\n    &__triggers {\\n      display: flex;\\n      @media (min-width: $mobileBreakpoint) {\\n        @include flex(row, nowrap);\\n        align-items: center;\\n        flex-basis: 35%;\\n        justify-content: space-around;\\n      }\\n    }\\n    &__collapse-item {\\n      @include animateUnderline($linkColor);\\n      @include md {\\n        padding: 0.5em 0.75em;\\n      }\\n      @include lg {\\n        padding: 0.5em 1.25em;\\n      }\\n      padding: 0.5em 1.25em;\\n      &:before {\\n        bottom: 5px;\\n        left: calc((100% - #{$lineWidth}) / 2);\\n        width: $lineWidth;\\n      }\\n    }\\n    &__trigger-item {\\n      @include animateUnderline($linkColor);\\n      // padding: 10px;\\n      &--profile,\\n      &--cart {\\n        position: relative;\\n        background-color: transparent;\\n        color: $brandSecondary;\\n      }\\n      &--profile {\\n        padding: 0.5em 17.5px 0.5em 10px;\\n        @media (max-width: 400px) {\\n          padding: 0.5em 5px 0.5em 5px;\\n        }\\n      }\\n      &--cart {\\n        padding: 0.5em 40px 0.5em 10px;\\n        &:after {\\n          $circleSize: 20px;\\n          position: absolute;\\n          padding: calc(#{$circleSize} * 0.25);\\n          background-color: $brandSecondary;\\n          border-radius: 50%;\\n          color: $white;\\n          content: attr(data-cart-count);\\n          font-size: calc(#{$circleSize} * 0.5);\\n          height: $circleSize;\\n          line-height: calc(#{$circleSize} * 0.5);\\n          right: 7.5px;\\n          text-align: center;\\n          top: 50%;\\n          transform: translateY(-50%);\\n          vertical-align: middle;\\n          width: $circleSize;\\n        }\\n      }\\n      &--search {\\n        @include md {\\n          padding: 0.5em 0.75em;\\n        }\\n        @include lg {\\n          padding: 0.5em 1.25em;\\n        }\\n        padding: 0.5em 1.25em;\\n      }\\n    }\\n    &__search-text {\\n      padding-right: 0.5em;\\n    }\\n    &__trigger-item-icon {\\n      margin-right: 0.5em;\\n      vertical-align: middle;\\n      path {\\n        color: $brandPrimary;\\n      }\\n    }\\n  }\\n\\n}\\n\",\"// Display mixins\\n// Example:\\n// @include md {\\n//   ...styles\\n// }\\n// Output:\\n// @media (min-width: $screenMedium) {\\n//   ...styles\\n// }\\n@mixin xs {\\n  @media (min-width: $screenXSmall) {\\n    @content;\\n  }\\n}\\n@mixin sm {\\n  @media (min-width: $screenSmall) {\\n    @content;\\n  }\\n}\\n@mixin md {\\n  @media (min-width: $screenMedium) {\\n    @content;\\n  }\\n}\\n@mixin lg {\\n  @media (min-width: $screenLarge) {\\n    @content;\\n  }\\n}\\n@mixin xl {\\n  @media (min-width: $screenXLarge) {\\n    @content;\\n  }\\n}\\n@mixin retina {\\n  @media only screen and (min-resolution: 192dpi),\\n    only screen and (min-resolution: 2dppx) {\\n      @content;\\n  }\\n}\\n@mixin print {\\n  @media print {\\n    @content;\\n  }\\n}\\n\\n@mixin lineHeight($font-size) {\\n  line-height: calc(#{$font-size} * 1.618);\\n}\\n\\n@mixin absoluteCenter {\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n}\\n\\n// flex([row, column])\\n// Example:\\n// @include flex(row)\\n// Creates:\\n// display: flex\\n// flex-direction: row\\n//\\n@mixin flex($direction: row, $wrap: nowrap) {\\n  @if $direction == \\\"column\\\" or $direction == \\\"row\\\" {\\n    @if $wrap == \\\"nowrap\\\" or $wrap == \\\"wrap\\\" or $wrap == \\\"wrap-reverse\\\" {\\n      display: flex;\\n      flex-direction: $direction;\\n      flex-wrap: $wrap;\\n    } @else {\\n      @error \\\"`#{$wrap}` is not a wrapping method. Must be 'nowrap', 'wrap', or 'wrap-reverse'.\\\";\\n    }\\n  }\\n  @else {\\n    @error \\\"`#{$direction}` is not a valid direction. Must be 'column' or 'row'.\\\";\\n  }\\n}\\n\\n// shadow([bottom, middle, top], [right, center, left], {number in px})\\n// Example:\\n// @include shadow(bottom, center, 10px)\\n// Creates:\\n// box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.5)\\n//\\n@mixin shadow($verticalPosition: middle, $horizontalPosition: center, $blurRadius: 15px) {\\n  $yPos: 0px !default;\\n  $xPos: 0px !default;\\n  @if $verticalPosition == 'bottom' {\\n    $yPos: calc(#{$blurRadius} / 4 + 5px);\\n  } @else if $verticalPosition == 'middle' {\\n    $yPos: 0px;\\n  } @else if $verticalPosition == 'top' {\\n    $yPos: -#{$blurRadius};\\n  } @else {\\n    @error \\\"`#{$verticalPosition}` is not a vertical option. Must be 'bottom', 'middle', or 'top'.\\\";\\n  }\\n\\n  @if $horizontalPosition == 'right' {\\n    $xPos: $blurRadius;\\n  } @else if $horizontalPosition == 'center' {\\n    $xPos: 0px;\\n  } @else if $horizontalPosition == 'left' {\\n    $xPos: -#{$blurRadius};\\n  } @else {\\n    @error \\\"`#{$horizontalPosition}` is not a horizontal option. Must be 'left', 'right', or 'center'.\\\";\\n  }\\n\\n  @if is-number($blurRadius) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($blurRadius)) != null {\\n  } @else {\\n    @error \\\"`#{$blurRadius}` is not a pixel value. Number must be in `px`\\\";\\n  }\\n  box-shadow: $xPos $yPos $blurRadius rgba(0, 0, 0, 0.2);\\n}\\n\\n// animateUnderline({color})\\n// Example:\\n// @include animateUnderline(#9611ff)\\n//\\n@mixin animateUnderline($color: $brandSecondary) {\\n  @if type-of($color) == 'color' {\\n    &:before {\\n      position: absolute;\\n      background-color: $color;\\n      bottom: 0px;\\n      content: ' ';\\n      height: 2px;\\n      left: 0px;\\n      transform: scaleX(0);\\n      transition: transform $linkAnimationSpeed ease-in-out 0s;\\n      visibility: hidden;\\n      width: 100%;\\n    }\\n    &:hover {\\n      &:before {\\n        transform: scaleX(1);\\n        visibility: visible;\\n      }\\n    }\\n  } @else {\\n    @error \\\"`#{$color}` is not a color. Must input a color.\\\";\\n  }\\n}\\n\\n@mixin animateSize($scale: 1.1) {\\n  @if type-of($scale) == 'number' {\\n    transform: scale(1);\\n    &:hover {\\n      transform: scale($scale);\\n      transition: transform $cardAnimationSpeed ease-in-out;\\n    }\\n  } @else {\\n    @error \\\"`#{$scale}` is not a number. Must input a number.\\\"\\n  }\\n}\\n\\n@mixin animateBeat($startAngle: -20deg, $endAngle: -25deg) {\\n  animation: beat 1s ease infinite alternate;\\n  @keyframes beat {\\n    from {\\n      transform: rotate(#{$startAngle}) scale(1);\\n  \\t} to {\\n      transform: rotate(#{$endAngle}) scale(1.1);\\n  \\t}\\n  }\\n\\n}\\n\",\"// TODO: Implement native css variables\\n\\n// Brand colors\\n$brandPrimary: #FC7B18 !default;\\n$brandSecondary: #1D2870 !default;\\n// $brandTertiary:\\n// $brandQuaternary:\\n\\n// Colors\\n$gray: #E8E8E8 !default;\\n$grayDark: darken($gray, 10);\\n$grayDarker: darken($gray, 20);\\n$grayDarkest: darken($gray, 30);\\n$white: #FCFCFC !default;\\n\\n// Background colors\\n$siteBackgroundColor: #F9F9F9 !default;\\n$contentBackgroundColor: #F9F9F9 !default;\\n$headerBackgroundColor: transparent !default;\\n$footerBackgroundColor: #F7F5F5 !default;\\n\\n// Font Colors\\n$linkColor: $brandSecondary;\\n\\n// Alert Colors\\n$infoColor: #DAEDF6 !default;\\n$successColor: #DFF0D9 !default;\\n$warningColor: #FCF8E4 !default;\\n$errorColor: #F1DEDE !default;\\n\\n// Fonts\\n$fontPrimary: 'Roboto', sans-serif;\\n$fontSecondary: 'Roboto Condensed', sans-serif;\\n\\n// Screen Sizes\\n// TODO: Decide on final breakpoints\\n$screenXSmall: 320px;\\n$screenSmall: 600px;\\n$screenMedium: 900px;\\n$screenLarge: 1200px;\\n$screenXLarge: 1440px;\\n\\n// Element Sizes\\n$headerHeight: 80px !default;\\n\\n// Animation Speeds\\n$animationSpeed: 350ms !default;\\n$linkAnimationSpeed: calc(#{$animationSpeed} / 2);\\n$cardAnimationSpeed: calc(#{$animationSpeed} * 2);\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NavBar from './Nav';\n// import '../../../graphql/SFY/sfyCheckoutQuery.graphql';\n// import Cart from '../../../../cart/containers/Cart';\n//import CartHOC from '../../../../cart/containers/CartHOC';\n// import settings from '../../../../../../../../settings';\nimport '../styles/main-layout.scss';\n\nclass AdminLayout extends React.Component {\n  state = {\n    cookieBannerIsOpen: false\n  };\n  componentDidMount() {\n    // if (typeof window !== 'undefined') {\n    //   const cookiesAccepted = localStorage.getItem('cookieAcceptance'); // eslint-disable-line no-undef\n    //   switch (cookiesAccepted) {\n    //     case null:\n    //       localStorage.setItem('cookieAcceptance', 'false'); // eslint-disable-line no-undef\n    //       this.setState({ cookieBannerIsOpen: true });\n    //       break;\n    //     case 'true':\n    //       this.setState({ cookieBannerIsOpen: false });\n    //       break;\n    //     case 'false':\n    //       this.setState({ cookieBannerIsOpen: true });\n    //       break;\n    //   }\n    // }\n  }\n  dismissCookieBanner = () => {\n    this.setState({ cookieBannerIsOpen: false });\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('cookieAcceptance', 'true'); // eslint-disable-line no-undef\n      this.setState({ showCookieBanner: false });\n    }\n  };\n  render() {\n    const { children, navBar } = this.props;\n    // console.log('NAV BAR::', navBar);\n    const { cookieBannerIsOpen } = this.state;\n    return (\n      <div className=\"admin-layout\">\n        {/* <NavBar /> */}\n        <div id=\"content\" className=\"admin-layout__content\">\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n\nAdminLayout.propTypes = {\n  children: PropTypes.node,\n  navBar: PropTypes.bool\n};\n\nexport default AdminLayout;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport AdminLayout from './AdminLayout';\nimport ProfileMenu, { isAdminVerified } from '../../profile/components/ProfileMenu';\nimport ProfileOverview from '../../profile/components/ProfileOverview';\nimport ProfilePassword from '../../profile/components/ProfilePassword';\nimport ProfileAddress from '../../profile/components/ProfileAddress';\n// import ManageCarousel from '../../profile/components/ManageCarousel';\nimport Carousel from './CarouselImages';\nimport Menu from './Menu';\n\nimport ManageSpecs from '../../profile/components/ManageSpecs';\nimport ManageSeo from './Seo';\nimport ManageLocations from './Locations';\n\nimport '../../profile/styles/profile-view.scss';\n\n// import ProfileView from '../../profile/containers/Profile';\n\nconst renderMetaData = () => (\n  <Helmet\n    title=\"Admin\"\n    meta={[\n      {\n        name: 'description',\n        content: 'Admin page'\n      }\n    ]}\n  />\n);\nconst adminViews = [\n  // { view: 'manageAdmins', component: ManageAdmins },\n  { view: 'manageCarousel', component: Carousel },\n  { view: 'manageSpecs', component: ManageSpecs },\n  { view: 'manageSeo', component: ManageSeo },\n  { view: 'manageLocations', component: ManageLocations }\n];\nclass AdminView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentView: 'manageSeo'\n    };\n  }\n  changeView = selectedView => this.setState({ currentView: selectedView });\n\n  handleProductSelect = e => this.setState({ selectedProduct: e.target.value });\n\n  renderAdminView = viewList => {\n    if (!isAdminVerified(this.props)) return null;\n    const { currentView } = this.state;\n    const [selectedView] = viewList.filter(v => v.view === currentView);\n    if (!selectedView) return null;\n    const { component: Component } = selectedView;\n    return <Component {...this.state} {...this.props} />;\n  };\n  render() {\n    const { currentView } = this.state;\n    return (\n      <AdminLayout>\n        {/* {renderMetaData()} */}\n        <div className=\"profile-view\">\n          <aside className=\"profile-view__sidebar\">\n            <Menu {...this.state} {...this.props} changeView={this.changeView} />\n          </aside>\n          <section className=\"profile-view__content\">\n            {currentView === 'dashboard' ? <ProfileOverview /> : null}\n            {/* {currentView === 'profilePassword' ? <ProfilePassword /> : null} */}\n            {/* {currentView === 'profileAddress' ? <ProfileAddress /> : null} */}\n            {this.renderAdminView(adminViews)}\n          </section>\n        </div>\n      </AdminLayout>\n    );\n  }\n}\n\nexport default AdminView;\n","import React, { Component } from 'react';\nimport { compose, graphql } from 'react-apollo';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { forEach, values, pick } from 'ramda';\nimport S3SIGNUPLOAD from '../../graphql/S3Upload.graphql';\n\nconst AWSImageAdapter = WrappedComponent => {\n  class WrappedImage extends Component {\n    constructor() {\n      super();\n      this.state = {\n        percentCompleted: 0,\n        urlPreview: null,\n        image_data: new Map()\n      };\n    }\n    componentDidMount() {\n      const { images } = this.props;\n      this.setState({ image_data: new Map([...images]) });\n    }\n    uploadToS3 = async (signedRequest, file) => {\n      const options = {\n        headers: {\n          'Content-Type': `\"${file.type}\"`\n        },\n        onUploadProgress: function(progressEvent) {\n          let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          this.setState({ percentCompleted });\n        }.bind(this)\n      };\n      await axios.put(signedRequest, file, options);\n    };\n    adaptFileEventToValue = delegate => async e => {\n      const {\n        target: { files }\n      } = e;\n      const { signS3 } = this.props;\n      const image_data = new Map();\n      const getFileNameAndType = file => pick(['name', 'type'], file);\n      const response = async (signS3, { name, type }) => await signS3(name, type);\n\n      if (files.length !== 0 && typeof files !== 'undefined') {\n        let updatedImageData;\n        // TODO THIS FOREACH BIZ SUCKS WE ARE HAVING TO SET STATE WAY TO MUCH IN THIS LOOP\n        // BUT PLACING SETSTATE AFTER FOREACH FIRES BEFORE UPDATED IMAGEMAP IS CREATED\n        forEach(async file => {\n          // NOTE JUST need to update the state and then map the urls down on the preview component\n          const { name } = getFileNameAndType(file);\n          const res = await response(signS3, getFileNameAndType(file));\n          const { signedRequest, url } = res.data.signS3;\n          await this.uploadToS3(signedRequest, file);\n          const currentImageSize = this.state.image_data.size;\n          const fileIndex = currentImageSize === 0 ? 0 : currentImageSize;\n          // indexOf(file, values(files));\n          image_data.set(`image_url-${fileIndex}`, { name: name, url });\n          updatedImageData = new Map([...this.state.image_data, ...image_data]);\n          this.setState({ image_data: updatedImageData });\n          delegate(url);\n        }, values(files));\n      }\n    };\n    handleReorder = reOrderedImages => {\n      this.setState({ image_data: reOrderedImages });\n    };\n    render() {\n      return (\n        <WrappedComponent\n          adaptFileEventToValue={this.adaptFileEventToValue}\n          percentCompleted={this.state.percentCompleted}\n          urlPreview={this.state.urlPreview}\n          fileName={this.state.fileName}\n          imageData={this.state.image_data}\n          handleImageReorder={this.handleReorder}\n          {...this.props}\n        />\n      );\n    }\n  }\n  WrappedImage.propTypes = {\n    signS3: PropTypes.func,\n    images: PropTypes.object\n  };\n  const testingImageData = new Map();\n  testingImageData.set('image_url-0', {\n    name: 'product_shot_ft2',\n    url: 'https://rcomm.s3.amazonaws.com/ft2_product_shot.png'\n  });\n  testingImageData.set('image_url-1', {\n    name: 'product_shot_ft2V2',\n    url: 'https://rcomm.s3.amazonaws.com/ft2_product_shot.png'\n  });\n  testingImageData.set('image_url-2', {\n    name: 'product_shot_ft2V3',\n    url: 'https://rcomm.s3.amazonaws.com/ft2_product_shot.png'\n  });\n  testingImageData.set('image_url-3', {\n    name: 'product_shot_ft2V4',\n    url: 'https://rcomm.s3.amazonaws.com/ft2_product_shot.png'\n  });\n  WrappedImage.defaultProps = {\n    // images: testingImageData\n  };\n  return compose(\n    graphql(S3SIGNUPLOAD, {\n      props: ({ mutate }) => ({\n        signS3: async (filename, filetype) => {\n          let response = await mutate({\n            variables: {\n              filename,\n              filetype\n            }\n          });\n          return response;\n        }\n      })\n    })\n  )(WrappedImage);\n};\n\nexport default AWSImageAdapter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCancel } from 'react-icons/md';\n\nconst ImagePreview = props => {\n  const {\n    images,\n    handleDragStart,\n    handleDragEnter,\n    handleDragOver,\n    handleDragLeave,\n    handleDragEnd,\n    handleDrop,\n    removeImage\n  } = props;\n  return (\n    // <div className=\"admin__container\">\n    <div className=\"admin__images\">\n      {Array.from(images.entries()).map((entry, idx) => {\n        return (\n          <div\n            id={entry[0]}\n            key={entry[0]}\n            className=\"admin__images--item\"\n            draggable=\"true\"\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n            onDragEnter={handleDragEnter}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n          >\n            <img\n              className=\"admin__images--image\"\n              // id={entry[0]}\n              draggable=\"false\"\n              src={entry[1].url}\n              alt={entry[1].name}\n            />\n            <div className=\"admin__images--image--info\">\n              <span className=\"admin__images--image--position\" draggable=\"false\">\n                Image Position: {idx}\n              </span>\n              <span className=\"admin__images--image--name\" draggable=\"false\">\n                File Name: {entry[1].name}\n              </span>\n            </div>\n            <div className=\"admin__btn--container\">\n              <button className=\"admin__btn--remove\" onClick={() => removeImage(entry[0])}>\n                <MdCancel size={30} className=\"admin__btn--cancel\" color=\"#DB3A34\" />\n              </button>\n            </div>\n            <div className=\"admin__images--spacer\" />\n          </div>\n        );\n      })}\n    </div>\n    // {/* <div id=\"upload-bar\" className=\"upload-progress\">\n    //   <div className=\"upload-bar\">0%</div>\n    // </div> */}\n\n    // </div>\n  );\n};\nImagePreview.propTypes = {\n  images: PropTypes.object,\n  handleDragStart: PropTypes.func.isRequired,\n  handleDragEnter: PropTypes.func.isRequired,\n  handleDragOver: PropTypes.func.isRequired,\n  handleDragLeave: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n  handleDragEnd: PropTypes.func.isRequired\n};\n\nexport default ImagePreview;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, compose } from 'react-apollo';\nimport axios from 'axios';\nimport { forEach, values, pick } from 'ramda';\n\nimport PAGE_QUERY from '../../graphql/PageQuery.graphql';\n\n// import ImageUploader from './ImageUploader';\nimport ImagePreview from './ImagePreview';\nimport AWSImageAdapter from './ImageAdapter';\n\nimport '../../styles/carousel.scss';\n\nconst uploadToS3 = () => {\n  return;\n};\nclass Carousel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      percentCompleted: 0,\n      carouselStatus: false,\n      page_content: {\n        page_id: null,\n        content: [\n          {\n            section_name: 'hero',\n            field_name: 'Carousel',\n            field_label: 'carousel',\n            field_type: 'Carousel',\n            field_value: null\n          }\n        ]\n      },\n      images: new Map()\n    };\n  }\n  componentDidMount() {\n    console.log('CAROUSEL PROPS DID MOUNT', this.props.loadingPage);\n    if (!this.props.loadingPage) {\n      const { pages } = this.props;\n      const page = pages[0];\n      const { fields } = this.props.page;\n      const rootFields = fields[0];\n      const { content } = this.state.page_content;\n      const fieldsToUpdate = content[0];\n      const transformImages = new Map([...JSON.parse(rootFields.field_value).images]);\n\n      const updatedFields = Object.assign({}, fieldsToUpdate, {\n        field_value: Object.assign({}, JSON.parse(rootFields.field_value), { images: transformImages })\n      });\n      this.setState({\n        loaded: true,\n        images: transformImages,\n        page_content: Object.assign({}, this.state.page_content, {\n          page_id: parseInt(page.id),\n          content: [updatedFields]\n        })\n      });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const { loadingPages, loadingPage, page, pages } = this.props;\n    const { page_content, loaded } = this.state;\n    if (prevProps.loadingPages !== loadingPages || !loadingPages) {\n      console.log('PREV LOADING PAGE', prevProps.page, 'PROPS PAGE', page);\n      if (prevProps.page !== page && !prevState.loaded) {\n        console.log('PAGE IS DIFF', loaded, prevState.loaded);\n        return this.initializeView();\n      } else if (!prevState.loaded && page) {\n        return this.initializeView();\n      }\n      return;\n    }\n  }\n  initializeView = () => {\n    const { page_content } = this.state;\n\n    const { pages } = this.props;\n    const page = pages[0];\n    if (this.props.page) {\n      const { fields } = this.props.page;\n      const rootFields = fields[0];\n      const { content } = page_content;\n      const fieldsToUpdate = content[0];\n      const transformImages = new Map([...JSON.parse(rootFields.field_value).images]);\n\n      const updatedFields = Object.assign({}, fieldsToUpdate, {\n        field_value: Object.assign({}, JSON.parse(rootFields.field_value), { images: transformImages })\n      });\n      this.setState({\n        loaded: true,\n        images: transformImages,\n        page_content: Object.assign({}, page_content, { page_id: parseInt(page.id), content: [updatedFields] })\n      });\n    }\n    const { percentCompleted } = this.state;\n    // if (percentCompleted > 0) {\n    //   this.updateProgress(percentCompleted);\n    // }\n    if (percentCompleted == 0 || percentCompleted == 100) {\n      const elem = document.getElementById('upload-bar');\n      elem.style.visibility = 'hidden';\n      return;\n    }\n  };\n  imageToState = images => {\n    this.setState({\n      images\n    });\n  };\n  updateProgress = percent => {\n    const elem = document.getElementById('upload-bar');\n    elem.style.visibility = 'visible';\n    elem.style.width = percent + '%';\n    elem.innerHTML = percent * 1 + '%';\n  };\n  handleDragStart = e => {\n    e.dataTransfer.setData('text', e.currentTarget.id);\n    e.dataTransfer.dropEffect = 'move';\n    this.setState({ mouseY: e.clientY });\n  };\n\n  handleDragEnter = e => {\n    e.preventDefault();\n    let target = e.target;\n    if (target.parentElement.className === 'drag-drop-item') target = e.target.parentNode;\n    target.style.borderTop = '1px solid red';\n  };\n\n  handleDragOver = e => e.preventDefault();\n\n  handleDrop = e => {\n    // NOTE used currentTarget as it seemed to pick up the div much easier\n    // also used clientY prop from event object to determine if we are draggin item upward\n\n    e.preventDefault();\n    const dataToDrop = e.dataTransfer.getData('text');\n    const dataEl = document.getElementById(dataToDrop);\n    let target = e.currentTarget;\n    target.style.borderTop = 'none';\n    e.target.style.borderTop = 'none';\n    // NOTE: we are pulling from the top item in list no element above\n    if (!dataEl.previousElementSibling) {\n      return target.insertAdjacentElement('afterend', dataEl);\n    }\n    if (dataEl.previousElementSibling && target.nextElementSibling) {\n      const oldY = this.state.mouseY;\n      const newY = e.clientY;\n      if (oldY > newY) {\n        return target.insertAdjacentElement('beforebegin', dataEl);\n      }\n      return target.insertAdjacentElement('afterend', dataEl);\n    }\n\n    // NOTE we are trying to drop in the last position so we should insert above the target\n    if (!target.nextElementSibling) {\n      return target.insertAdjacentElement('afterend', dataEl);\n    }\n  };\n  handleDragEnd = e => {\n    const imageNodeList = e.target.parentNode.children;\n    const imagesArray = Array.prototype.slice.call(imageNodeList);\n    const imageMap = new Map();\n    imagesArray.map(node => {\n      imageMap.set(node.id, this.state.images.get(node.id));\n    });\n    // needed? NOTE YES THIS IS NEEDED TO THE IMAGE ADAPTER CAN UPDATE ITS INTERNAL\n    // TRACK OF WHAT THE IMAGE ORDER\n    this.handleReorder(imageMap);\n  };\n  handleDragLeave = e => {\n    e.target.style.borderTop = 'none';\n    e.target.parentNode.borderTop = 'none';\n  };\n  handleReorder = reOrderedImages => {\n    this.setState({ images: reOrderedImages });\n  };\n  removeImage = key => {\n    const currentImages = new Map([...this.state.images]);\n    currentImages.delete(key);\n    this.setState({ images: currentImages });\n  };\n  uploadToS3 = async (signedRequest, file) => {\n    const options = {\n      headers: {\n        'Content-Type': `\"${file.type}\"`\n      },\n      onUploadProgress: function(progressEvent) {\n        let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n        this.setState({ percentCompleted });\n      }.bind(this)\n    };\n    await axios.put(signedRequest, file, options);\n  };\n  adaptFileEventToValue = delegate => async e => {\n    const {\n      target: { files }\n    } = e;\n    const { signS3 } = this.props;\n    const image_data = new Map();\n    const getFileNameAndType = file => pick(['name', 'type'], file);\n    const response = async (signS3, { name, type }) => await signS3(name, type);\n\n    if (files.length !== 0 && typeof files !== 'undefined') {\n      let updatedImageData;\n      // TODO THIS FOREACH BIZ SUCKS WE ARE HAVING TO SET STATE WAY TO MUCH IN THIS LOOP\n      // BUT PLACING SETSTATE AFTER FOREACH FIRES BEFORE UPDATED IMAGEMAP IS CREATED\n      forEach(async file => {\n        // NOTE JUST need to update the state and then map the urls down on the preview component\n        const { name } = getFileNameAndType(file);\n        const res = await response(signS3, getFileNameAndType(file));\n        const { signedRequest, url } = res.data.signS3;\n        await this.uploadToS3(signedRequest, file);\n        const currentImageSize = this.state.images.size;\n        const fileIndex = currentImageSize === 0 ? 0 : currentImageSize;\n        // indexOf(file, values(files));\n        image_data.set(`image_url-${fileIndex}`, { name: name, url });\n        updatedImageData = new Map([...this.state.images, ...image_data]);\n        this.setState({ images: updatedImageData });\n        delegate(url);\n      }, values(files));\n    }\n  };\n  handleChecked = () => {\n    this.setState({ carouselStatus: !this.state.carouselStatus });\n  };\n  saveCarouselContent = async () => {\n    const { page_content } = this.state;\n    const [content] = page_content.content;\n\n    const field_value = Object.assign({}, { images: this.state.images, carouselActive: this.state.carouselStatus });\n    const updatedContent = Object.assign({}, content, { field_value: JSON.stringify(field_value) });\n\n    const pageData = Object.assign({}, page_content, { content: [updatedContent] });\n    try {\n      const [data] = await this.props.uploadContent(pageData);\n      console.log('DATA:::', data);\n      const { images, carouselActive } = JSON.parse(data.field_value);\n      console.log('IAMGES:::', images);\n      this.setState({ images: new Map([...images]), carouselStatus: carouselActive, saveSuccess: true });\n    } catch (e) {\n      console.log('ERRROR UPLOADING', e);\n    }\n  };\n  render() {\n    // console.log('CAROUSEL State::', this.state);\n    // console.log('CAROUSEL PROPS:', this.props);\n    const { loadingPage } = this.props;\n    if (loadingPage) {\n      return (\n        <div className={'admin'}>\n          <div className=\"admin__btn\">\n            <button type=\"button\" className=\"admin__btn--upload\">\n              Upload\n              <input style={{ opacity: 0 }} onChange={this.adaptFileEventToValue(uploadToS3)} type={'file'} multiple />\n            </button>\n            <button className={'admin__btn--save'} onClick={this.saveCarouselContent}>\n              Save\n            </button>\n          </div>\n          <div className={'admin__carousel__toggle'}>\n            <span>Carousel On/Off</span>\n            <label className=\"admin__carousel__switch\">\n              <input type=\"checkbox\" checked={this.state.carouselStatus} onChange={this.handleChecked} />\n              <span className=\"admin__carousel__slider admin__carousel__slider--round\" />\n            </label>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className={'admin'}>\n        <div className=\"admin__btn\">\n          <button type=\"button\" className=\"admin__btn--upload\">\n            Upload\n            <input style={{ opacity: 0 }} onChange={this.adaptFileEventToValue(uploadToS3)} type={'file'} multiple />\n          </button>\n          <button className={'admin__btn--save'} onClick={this.saveCarouselContent}>\n            Save\n          </button>\n        </div>\n        <div className={'admin__carousel__toggle'}>\n          <span>Carousel On/Off</span>\n          <label className=\"admin__carousel__switch\">\n            <input type=\"checkbox\" checked={this.state.carouselStatus} onChange={this.handleChecked} />\n            <span className=\"admin__carousel__slider admin__carousel__slider--round\" />\n          </label>\n        </div>\n        {/* <ImageUploader imageToState={this.imageToState} {...this.props} /> */}\n        <ImagePreview\n          images={this.state.images}\n          removeImage={this.removeImage}\n          handleDragStart={this.handleDragStart}\n          handleDragEnter={this.handleDragEnter}\n          handleDrop={this.handleDrop}\n          handleDragOver={this.handleDragOver}\n          handleDragLeave={this.handleDragLeave}\n          handleDragEnd={this.handleDragEnd}\n          handleReorder={this.handleReorder}\n        />\n        <div id=\"upload-bar\" className=\"upload-progress\">\n          <div className=\"upload-bar\">0%</div>\n        </div>\n      </div>\n    );\n  }\n}\nCarousel.propTypes = {\n  loadingPages: PropTypes.bool,\n  loadingPage: PropTypes.bool,\n  fields: PropTypes.array,\n  pages: PropTypes.array,\n  uploadContent: PropTypes.func\n};\nconst CarouselWithApollo = compose(\n  graphql(PAGE_QUERY, {\n    options: () => {\n      return { variables: { pageTitle: 'Home', fieldNames: [['hero', 'images'], ['hero', 'carouselActive']] } };\n    },\n    props: ({ data }) => {\n      // console.log('WHY IS THIS NOT RUNNING::', data);\n      const { page, loading: loadingPage, error } = data;\n      if (loadingPage && !error) {\n        return { loadingPage, page: null };\n      } else {\n        return { page, loadingPage };\n      }\n    }\n  })\n)(Carousel);\nexport default AWSImageAdapter(CarouselWithApollo);\n","import React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\nconst Formic = props => {\n  console.log('FORM PROPS', props);\n  return (\n    <div>\n      <div className={'select'}>\n        <label htmlFor=\"\">Please select a location</label>\n        <select name=\"\" id=\"\" value={props.selectedLocation}>\n          <option value={props.selectedLocation} disabled>\n            {props.selectedLocation}\n          </option>\n        </select>\n      </div>\n      <Formik\n        initialValues={{ dealers: ['jared', 'ian', 'brent'] }}\n        onSubmit={values => {\n          console.log('VALUES::', values);\n        }}\n        render={({ values }) => (\n          <Form>\n            <FieldArray\n              name=\"friends\"\n              render={arrayHelpers => (\n                <div>\n                  {values.friends && values.friends.length > 0 ? (\n                    values.friends.map((friend, index) => (\n                      <div key={index}>\n                        <Field name={`friends.${index}`} />\n                        <button\n                          type=\"button\"\n                          onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                        >\n                          -\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                        >\n                          +\n                        </button>\n                      </div>\n                    ))\n                  ) : (\n                    <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                      {/* show this when user has removed all friends from the list */}\n                      Add a friend\n                    </button>\n                  )}\n                  <div>\n                    <button type=\"submit\">Submit</button>\n                  </div>\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\nexport default Formic;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, Field, FieldArray, Form } from 'formik';\n// import FormCreator from '../FormCreator';\n// import Text from '../FormCreator/FormTypes/Text';\nimport DealerForm from './Form';\n//\n// const LocationForm = new FormCreator({\n//   field: [<Text />]\n// });\nconst SelectLocationString = 'Please select a location';\nconst AddDealer = props => {\n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={{ name: '' }}\n      validateOnBlur={true}\n      // validate={validateAll}\n      validateOnChange={false}\n      onSubmit={async ({ name, ...values }, actions) => {\n        console.log('Values::', values);\n        console.log('ACTIONS::', actions);\n        const dealer = await props.updateDealer({\n          name,\n          handle: name\n            .split(' ')\n            .join('-')\n            .toLowerCase(),\n          ...values\n        });\n        // props.handleInitialLocation(dealer.name);\n        console.log('DEALER:::', dealer);\n\n        // try {\n        //   switch (selectedCategory) {\n        //     case 'products':\n        //       await uploadSeoContent({ handle: selectedProduct, ...values });\n        //\n        //       break;\n        //     case 'brands':\n        //       await uploadSeo({ path: 'vendor', handle: selectedBrand, seo: { ...values } });\n        //       break;\n        //     case 'collections':\n        //       await uploadSeo({ path: 'collection', handle: selectedCollection, seo: { ...values } });\n        //       break;\n        //     default:\n        //       return;\n        //   }\n        // } catch (e) {\n        //   console.log('ERROR:', e);\n        // }\n        // MyImaginaryRestApiCall(user.id, values).then(\n        // updatedUser => {\n        actions.setSubmitting(false);\n        // updateUser(updatedUser);\n        // onClose();\n        // },\n        // error => {\n        // actions.setSubmitting(false);\n        // actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n        // actions.setStatus({ msg: 'Set some arbitrary status or data' });\n        // }\n        // );\n      }}\n      render={({ errors, status, touched, isSubmitting, isValid }) => {\n        return (\n          <Form className=\"admin__form__seo\">\n            <div className=\"admin__form__seo--field\">\n              <label htmlFor=\"Location\"> Please add your first location</label>\n              <Field className=\"admin__form__seo--input\" type=\"text\" name=\"name\" placeholder=\"Name\" />\n              {errors.title && touched.title && <div className=\"admin__form__seo--error\">{errors.name}</div>}\n            </div>\n            {status && status.msg && <div className=\"admin__form__seo--status\">{status.msg}</div>}\n\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        );\n      }}\n    />\n  );\n};\nexport default class LocationsView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLocation: SelectLocationString\n    };\n  }\n\n  handleSelectedLocation = e => {\n    return this.setState({ selectedLocation: e.target.value });\n  };\n  handleInitialLocation = location => {\n    this.setState({ selectedLocation: location })\n  }\n  render() {\n    const { selectedLocation } = this.state;\n    const { loadingDealers, dealers } = this.props;\n    console.log('THE RENDER PROPS:::', this.props);\n    if (loadingDealers) {\n      return <div>Loading</div>;\n    }\n    return (\n      <div className={'admin__page__view'}>\n        {/* {!dealers || !dealers.dealers_count  ? <AddDealer {...this.state} {...this.props} /> : <DealerForm {...this.state} {...this.props} />} */}\n          {/* <DealerForm {...this.state} {...this.props} /> */}\n      <AddDealer handleInitialLocation={this.handleInitialLocation} {...this.state} {...this.props} />\n      </div>\n    );\n  }\n}\n\nLocationsView.propTypes = {\n  children: PropTypes.node,\n  updateDealer: PropTypes.func\n};\n","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport SIMPLE_PAGE_QUERY from '../../graphql/SimplePageQuery.graphql';\nimport DEALERS_QUERY from '../../graphql/Dealers.graphql';\nimport DEALER_BY_HANDLE_QUERY from '../../graphql/DealerQuery.graphql';\nimport UPDATE_DEALER from '../../graphql/UpdateDealer.graphql';\n\nimport LocationsView from './LocationsView';\n// import FormCreator from '../FormCreator';\n// import Text from '../FormCreator/FormTypes/Text';\n// import Formic from './Form';\n//\n// const LocationForm = new FormCreator({\n//   field: [<Text />]\n// });\n\nclass Locations extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <LocationsView {...this.props} />;\n  }\n}\n\n// const LocationsWithApollo = compose(\n//   graphql(DEALER_BY_HANDLE_QUERY, {\n//     options: props => {\n//       return { variables: { handle: ' ' } };\n//     },\n//     props: ({ data }) => {\n//       console.log('data', data);\n//       return { ...data };\n//     }\n//   }),\n//   graphql(SIMPLE_PAGE_QUERY, {\n//     options: () => {\n//       return { variables: { pageTitle: 'Locations' } };\n//     },\n//     props: ({ data }) => {\n//       console.log('Locations Page data', data);\n//       const { page, loading: loadingPage, error } = data;\n//       if (loadingPage && !error) {\n//         return { loadingPage, page: null };\n//       } else {\n//         return { page, loadingPage };\n//       }\n//     }\n//   }),\n//   graphql(DEALERS_QUERY, {\n//     options: () => ({\n//       variables: { first: 12, after: null }\n//     }),\n//     props: ({ data }) => {\n//       console.log('DATA:::', data);\n//       const { loading, error, dealers } = data;\n//       if (error) {\n//         return { dealersError: error };\n//       }\n//       if (loading) {\n//         return { loadingDealers: loading };\n//       }\n//       if (!loading && !error) {\n//         return { loadingDealers: loading, dealers };\n//       }\n//     }\n//   }),\n//   graphql(UPDATE_DEALER, {\n//     props: ({ mutate }) => ({\n//       updateDealer: async dealer => {\n//         try {\n//           const {\n//             data: { updateDealer }\n//           } = await mutate({\n//             variables: { dealer }\n//             // update: (proxy, { data: { updateDealer } }) => {\n//             //   try {\n//             //     console.log('UPDATE DEALER::', updateDealer);\n//             //     const data = proxy.readQuery({ query: DEALERS_QUERY, variables: { first: 12 } });\n//             //     console.log('Data::: on update::??', data);\n//             //\n//             //   } catch (e) {\n//             //     console.log('EEE', e);\n//             //   }\n//             // }\n//           });\n//           console.log('UPDATED::', updateDealer);\n//           return updateDealer;\n//         } catch (e) {\n//           console.log('ERROR UPDATING:', e);\n//         }\n//       }\n//     })\n//   })\n// )(Locations);\nexport default Locations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import Helmet from 'react-helmet';\nimport classnames from 'classnames';\nimport { MdImage, MdList, MdPerson } from 'react-icons/md';\n// import {  } from '../../common/components/global';\n// import settings from '../../../../../../settings';\nimport '../../profile/styles/profile-menu.scss';\n\nexport const isAdminVerified = props => {\n  const { currentUser } = props;\n  if (currentUser) {\n    const hasKeys = ['id', 'role', 'email'].every(el => currentUser.hasOwnProperty(el) && currentUser[el]);\n    if (hasKeys && currentUser.role === 'admin') return true;\n  }\n  return false;\n};\n\nclass ProfileMenu extends React.Component {\n  render() {\n    // const {  } = this.state;\n    const { currentView, changeView } = this.props;\n    // TODO: Hide manage links when not admin\n    return (\n      <nav className=\"profile-menu\">\n        <ul className=\"profile-menu__list\">\n          <li className=\"profile-menu__list-item\">\n            <button\n              className={classnames('profile-menu__button', {\n                'profile-menu__button--active': currentView === 'dashboard'\n              })}\n              onClick={() => changeView('dashboard')}\n            >\n              <MdPerson className=\"profile-menu__icon\" />\n              <span className=\"profile-menu__text\">Dashboard</span>\n            </button>\n          </li>\n          {/* <li className=\"profile-menu__list-item\">\n            <button\n              className={classnames('profile-menu__button', {\n                'profile-menu__button--active': currentView === 'profilePassword'\n              })}\n              onClick={() => changeView('profilePassword')}\n              // disabled\n            >\n              <MdLock className=\"profile-menu__icon\" />\n              <span className=\"profile-menu__text\">Change Password</span>\n            </button>\n          </li> */}\n          {/* <li className=\"profile-menu__list-item\">\n            <button\n              className={classnames('profile-menu__button', {\n                'profile-menu__button--active': currentView === 'profileAddress'\n              })}\n              onClick={() => changeView('profileAddress')}\n              // disabled\n            >\n              <MdPinDrop className=\"profile-menu__icon\" />\n              <span className=\"profile-menu__text\">Change Address</span>\n            </button>\n          </li> */}\n          {/* {isAdminVerified(this.props) ? (\n            <li className=\"profile-menu__list-item\">\n              <button\n                className={classnames('profile-menu__button', {\n                  'profile-menu__button--active': currentView === 'manageAdmins'\n                })}\n                onClick={() => changeView('manageAdmins')}\n                // disabled\n              >\n                <MdPeople className=\"profile-menu__icon\" />\n                <span className=\"profile-menu__text\">Manage Administrators</span>\n              </button>\n            </li>\n          ) : null} */}\n          {isAdminVerified(this.props) ? (\n            <li className=\"profile-menu__list-item\">\n              <button\n                className={classnames('profile-menu__button', {\n                  'profile-menu__button--active': currentView === 'manageCarousel'\n                })}\n                onClick={() => changeView('manageCarousel')}\n                // disabled\n              >\n                <MdImage className=\"profile-menu__icon\" />\n                <span className=\"profile-menu__text\">Manage Image Carousel</span>\n              </button>\n            </li>\n          ) : null}\n          {isAdminVerified(this.props) ? (\n            <li className=\"profile-menu__list-item\">\n              <button\n                className={classnames('profile-menu__button', {\n                  'profile-menu__button--active': currentView === 'manageSpecs'\n                })}\n                onClick={() => changeView('manageSpecs')}\n              >\n                <MdList className=\"profile-menu__icon\" />\n                <span className=\"profile-menu__text\">Manage Product Specifications</span>\n              </button>\n            </li>\n          ) : null}\n          {isAdminVerified(this.props) ? (\n            <li className=\"profile-menu__list-item\">\n              <button\n                className={classnames('profile-menu__button', {\n                  'profile-menu__button--active': currentView === 'manageSeo'\n                })}\n                onClick={() => changeView('manageSeo')}\n              >\n                <MdList className=\"profile-menu__icon\" />\n                <span className=\"profile-menu__text\">Manage Seo</span>\n              </button>\n            </li>\n          ) : null}\n          {isAdminVerified(this.props) ? (\n            <li className=\"profile-menu__list-item\">\n              <button\n                className={classnames('profile-menu__button', {\n                  'profile-menu__button--active': currentView === 'manageLocations'\n                })}\n                onClick={() => changeView('manageLocations')}\n              >\n                <MdList className=\"profile-menu__icon\" />\n                <span className=\"profile-menu__text\">Manage Locations</span>\n              </button>\n            </li>\n          ) : null}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nProfileMenu.propTypes = {\n  currentView: PropTypes.string,\n  changeView: PropTypes.func\n};\nProfileMenu.defaultProps = {};\n\nexport default ProfileMenu;\n","/*eslint-disable no-undef*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { compose } from 'react-apollo';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { FaSearch } from 'react-icons/fa';\nimport { MdPersonOutline } from 'react-icons/md';\nimport '../styles/navbar.scss';\n// import { DELETE_TOKEN, CUSTOMER_QUERY, LOGOUT_ADMIN, CURRENT_USER_QUERY } from '../../../schema';\n\n\nconst NavAccountBtns = ({ isLoggedIn, customer }) => {\n  if (typeof customer === 'undefined') return null;\n  return isLoggedIn ? (\n    // <button className=\"navbar__trigger-item navbar__trigger-item--profile\" onClick={() => signOut()}>\n    //   <MdPersonOutline size=\"1.5em\" className=\"navbar__trigger-item-icon\" />\n    //   Sign Out\n    // </button>\n    <Link className=\"navbar__trigger-item navbar__trigger-item--profile\" to=\"/profile\">\n      <MdPersonOutline size=\"1.5em\" className=\"navbar__trigger-item-icon\" />\n      Profile\n    </Link>\n  ) : (\n    <Link className=\"navbar__trigger-item navbar__trigger-item--profile\" to=\"/signin\">\n      <MdPersonOutline size=\"1.5em\" className=\"navbar__trigger-item-icon\" />\n      Sign In\n    </Link>\n  );\n};\n\nNavAccountBtns.propTypes = {\n  isLoggedIn: PropTypes.bool,\n  customer: PropTypes.object\n  // signOut: PropTypes.func\n};\n\nclass NavBar extends React.Component {\n  state = {\n    hamburgerIsOpen: false,\n    height: null,\n    width: null\n  };\n  componentDidMount() {\n    this.measureNavBar();\n    if (typeof window !== 'undefined') {\n      window.addEventListener('resize', this.measureNavBar, false);\n    }\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.measureNavBar, false);\n  }\n  saveRef = ref => (this.containerNode = ref);\n  measureNavBar = () => {\n    const { clientWidth, clientHeight } = this.containerNode;\n    this.setState({\n      width: clientWidth,\n      height: clientHeight\n    });\n  };\n  // signOut = async () => {\n  //   if (typeof window !== 'undefined') {\n  //     await this.props.deleteRemoteToken();\n  //     await this.props.refetch({ customerAccessToken: '' });\n  //     await this.props.logoutAdmin();\n  //\n  //     const { location, history } = this.props;\n  //     if (location.pathname.includes('/profile')) {\n  //       history.push('/signin');\n  //     }\n  //   }\n  // };\n  toggleHamburger = () => this.setState({ hamburgerIsOpen: !this.state.hamburgerIsOpen });\n  render() {\n    const { appName, navbarLinks, logoImage, toggleCart, cartQty, customer, customerError } = this.props;\n    const { hamburgerIsOpen, width } = this.state;\n\n    let isLoggedIn = false;\n    if (!customerError && customer && customer.hasOwnProperty('email') && customer.email) {\n      isLoggedIn = true;\n    }\n\n    return (\n      <nav ref={this.saveRef} className={classnames('admin__navbar')}>\n        {/* Logo */}\n        <div className=\"admin__navbar__header\">\n          <Link to=\"/\" className=\"admin__navbar__logo-link\">\n            <img src={width >= 1109 ? logoImage.linkLarge : logoImage.linkSmall} alt={'California Home Fitness'} />\n          </Link>\n        </div>\n        {/* Content */}\n        {/* <div className=\"\"> */}\n          {/* Collapse items */}\n          {/* <div className={classnames('', { open: hamburgerIsOpen })}>\n            {'navbarLinks' in this.props && navbarLinks.length > 0\n              ? navbarLinks.map((link, i) => {\n                  if (link.title === 'Profile' && !isLoggedIn) {\n                    return null;\n                  }\n                  return (\n                    <Link key={i} className=\"\" to={link.location}>\n                      {link.title}\n                    </Link>\n                  );\n                })\n              : null}\n          </div> */}\n          {/* Trigger items */}\n          {/* <div className=\"\"> */}\n            {/* TODO: Make login dropdown */}\n            {/* <div\n              className={classnames('', { open: hamburgerIsOpen })}\n              onClick={() => this.toggleHamburger()}\n            >\n              <span className=\"\" />\n              <span className=\"\" />\n              <span className=\"\" />\n              <span className=\"\" />\n            </div> */}\n          {/* </div> */}\n        {/* </div> */}\n      </nav>\n    );\n  }\n}\n//\n// const NavBarWithApollo = compose(\n//   CURRENT_USER_QUERY(),\n//   CUSTOMER_QUERY('network-only'),\n//   DELETE_TOKEN(),\n//   LOGOUT_ADMIN()\n// )(NavBar);\n\nNavBar.propTypes = {\n  appName: PropTypes.string,\n  navbarLinks: PropTypes.array,\n  logoImage: PropTypes.object,\n  toggleCart: PropTypes.func,\n  cartQty: PropTypes.number,\n  customer: PropTypes.object,\n  customerError: PropTypes.object\n  // deleteRemoteToken: PropTypes.func,\n  // refetch: PropTypes.func,\n  // logoutAdmin: PropTypes.func\n};\nNavBar.defaultProps = {\n  logoImage: {\n    name: 'California Home Fitness',\n    linkLarge: 'https://s3-us-west-2.amazonaws.com/chf-rcomm/logo_chf.png',\n    linkSmall: 'https://s3-us-west-2.amazonaws.com/chf-rcomm/logo_chf-icon.svg'\n  },\n  navbarLinks: [\n    { title: 'Dashboard', location: '/admin/dashboard' },\n\n  ]\n};\n\n// const NavBarWithRedux = connect(\n//   state => {\n//     return { cartQty: state.cart.cartQty };\n//   },\n//   dispatch => ({ toggleCart: () => dispatch(toggleCart()) })\n// )(NavBar);\n\nexport default withRouter(NavBar);\n","import React from 'react';\nimport { Formik, Form, Field } from 'formik';\n\nconst SeoForm = props => {\n  const {\n    seo,\n    validateAll,\n    uploadSeo,\n    uploadSeoContent,\n    selectedProduct,\n    selectedBrand,\n    selectedCollection,\n    selectedCategory,\n    valuesAvailable\n  } = props;\n  console.log('SELECTED SEO', seo);\n\n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={{\n        title: seo ? seo.title : '',\n        description: seo ? seo.description : '',\n        keywords: seo ? seo.keywords : ''\n      }}\n      validateOnBlur={true}\n      validate={validateAll}\n      validateOnChange={false}\n      onSubmit={async (values, actions) => {\n        try {\n          switch (selectedCategory) {\n            case 'products':\n              await uploadSeoContent({ handle: selectedProduct, ...values });\n\n              break;\n            case 'brands':\n              await uploadSeo({ path: 'vendor', handle: selectedBrand, seo: { ...values } });\n              break;\n            case 'collections':\n              await uploadSeo({ path: 'collection', handle: selectedCollection, seo: { ...values } });\n              break;\n            default:\n              return;\n          }\n        } catch (e) {\n          console.log('ERROR:', e);\n        }\n        // MyImaginaryRestApiCall(user.id, values).then(\n        // updatedUser => {\n        actions.setSubmitting(false);\n        // updateUser(updatedUser);\n        // onClose();\n        // },\n        // error => {\n        // actions.setSubmitting(false);\n        // actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n        // actions.setStatus({ msg: 'Set some arbitrary status or data' });\n        // }\n        // );\n      }}\n      render={({ errors, status, touched, isSubmitting, isValid }) => {\n        return (\n          <Form className=\"admin__form__seo\">\n            <div className=\"admin__form__seo--field\">\n              <Field className=\"admin__form__seo--input\" type=\"text\" name=\"title\" placeholder=\"Title\" />\n              {errors.title && touched.title && <div className=\"admin__form__seo--error\">{errors.title}</div>}\n            </div>\n            <div className=\"admin__form__seo--field\">\n              <Field\n                component=\"textarea\"\n                className=\"admin__form__seo--input\"\n                name=\"description\"\n                placeholder=\"Description\"\n              />\n              {errors.description &&\n                errors.description &&\n                touched.description && <div className=\"admin__form__seo--error\">{errors.description}</div>}\n            </div>\n            <div className=\"admin__form__seo--field\">\n              <Field className=\"admin__form__seo--input\" type=\"text\" name=\"keywords\" placeholder=\"Keywords\" />\n              {errors.keywords &&\n                errors.keywords &&\n                touched.keywords && <div className=\"admin__form__seo--error\">{errors.keywords}</div>}\n            </div>\n            {status && status.msg && <div className=\"admin__form__seo--status\">{status.msg}</div>}\n\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        );\n      }}\n    />\n  );\n};\nexport default SeoForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, compose, withApollo } from 'react-apollo';\nimport { compose as Rcompose } from 'ramda';\n// import classnames from 'classnames';\n// import { Formik, Field, Form } from 'formik';\n// import { MdClose, MdSave } from 'react-icons/md';\nimport '../../../profile/styles/manage-specs.scss';\n\nimport Loader from '../../../common/components/global/components/Loader';\nimport SeoForm from './SeoForm';\n\nimport '../../styles/forms.scss';\nimport VENDORS_QUERY from '../../../common/graphql/VendorsQuery.graphql';\n\nimport PRODUCT_SEO_QUERY from '../../graphql/ProductSeoQuery.graphql';\nimport UPLOAD_SEO_CONTENT from '../../graphql/UploadSeoContent.graphql';\nimport COLLECTIONS_QUERY from '../../graphql/CollectionsQuery.graphql';\nimport VENDOR_SEO_QUERY from '../../graphql/VendorSeoQuery.graphql';\nimport COLLECTION_SEO_QUERY from '../../graphql/CollectionSeoQuery.graphql';\nimport UPLOAD_SEO from '../../graphql/UploadSeo.graphql';\n\n// import PRODUCT_DATA_QUERY from '../../../common/graphql/ProductDataQuery.graphql';\nimport ADD_PRODUCT_DATA from '../../../common/graphql/AddProductData.graphql';\nimport UPDATE_PRODUCT_DATA from '../../../common/graphql/UpdateProductData.graphql';\nimport { ADMIN_PRODUCTS_QUERY, MODIFY_PRODUCT_DATA } from '../../../common/schema';\n// import { prodFeatures, prodSpecs } from '../../../products/components/SingleProductView';\n\nconst selectProdString = 'Select a product';\nconst selectSpecString = 'Select a specification';\nconst selectContent = 'Select a category';\nconst selectBrandString = 'Select a brand';\nconst selectCollectionString = 'Select a collection';\n// const fullSpecs = [...prodSpecs, ...prodFeatures];\nconst clearedSubmissionResult = { submissionError: null, submissionSuccess: null };\n\nclass ManageSeo extends React.Component {\n  state = {\n    currentEdit: {},\n    selectedProduct: selectProdString,\n    selectedBrand: selectBrandString,\n    selectedCollection: selectCollectionString,\n    selectedSpec: selectSpecString,\n    selectedCategory: selectContent,\n    currentCategoryValues: null,\n    categories: ['Products', 'Brands', 'Collections'],\n    specInput: '',\n    submissionError: null,\n    submissionSuccess: null\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    // const { selectedCategory } = this.state;\n    if (prevState.selectedProduct !== this.state.selectedProduct) {\n      this.loadProductSeo(this.state.selectedProduct);\n    }\n    if (this.state.selectedCategory === 'brands' && prevState.selectedBrand !== this.state.selectedBrand) {\n      this.loadBrandSeo(this.state.selectedBrand);\n      // console.log('brand', brand);\n    }\n    if (\n      this.state.selectedCategory === 'collections' &&\n      prevState.selectedCollection !== this.state.selectedCollection\n    ) {\n      this.loadCollectionSeo(this.state.selectedCollection);\n    }\n    // if (prevState.selectedCategory !== selectedCategory) {\n    //   console.log('SELECTED CAT IS DIFF', selectedCategory);\n    //   // const { productsLoading, sfy_shop, productData } = this.props;\n    //   console.log('THE PROPS::', this.props);\n    // }\n  }\n  loadProductSeo = async handle => {\n    const {\n      data: { productData }\n    } = await this.props.refetchProductData({ handle });\n    console.log('PRODUCT', productData);\n    this.setState({ currentCategoryValues: productData.seo });\n  };\n  loadCollectionSeo = async handle => {\n    const {\n      data: { collectionData }\n    } = await this.props.refetchCollectionSeo({ handle });\n    console.log('COLLECTION loaded::', collectionData);\n    this.setState({ currentCategoryValues: collectionData.seo });\n  };\n  loadBrandSeo = async handle => {\n    const {\n      data: { vendorData }\n    } = await this.props.refetchBrandSeo({ handle });\n    console.log('Brand::', vendorData);\n    this.setState({ currentCategoryValues: vendorData.seo });\n  };\n  handleProductSelect = e =>\n    this.setState({\n      selectedProduct: e.target.value,\n      selectedSpec: selectSpecString,\n      currentEdit: {},\n      ...clearedSubmissionResult\n    });\n  handleCategorySelect = e => {\n    this.setState({ selectedCategory: e.target.value.toLowerCase() });\n  };\n  handleSpecSelect = e =>\n    this.setState({\n      selectedSpec: e.target.value,\n      ...clearedSubmissionResult\n    });\n\n  handleSpecInput = e => {\n    const { currentEdit: prevEdit } = this.state;\n    const {\n      target: { name, value }\n    } = e;\n    this.setState({ currentEdit: { ...prevEdit, [name]: value } });\n  };\n\n  submitSpecs = async e => {\n    e.preventDefault();\n\n    const {\n      productData,\n      addProductData,\n      updateProductData,\n      sfy_shop: { products }\n    } = this.props;\n    const { currentEdit, selectedProduct } = this.state;\n\n    const currentSpecs = productData === null ? {} : productData;\n    const { __typename, id, ...specsToSubmit } = Object.assign(currentSpecs, currentEdit, {\n      handle: selectedProduct\n    });\n\n    let dataUpdateResult;\n    if (productData === null) {\n      // If adding a new product data to rcomm db, add sku and product name from Shopify\n      const [sfyData] = products.edges.filter(({ node }) => node.handle === selectedProduct);\n      const {\n        title,\n        vendor,\n        variants: { edges: variantEdges }\n      } = sfyData.node;\n      const { sku: _sku } = variantEdges[0].node;\n      const updatedSubmission = { ...specsToSubmit, product_name: `${vendor} ${title}`, sku: _sku };\n      dataUpdateResult = await addProductData(updatedSubmission);\n    } else {\n      dataUpdateResult = await updateProductData(specsToSubmit);\n    }\n\n    if (!dataUpdateResult) return;\n\n    if ('errors' in dataUpdateResult) {\n      return this.setState({ submissionError: dataUpdateResult.errors[0] });\n    }\n\n    if ('productData' in dataUpdateResult && dataUpdateResult.productData) {\n      const { product_name, handle } = dataUpdateResult.productData;\n      this.props.refetchProductData({ handle });\n      return this.setState({\n        submissionSuccess: `Successfully updated ${product_name}!`,\n        currentEdit: {},\n        selectedSpec: selectSpecString\n      });\n    }\n  };\n\n  renderInputValue = () => {\n    const { selectedSpec, currentEdit } = this.state;\n    const { productData } = this.props;\n    if (selectedSpec in currentEdit) return currentEdit[selectedSpec];\n    else if (productData && selectedSpec in productData) return productData[selectedSpec];\n    else return '';\n  };\n\n  handleCancelEdit = () => {\n    const { currentEdit, selectedSpec } = this.state;\n    if (selectedSpec in currentEdit) {\n      const { [selectedSpec]: removed, ...rest } = currentEdit;\n      this.setState({ currentEdit: rest });\n    }\n    return;\n  };\n\n  isDisabled = () => {\n    const { loadingProductData, productData } = this.props;\n    if (!loadingProductData && !productData) return false;\n    if (Object.keys(this.state.currentEdit).length > 0) return false;\n    return true;\n  };\n  validateTitle = (values, errors) => {\n    if (!values.title) {\n      errors.title = 'Required';\n    } else if (values.title.length > 60) {\n      errors.title = 'The title length should be under 60 characters';\n    }\n    return { values, errors };\n  };\n  validateDescription = ({ values, errors }) => {\n    if (!values.description) {\n      errors.description = 'Required';\n    } else if (values.description.length > 320) {\n      errors.description = 'Content descriptions should be 320 characters or less';\n    }\n    return { values, errors };\n  };\n  validateKeyWords = ({ values, errors }) => {\n    if (!values.keywords) {\n      errors.keywords = 'Required';\n    }\n    return { values, errors };\n  };\n  validateAll = values => {\n    let errors = {};\n    const composeValidation = Rcompose(this.validateKeyWords, this.validateDescription, this.validateTitle);\n    const validation = composeValidation(values, errors);\n    return validation.errors;\n  };\n  handleBrandSelect = e => {\n    this.setState({ selectedBrand: e.target.value });\n  };\n  handleCollectionSelect = e => {\n    this.setState({ selectedCollection: e.target.value });\n  };\n  renderSelect = category => {\n    const { selectedProduct, selectedBrand, selectedCollection } = this.state;\n    const { vendors, collections } = this.props;\n    switch (category) {\n      case 'products': {\n        const products = this.props.sfy_shop.products.edges;\n        return products ? (\n          <div>\n            <label htmlFor=\"product-select\">Please select a product to change seo values</label>\n            <select id=\"product-select\" onChange={this.handleProductSelect} value={selectedProduct}>\n              <option value={selectProdString} disabled>\n                {selectProdString}\n              </option>\n              {products\n                ? products.map(({ node }) => (\n                    <option key={node.handle} value={node.handle}>\n                      {`${node.vendor}: ${node.title}`}\n                    </option>\n                  ))\n                : null}\n            </select>\n          </div>\n        ) : null;\n      }\n      case 'brands': {\n        return (\n          <div>\n            <label htmlFor=\"product-select\">Please select a brand to change seo values</label>\n            <select id=\"product-select\" onChange={this.handleBrandSelect} value={selectedBrand}>\n              <option value={selectBrandString} disabled>\n                {selectBrandString}\n              </option>\n              {vendors\n                ? vendors.map(({ handle, name }) => (\n                    <option key={handle} value={handle}>\n                      {`${name}`}\n                    </option>\n                  ))\n                : null}\n            </select>\n          </div>\n        );\n      }\n      case 'collections': {\n        return (\n          <div>\n            <label htmlFor=\"product-select\">Please select a collection to change seo values</label>\n            <select id=\"product-select\" onChange={this.handleCollectionSelect} value={selectedCollection}>\n              <option value={selectCollectionString} disabled>\n                {selectCollectionString}\n              </option>\n              {collections\n                ? collections.map(({ node }) => (\n                    <option key={node.handle} value={node.handle}>\n                      {`${node.title}`}\n                    </option>\n                  ))\n                : null}\n            </select>\n          </div>\n        );\n      }\n      default:\n        return null;\n    }\n  };\n  currentSeoData = () => {\n    return this.state.currentCategoryValues;\n  };\n  render() {\n    const {\n      selectedProduct,\n      selectedBrand,\n      selectedCollection,\n      selectedCategory,\n      categories,\n      currentCategoryValues\n    } = this.state;\n    const { productsLoading, sfy_shop } = this.props;\n    // console.log('THE PROPS::', this.props);\n    let products = null;\n    // let seo = null;\n    if (!productsLoading && sfy_shop && 'products' in sfy_shop) {\n      if (sfy_shop.products.edges.length > 0) {\n        products = sfy_shop.products.edges;\n      }\n    }\n    // if (productData) {\n    //   seo = productData.seo;\n    // }\n    if (!products) {\n      return <Loader />;\n    }\n\n    return (\n      <section className=\"manage-specs\">\n        <div className=\"form__select-group\">\n          <label htmlFor=\"product-select\">Please select content category to update</label>\n          <select id=\"product-select\" onChange={this.handleCategorySelect} value={selectedCategory}>\n            <option value={selectedCategory} disabled>\n              {selectedCategory}\n            </option>\n            {categories.map(category => (\n              <option key={category} value={category}>\n                {category}\n              </option>\n            ))}\n          </select>\n        </div>\n        {this.renderSelect(selectedCategory)}\n\n        <SeoForm\n          seo={this.currentSeoData()}\n          validateAll={this.validateAll}\n          uploadSeoContent={this.props.uploadSeoContent}\n          uploadSeo={this.props.uploadSeo}\n          selectedProduct={selectedProduct}\n          selectedBrand={selectedBrand}\n          selectedCollection={selectedCollection}\n          selectedCategory={selectedCategory}\n          valuesAvailable={currentCategoryValues}\n        />\n      </section>\n    );\n  }\n}\n\nconst ManageSeoWithApollo = compose(\n  withApollo,\n  ADMIN_PRODUCTS_QUERY(),\n  graphql(VENDOR_SEO_QUERY, {\n    options: () => ({ variables: { handle: '' } }),\n    props: ({ data }) => {\n      // console.log('VENDOR SEO Data::', data);\n      const { loading, error, refetch } = data;\n      if (error) {\n        return { brandSeoError: error };\n      }\n      if (!loading) {\n        return { refetchBrandSeo: refetch };\n      }\n    }\n  }),\n  graphql(COLLECTION_SEO_QUERY, {\n    options: () => ({ variables: { handle: '' } }),\n    props: ({ data }) => {\n      // console.log('COLLECITON SEO DATA::', data);\n      const { loading, error, refetch } = data;\n\n      if (error) {\n        return { collectionSeoError: error };\n      }\n      if (!loading) {\n        return { loadingCollectionSeo: loading, refetchCollectionSeo: refetch };\n      }\n    }\n  }),\n  graphql(COLLECTIONS_QUERY, {\n    options: () => ({ variables: { first: 100 } }),\n    props: ({ data }) => {\n      // console.log('COLLECTIONS QUERY DATA::', data);\n      const { loading, admin_collections } = data;\n      if (!loading) {\n        const { edges } = admin_collections;\n        return { loadingCollections: loading, collections: edges };\n      }\n    }\n  }),\n  graphql(PRODUCT_SEO_QUERY, {\n    options: () => ({ variables: { handle: '' }, fetchPolicy: 'network-only' }),\n    props: ({ data }) => {\n      // console.log('PRODUCTS SEO DATA', data);\n      const { loading: loadingProductData, error, productData, refetch: refetchProductData } = data;\n      if (error) throw new Error(`Error in Related Prodcuts Query: ${error}`);\n      return { loadingProductData, productData, refetchProductData };\n    }\n  }),\n  graphql(UPLOAD_SEO, {\n    props: ({ mutate }) => ({\n      uploadSeo: async seoData => {\n        const { data } = await mutate({ variables: seoData });\n        return data.uploadSeo;\n      }\n    })\n  }),\n  graphql(UPLOAD_SEO_CONTENT, {\n    props: ({ mutate }) => ({\n      uploadSeoContent: async seoData => {\n        console.log('UPLOAD SEO DATA:', seoData);\n        const {\n          data: { updateProductSeo }\n        } = await mutate({ variables: { seo: seoData } });\n        console.log('CONTENT:', updateProductSeo);\n        return updateProductSeo;\n      }\n    })\n  }),\n  graphql(VENDORS_QUERY, {\n    props: ({ data: { loading, error, vendors } }) => {\n      if (error) throw new Error(`Error in Vendors Query: ${error}`);\n      return { loading, vendors };\n    }\n  }),\n  MODIFY_PRODUCT_DATA(ADD_PRODUCT_DATA, 'addProductData'),\n  MODIFY_PRODUCT_DATA(UPDATE_PRODUCT_DATA, 'updateProductData')\n)(ManageSeo);\n\nManageSeo.propTypes = {\n  uploadSeo: PropTypes.func,\n  refetchBrandSeo: PropTypes.func,\n  refetchCollectionSeo: PropTypes.func,\n  vendors: PropTypes.array,\n  collections: PropTypes.array,\n  productsLoading: PropTypes.bool,\n  products: PropTypes.array,\n  productSpecs: PropTypes.array,\n  refetchProductData: PropTypes.func,\n  sfy_shop: PropTypes.object,\n  productData: PropTypes.object,\n  loadingProductData: PropTypes.bool,\n  uploadSeoContent: PropTypes.func\n};\n\nexport default ManageSeoWithApollo;\n","/*eslint-disable no-unused-vars*/\nimport React from 'react';\nimport { graphql, compose } from 'react-apollo';\n\nimport AdminView from '../components/AdminView';\nimport PAGES_QUERY from '../graphql/PagesQuery.graphql';\nimport UPLOAD_CONTENT from '../graphql/UploadContent.graphql';\nimport SIMPLE_PAGE_QUERY from '../graphql/SimplePageQuery.graphql';\nimport DEALERS_QUERY from '../graphql/Dealers.graphql';\nimport DEALER_BY_HANDLE_QUERY from '../graphql/DealerQuery.graphql';\nimport UPDATE_DEALER from '../graphql/UpdateDealer.graphql';\n\nclass Admin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: new Map()\n    };\n  }\n  imageToState = images => {\n    this.setState({\n      images\n    });\n  };\n  save = (page_id, content) => {\n    // console.log('THIS.PROPS::', this.props);\n    this.props.uploadContent(9, [{}]);\n  };\n  render() {\n    console.log('The props::::', this.props);\n    return <AdminView {...this.props} save={this.save} />;\n  }\n}\nAdmin.defaultProps = {\n  images: []\n};\nconst AdminWithApollo = compose(\n  graphql(PAGES_QUERY, {\n    props: ({ data }) => {\n      const { pages, loading: loadingPages, error } = data;\n      console.log('pages', pages);\n      if (loadingPages && !error) {\n        return { loadingPages, pages: null };\n      } else {\n        return { pages, loadingPages };\n      }\n    }\n  }),\n  graphql(UPLOAD_CONTENT, {\n    props: ({ mutate }) => ({\n      uploadContent: async ({ page_id, content }) => {\n        // console.log('PAGE ID::', page_id);\n        // console.log('content::', content);\n        const {\n          data: { uploadPageContent }\n        } = await mutate({ variables: { pageContent: { page_id: page_id, content } } });\n        console.log('RETURN DATA::: ', uploadPageContent);\n        return uploadPageContent;\n      }\n    })\n  }),\n  graphql(DEALER_BY_HANDLE_QUERY, {\n    options: props => {\n      return { variables: { handle: ' ' } };\n    },\n    props: ({ data }) => {\n      console.log('data', data);\n      return { ...data };\n    }\n  }),\n  graphql(SIMPLE_PAGE_QUERY, {\n    options: () => {\n      return { variables: { pageTitle: 'Locations' } };\n    },\n    props: ({ data }) => {\n      console.log('Locations Page data', data);\n      const { page, loading: loadingPage, error } = data;\n      if (loadingPage && !error) {\n        return { loadingPage, page: null };\n      } else {\n        return { page, loadingPage };\n      }\n    }\n  }),\n  graphql(DEALERS_QUERY, {\n    options: () => ({\n      variables: { first: 12, after: 0 }\n    }),\n    props: ({ data }) => {\n      console.log('DATA:::', data);\n      const { loading, error, dealers } = data;\n      if (error) {\n        console.log('DEALERS ERROR:::', error);\n        return { dealersError: error };\n      }\n      if (loading) {\n        return { loadingDealers: loading };\n      }\n      if (!loading && !error) {\n        return { loadingDealers: loading, dealers };\n      }\n    }\n  }),\n  graphql(UPDATE_DEALER, {\n    props: ({ mutate }) => ({\n      updateDealer: async dealer => {\n        try {\n          const {\n            data: { updateDealer }\n          } = await mutate({\n            variables: { dealer }\n          });\n          console.log('UPDATED::', updateDealer);\n          return updateDealer;\n        } catch (e) {\n          console.log('ERROR UPDATING:', e);\n        }\n      }\n    }),\n    options: {\n      update: (proxy, { data: { updateDealer } }) => {\n        try {\n          console.log('UPDATE DEALER::', updateDealer);\n          // console.log('OTHER PROXY READ::', other);\n          const dealer = proxy.readQuery({ query: DEALER_BY_HANDLE_QUERY, variables: { handle: ' ' } });\n          console.log('UPDATE DEALER:', dealer);\n          const _dealer = Object.assign({}, dealer, updateDealer);\n          console.log('THE NEW _DEALER::', _dealer);\n          // proxy.writeQuery({\n          //   query: DEALER_BY_HANDLE_QUERY,\n          //   data:\n          // });\n          const test = proxy.readQuery({ query: DEALER_BY_HANDLE_QUERY, variables: { handle: 'west-hollywood' } });\n          console.log('TEST:::', test);\n          // const data = proxy.readQuery({ query: DEALERS_QUERY, variables: { first: 12, after: 0 } });\n          // console.log('DATA::', data);\n          // const _edges = data.dealers.edges;\n          // const count = data.dealers.dealers_count;\n          // const newCount = data.\n          // proxy.writeQuery({\n          //   query: DEALERS_QUERY,\n          //   data: { dealers: { dealers_count: data.dealers.edges: [...data.dealers.edges, { node: updateDealer, cursor: 0 }] } }\n          // });\n          // console.log('Data::: on update::??', data);\n        } catch (e) {\n          console.log('EEE', e);\n          // const data = proxy.writeQuery({ query: })\n        }\n      }\n    }\n  })\n)(Admin);\n\nexport default AdminWithApollo;\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"collectionSeo\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"collectionData\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"keywords\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":162}};\n    doc.loc.source = {\"body\":\"query collectionSeo($handle: String) {\\n  collectionData(handle: $handle) {\\n    id\\n    seo {\\n      handle\\n      title\\n      description\\n      keywords\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"collectionSeo\"] = oneQuery(doc, \"collectionSeo\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"admin_collections\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":{\"kind\":\"IntValue\",\"value\":\"100\"}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"admin_collections\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":156}};\n    doc.loc.source = {\"body\":\"query admin_collections($first: Int = 100) {\\n  admin_collections(first: $first) {\\n    edges {\\n      node {\\n        title\\n        handle\\n      }\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"admin_collections\"] = oneQuery(doc, \"admin_collections\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"dealerByHandle\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dealerByHandle\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerDataFrag\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":142}};\n    doc.loc.source = {\"body\":\"#import \\\"./Frags/DealerFrag.graphql\\\"\\n\\nquery dealerByHandle($handle: String) {\\n  dealerByHandle(handle: $handle) {\\n    ...DealerDataFrag\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./Frags/DealerFrag.graphql\").definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"dealerByHandle\"] = oneQuery(doc, \"dealerByHandle\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"dealers\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dealers\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dealers_count\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"cursor\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer_info\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"hasNextPage\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"end_cursor\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":246}};\n    doc.loc.source = {\"body\":\"\\nquery dealers($first: Int, $after: Int) {\\n  dealers(first: $first, after: $after) {\\n    dealers_count\\n    edges {\\n      node {\\n        id\\n        handle\\n      }\\n      cursor\\n    }\\n    dealer_info {\\n      hasNextPage\\n      end_cursor\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"dealers\"] = oneQuery(doc, \"dealers\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerDataFrag\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Dealer\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"street\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"suite\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"city\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"zip\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"state\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"country\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"phone\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"website\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"lat\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"lng\"},\"arguments\":[],\"directives\":[]}]}}],\"loc\":{\"start\":0,\"end\":145}};\n    doc.loc.source = {\"body\":\"fragment DealerDataFrag on Dealer {\\n  id\\n  handle\\n  name\\n  street\\n  suite\\n  city\\n  zip\\n  state\\n  country\\n  email\\n  phone\\n  website\\n  lat\\n  lng\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"fieldNames\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"fields\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"field_names\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"fieldNames\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_label\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_type\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_value\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":255}};\n    doc.loc.source = {\"body\":\"query page($id: ID, $pageTitle: String, $fieldNames: [[String]]) {\\n  page(id: $id, pageTitle: $pageTitle) {\\n    id\\n    title\\n    name\\n    fields(field_names: $fieldNames) {\\n      field_name\\n      field_label\\n      field_type\\n      field_value\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"page\"] = oneQuery(doc, \"page\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"pages\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"pages\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":61}};\n    doc.loc.source = {\"body\":\"query pages {\\n  pages {\\n    id\\n    title\\n    name\\n    \\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"pages\"] = oneQuery(doc, \"pages\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"productData\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"productData\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"keywords\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":138}};\n    doc.loc.source = {\"body\":\"query productData($handle: String!) {\\n  productData(handle: $handle) {\\n    seo {\\n      title\\n      description\\n      keywords\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"productData\"] = oneQuery(doc, \"productData\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"signS3\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filename\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filetype\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signS3\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filename\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filename\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filetype\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filetype\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedRequest\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":143}};\n    doc.loc.source = {\"body\":\"mutation signS3($filename: String!, $filetype: String!) {\\n  signS3(filename: $filename, filetype: $filetype) {\\n    signedRequest\\n    url\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"signS3\"] = oneQuery(doc, \"signS3\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":115}};\n    doc.loc.source = {\"body\":\"query page($id: ID, $pageTitle: String) {\\n  page(id: $id, pageTitle: $pageTitle) {\\n    id\\n    title\\n    name\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"page\"] = oneQuery(doc, \"page\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDealer\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerInput\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDealer\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerDataFrag\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":145}};\n    doc.loc.source = {\"body\":\"#import \\\"./Frags/DealerFrag.graphql\\\"\\n\\nmutation updateDealer($dealer: DealerInput) {\\n  updateDealer(dealer: $dealer){\\n    ...DealerDataFrag\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./Frags/DealerFrag.graphql\").definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"updateDealer\"] = oneQuery(doc, \"updateDealer\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"uploadContent\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContent\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageContentInput\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uploadPageContent\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContent\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContent\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"section_name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_label\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_type\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_value\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":191}};\n    doc.loc.source = {\"body\":\"mutation uploadContent($pageContent: PageContentInput) {\\n  uploadPageContent(pageContent: $pageContent) {\\n    section_name\\n    field_name\\n    field_label\\n    field_type\\n    field_value\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"uploadContent\"] = oneQuery(doc, \"uploadContent\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"uploadSeo\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"path\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SeoInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uploadSeo\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"path\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"path\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"keywords\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":183}};\n    doc.loc.source = {\"body\":\"mutation uploadSeo($path: String!, $handle: String!, $seo: SeoInput!) {\\n  uploadSeo(path: $path, handle: $handle, seo: $seo) {\\n    handle\\n    title\\n    description\\n    keywords\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"uploadSeo\"] = oneQuery(doc, \"uploadSeo\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateProductSeo\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SeoInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateProductSeo\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"keywords\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":133}};\n    doc.loc.source = {\"body\":\"mutation updateProductSeo($seo: SeoInput!) {\\n  updateProductSeo(seo: $seo) {\\n    handle\\n    title\\n    description\\n    keywords\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"updateProductSeo\"] = oneQuery(doc, \"updateProductSeo\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"vendorSeo\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"vendorData\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"seo\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"keywords\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":154}};\n    doc.loc.source = {\"body\":\"query vendorSeo($handle: String) {\\n  vendorData(handle: $handle) {\\n    id\\n    seo {\\n      handle\\n      title\\n      description\\n      keywords\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"vendorSeo\"] = oneQuery(doc, \"vendorSeo\");\n        \n","\n    var content = require(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./carousel.scss\");\n    var insertCss = require(\"!../../../../../../node_modules/isomorphic-style-loader/lib/insertCss.js\");\n\n    if (typeof content === 'string') {\n      content = [[module.id, content, '']];\n    }\n\n    module.exports = content.locals || {};\n    module.exports._getContent = function() { return content; };\n    module.exports._getCss = function() { return content.toString(); };\n    module.exports._insertCss = function(options) { return insertCss(content, options) };\n    \n    // Hot Module Replacement\n    // https://webpack.github.io/docs/hot-module-replacement\n    // Only activated in browser context\n    if (module.hot && typeof window !== 'undefined' && window.document) {\n      var removeCss = function() {};\n      module.hot.accept(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./carousel.scss\", function() {\n        content = require(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./carousel.scss\");\n\n        if (typeof content === 'string') {\n          content = [[module.id, content, '']];\n        }\n\n        removeCss = insertCss(content, { replace: true });\n      });\n      module.hot.dispose(function() { removeCss(); });\n    }\n  ","\n    var content = require(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./forms.scss\");\n    var insertCss = require(\"!../../../../../../node_modules/isomorphic-style-loader/lib/insertCss.js\");\n\n    if (typeof content === 'string') {\n      content = [[module.id, content, '']];\n    }\n\n    module.exports = content.locals || {};\n    module.exports._getContent = function() { return content; };\n    module.exports._getCss = function() { return content.toString(); };\n    module.exports._insertCss = function(options) { return insertCss(content, options) };\n    \n    // Hot Module Replacement\n    // https://webpack.github.io/docs/hot-module-replacement\n    // Only activated in browser context\n    if (module.hot && typeof window !== 'undefined' && window.document) {\n      var removeCss = function() {};\n      module.hot.accept(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./forms.scss\", function() {\n        content = require(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./forms.scss\");\n\n        if (typeof content === 'string') {\n          content = [[module.id, content, '']];\n        }\n\n        removeCss = insertCss(content, { replace: true });\n      });\n      module.hot.dispose(function() { removeCss(); });\n    }\n  ","\n    var content = require(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./main-layout.scss\");\n    var insertCss = require(\"!../../../../../../node_modules/isomorphic-style-loader/lib/insertCss.js\");\n\n    if (typeof content === 'string') {\n      content = [[module.id, content, '']];\n    }\n\n    module.exports = content.locals || {};\n    module.exports._getContent = function() { return content; };\n    module.exports._getCss = function() { return content.toString(); };\n    module.exports._insertCss = function(options) { return insertCss(content, options) };\n    \n    // Hot Module Replacement\n    // https://webpack.github.io/docs/hot-module-replacement\n    // Only activated in browser context\n    if (module.hot && typeof window !== 'undefined' && window.document) {\n      var removeCss = function() {};\n      module.hot.accept(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./main-layout.scss\", function() {\n        content = require(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./main-layout.scss\");\n\n        if (typeof content === 'string') {\n          content = [[module.id, content, '']];\n        }\n\n        removeCss = insertCss(content, { replace: true });\n      });\n      module.hot.dispose(function() { removeCss(); });\n    }\n  ","\n    var content = require(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./navbar.scss\");\n    var insertCss = require(\"!../../../../../../node_modules/isomorphic-style-loader/lib/insertCss.js\");\n\n    if (typeof content === 'string') {\n      content = [[module.id, content, '']];\n    }\n\n    module.exports = content.locals || {};\n    module.exports._getContent = function() { return content; };\n    module.exports._getCss = function() { return content.toString(); };\n    module.exports._insertCss = function(options) { return insertCss(content, options) };\n    \n    // Hot Module Replacement\n    // https://webpack.github.io/docs/hot-module-replacement\n    // Only activated in browser context\n    if (module.hot && typeof window !== 'undefined' && window.document) {\n      var removeCss = function() {};\n      module.hot.accept(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./navbar.scss\", function() {\n        content = require(\"!!../../../../../../node_modules/css-loader/index.js??ref--10-1!../../../../../../node_modules/postcss-loader/lib/index.js??ref--10-2!../../../../../../node_modules/sass-loader/lib/loader.js??ref--10-3!./navbar.scss\");\n\n        if (typeof content === 'string') {\n          content = [[module.id, content, '']];\n        }\n\n        removeCss = insertCss(content, { replace: true });\n      });\n      module.hot.dispose(function() { removeCss(); });\n    }\n  ","module.exports = require(\"axios\");","module.exports = require(\"ramda\");"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AACA;AACA;AADA;AAqBA;AACA;AACA;AACA;AACA;AACA;;;;;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAQA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AAFA;AAOA;;;;AAxCA;AACA;AA0CA;AACA;AACA;AAFA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AADA;AAWA;AACA;AACA;AACA;AAIA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAMA;AAAA;AACA;AAPA;AAQA;AAAA;AACA;AATA;AAWA;AADA;AACA;AADA;AAGA;AAAA;AAHA;AAAA;AACA;AAGA;AAJA;AACA;AAKA;AACA;AACA;AAhBA;AACA;AADA;AAFA;AAKA;AACA;;;AAYA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAGA;AAJA;AAJA;AAFA;AAeA;;;;AArCA;AACA;AAuCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAPA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAPA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAcA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAzBA;AAsDA;AACA;AACA;AAtDA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;AAVA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AA2DA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAtEA;AACA;AADA;AAAA;AACA;AAuEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AACA;AAFA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAcA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxHA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AADA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAhCA;AAmCA;AAtCA;AAwCA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AA2DA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AApBA;AAsBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA1FA;AA2FA;AACA;AADA;AAGA;AACA;AA/FA;AAgGA;AACA;AACA;AACA;AACA;AACA;AArGA;AAsGA;AACA;AACA;AACA;AACA;AA1GA;AA4GA;AACA;AACA;AACA;AACA;AACA;AAjHA;AAkHA;AAAA;AACA;AAnHA;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhJA;AAiJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3JA;AA4JA;AACA;AACA;AACA;AA/JA;AAgKA;AACA;AACA;AAlKA;AAmKA;AACA;AACA;AACA;AACA;AAvKA;AAAA;AAuKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAPA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAxKA;AAAA;AAAA;AAAA;AACA;AADA;AAmLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAPA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAcA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AApLA;AAiNA;AACA;AACA;AAnNA;AAmNA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAEA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AAAA;AAVA;AACA;AAWA;AACA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAcA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlNA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAYA;AAhBA;AAFA;AAoBA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA2KA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAFA;AAVA;AAmBA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AA7BA;AAkCA;;;;AAnSA;AACA;AAoSA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;;;;;;;;AC7UA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AARA;AADA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAzBA;AADA;AAFA;AADA;AADA;AALA;AATA;AAuDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AAFA;AACA;AAJA;AAGA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AARA;AAaA;AAlEA;AAqEA;AACA;AAAA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAQA;AACA;AACA;AAVA;AAWA;AACA;AACA;AAXA;AACA;AADA;AAFA;AAKA;AACA;;;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAHA;AAMA;;;;AA5BA;AACA;AADA;AACA;AACA;AA6BA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;;;;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AAiDA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AARA;AADA;AAaA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AA3FA;AADA;AA2GA;;;;AAjHA;AACA;AAmHA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AACA;AADA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AAcA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAaA;AAAA;;;;;AA7BA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAFA;AAwCA;;;;AAtFA;AAwFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACrKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAgBA;AACA;AAlBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAAA;AAAA;AAAA;AATA;AAWA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAxBA;AA6BA;AAzEA;AA4EA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAmCA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAMA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AAEA;AADA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAWA;AAXA;AAaA;AADA;AAIA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AAiBA;AAlBA;AAmBA;AAAA;AAAA;AAnBA;AAyBA;AACA;AA1BA;AAAA;AACA;AADA;AA2BA;AA3BA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AA6BA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAuCA;AAxCA;AA0CA;AACA;AACA;AAHA;AACA;AA1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAgDA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AADA;AADA;AALA;AAFA;AAgBA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AAFA;AAgBA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AAFA;AAgBA;AACA;AACA;AA5DA;AA8DA;AAEA;AACA;;;;;AAhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA6NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AADA;AADA;AAJA;AAFA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAhBA;AA6BA;;;;AAvTA;AACA;AAyTA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAOA;AACA;AADA;AAGA;AACA;AAXA;AAYA;AACA;AACA;AACA;AAbA;AACA;AADA;AAFA;AAKA;AACA;;;AASA;AACA;AACA;AACA;;;;AAnBA;AACA;AAoBA;AACA;AADA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AANA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAcA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AACA;AALA;AAAA;AAGA;AACA;AAGA;AAPA;AACA;AADA;AAAA;AAAA;AACA;AASA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAeA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAhBA;AACA;AAiDA;;;;;;;ACznnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvnnnnnpnnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnnsourceRoot":""}