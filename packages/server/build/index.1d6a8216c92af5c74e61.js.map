{"version":3,"file":"index.36fbc0b76b8662c05136.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/Form.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/LocationsView.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/index.js","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Seo/index.js","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/containers/Dashboard.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/DealerQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/Dealers.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/Frags/DealerFrag.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/PageQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/SimplePageQuery.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/UpdateDealer.graphql","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/user/containers/Auth.web.jsx","src/modules/admin/resolvers.js","src/modules/admin/sql.js","src/modules/dealers/index.js","src/modules/dealers/resolvers.js","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/server/src/modules/dealers/schema.graphql","src/modules/dealers/sql.js","src/modules/index.ts"],"sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\nconst Formic = props => {\n  console.log('FORM PROPS', props);\n  return (\n    <div>\n      <div className={'select'}>\n        <label htmlFor=\"\">Please select a location</label>\n        <select name=\"\" id=\"\" value={props.selectedLocation}>\n          <option value={props.selectedLocation} disabled>\n            {props.selectedLocation}\n          </option>\n        </select>\n      </div>\n      <Formik\n        initialValues={{ dealers: ['jared', 'ian', 'brent'] }}\n        onSubmit={values => {\n          console.log('VALUES::', values);\n        }}\n        render={({ values }) => (\n          <Form>\n            <FieldArray\n              name=\"friends\"\n              render={arrayHelpers => (\n                <div>\n                  {values.friends && values.friends.length > 0 ? (\n                    values.friends.map((friend, index) => (\n                      <div key={index}>\n                        <Field name={`friends.${index}`} />\n                        <button\n                          type=\"button\"\n                          onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                        >\n                          -\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                        >\n                          +\n                        </button>\n                      </div>\n                    ))\n                  ) : (\n                    <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                      {/* show this when user has removed all friends from the list */}\n                      Add a friend\n                    </button>\n                  )}\n                  <div>\n                    <button type=\"submit\">Submit</button>\n                  </div>\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\nexport default Formic;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, Field, FieldArray, Form } from 'formik';\n// import FormCreator from '../FormCreator';\n// import Text from '../FormCreator/FormTypes/Text';\nimport DealerForm from './Form';\n//\n// const LocationForm = new FormCreator({\n//   field: [<Text />]\n// });\nconst SelectLocationString = 'Please select a location';\nconst AddDealer = props => {\n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={{ name: '' }}\n      validateOnBlur={true}\n      // validate={validateAll}\n      validateOnChange={false}\n      onSubmit={async ({ name, ...values }, actions) => {\n        console.log('Values::', values);\n        const dealer = await props.updateDealer({\n          name,\n          handle: name\n            .split(' ')\n            .join('-')\n            .toLowerCase(),\n          ...values\n        });\n        props.handleInitialLocation(dealer.name);\n        console.log('DEALER:::', dealer);\n\n        // try {\n        //   switch (selectedCategory) {\n        //     case 'products':\n        //       await uploadSeoContent({ handle: selectedProduct, ...values });\n        //\n        //       break;\n        //     case 'brands':\n        //       await uploadSeo({ path: 'vendor', handle: selectedBrand, seo: { ...values } });\n        //       break;\n        //     case 'collections':\n        //       await uploadSeo({ path: 'collection', handle: selectedCollection, seo: { ...values } });\n        //       break;\n        //     default:\n        //       return;\n        //   }\n        // } catch (e) {\n        //   console.log('ERROR:', e);\n        // }\n        // MyImaginaryRestApiCall(user.id, values).then(\n        // updatedUser => {\n        actions.setSubmitting(false);\n        // updateUser(updatedUser);\n        // onClose();\n        // },\n        // error => {\n        // actions.setSubmitting(false);\n        // actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n        // actions.setStatus({ msg: 'Set some arbitrary status or data' });\n        // }\n        // );\n      }}\n      render={({ errors, status, touched, isSubmitting, isValid }) => {\n        return (\n          <Form className=\"admin__form__seo\">\n            <div className=\"admin__form__seo--field\">\n              <label htmlFor=\"Location\"> Please add your first location</label>\n              <Field className=\"admin__form__seo--input\" type=\"text\" name=\"name\" placeholder=\"Name\" />\n              {errors.title && touched.title && <div className=\"admin__form__seo--error\">{errors.name}</div>}\n            </div>\n            {status && status.msg && <div className=\"admin__form__seo--status\">{status.msg}</div>}\n\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        );\n      }}\n    />\n  );\n};\nexport default class LocationsView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLocation: SelectLocationString\n    };\n  }\n\n  handleSelectedLocation = e => {\n    return this.setState({ selectedLocation: e.target.value });\n  };\n  handleInitialLocation = location => {\n    this.setState({ selectedLocation: location })\n  }\n  render() {\n    const { selectedLocation } = this.state;\n    const { loadingDealers, dealers } = this.props;\n    console.log('THE RENDER PROPS:::', this.props);\n    if (loadingDealers) {\n      return <div>Loading</div>;\n    }\n    return (\n      <div className={'admin__page__view'}>\n        {/* {!dealers || !dealers.dealers_count  ? <AddDealer {...this.state} {...this.props} /> : <DealerForm {...this.state} {...this.props} />} */}\n          {/* <DealerForm {...this.state} {...this.props} /> */}\n      <AddDealer handleInitialLocation={this.handleInitialLocation} {...this.state} {...this.props} />\n      </div>\n    );\n  }\n}\n\nLocationsView.propTypes = {\n  children: PropTypes.node,\n  updateDealer: PropTypes.func\n};\n","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport SIMPLE_PAGE_QUERY from '../../graphql/SimplePageQuery.graphql';\nimport DEALERS_QUERY from '../../graphql/Dealers.graphql';\nimport DEALER_BY_HANDLE_QUERY from '../../graphql/DealerQuery.graphql';\nimport UPDATE_DEALER from '../../graphql/UpdateDealer.graphql';\n\nimport LocationsView from './LocationsView';\n// import FormCreator from '../FormCreator';\n// import Text from '../FormCreator/FormTypes/Text';\n// import Formic from './Form';\n//\n// const LocationForm = new FormCreator({\n//   field: [<Text />]\n// });\n\nclass Locations extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <LocationsView {...this.props} />;\n  }\n}\n\n// const LocationsWithApollo = compose(\n//   graphql(DEALER_BY_HANDLE_QUERY, {\n//     options: props => {\n//       return { variables: { handle: ' ' } };\n//     },\n//     props: ({ data }) => {\n//       console.log('data', data);\n//       return { ...data };\n//     }\n//   }),\n//   graphql(SIMPLE_PAGE_QUERY, {\n//     options: () => {\n//       return { variables: { pageTitle: 'Locations' } };\n//     },\n//     props: ({ data }) => {\n//       console.log('Locations Page data', data);\n//       const { page, loading: loadingPage, error } = data;\n//       if (loadingPage && !error) {\n//         return { loadingPage, page: null };\n//       } else {\n//         return { page, loadingPage };\n//       }\n//     }\n//   }),\n//   graphql(DEALERS_QUERY, {\n//     options: () => ({\n//       variables: { first: 12, after: null }\n//     }),\n//     props: ({ data }) => {\n//       console.log('DATA:::', data);\n//       const { loading, error, dealers } = data;\n//       if (error) {\n//         return { dealersError: error };\n//       }\n//       if (loading) {\n//         return { loadingDealers: loading };\n//       }\n//       if (!loading && !error) {\n//         return { loadingDealers: loading, dealers };\n//       }\n//     }\n//   }),\n//   graphql(UPDATE_DEALER, {\n//     props: ({ mutate }) => ({\n//       updateDealer: async dealer => {\n//         try {\n//           const {\n//             data: { updateDealer }\n//           } = await mutate({\n//             variables: { dealer }\n//             // update: (proxy, { data: { updateDealer } }) => {\n//             //   try {\n//             //     console.log('UPDATE DEALER::', updateDealer);\n//             //     const data = proxy.readQuery({ query: DEALERS_QUERY, variables: { first: 12 } });\n//             //     console.log('Data::: on update::??', data);\n//             //\n//             //   } catch (e) {\n//             //     console.log('EEE', e);\n//             //   }\n//             // }\n//           });\n//           console.log('UPDATED::', updateDealer);\n//           return updateDealer;\n//         } catch (e) {\n//           console.log('ERROR UPDATING:', e);\n//         }\n//       }\n//     })\n//   })\n// )(Locations);\nexport default Locations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, compose, withApollo } from 'react-apollo';\nimport { compose as Rcompose } from 'ramda';\n// import classnames from 'classnames';\n// import { Formik, Field, Form } from 'formik';\n// import { MdClose, MdSave } from 'react-icons/md';\nimport '../../../profile/styles/manage-specs.scss';\n\nimport Loader from '../../../common/components/global/components/Loader';\nimport SeoForm from './SeoForm';\n\nimport '../../styles/forms.scss';\nimport VENDORS_QUERY from '../../../common/graphql/VendorsQuery.graphql';\n\nimport PRODUCT_SEO_QUERY from '../../graphql/ProductSeoQuery.graphql';\nimport UPLOAD_SEO_CONTENT from '../../graphql/UploadSeoContent.graphql';\nimport COLLECTIONS_QUERY from '../../graphql/CollectionsQuery.graphql';\nimport VENDOR_SEO_QUERY from '../../graphql/VendorSeoQuery.graphql';\nimport COLLECTION_SEO_QUERY from '../../graphql/CollectionSeoQuery.graphql';\nimport UPLOAD_SEO from '../../graphql/UploadSeo.graphql';\n\n// import PRODUCT_DATA_QUERY from '../../../common/graphql/ProductDataQuery.graphql';\nimport ADD_PRODUCT_DATA from '../../../common/graphql/AddProductData.graphql';\nimport UPDATE_PRODUCT_DATA from '../../../common/graphql/UpdateProductData.graphql';\nimport { ADMIN_PRODUCTS_QUERY, MODIFY_PRODUCT_DATA } from '../../../common/schema';\n// import { prodFeatures, prodSpecs } from '../../../products/components/SingleProductView';\n\nconst selectProdString = 'Select a product';\nconst selectSpecString = 'Select a specification';\nconst selectContent = 'Select a category';\nconst selectBrandString = 'Select a brand';\nconst selectCollectionString = 'Select a collection';\n// const fullSpecs = [...prodSpecs, ...prodFeatures];\nconst clearedSubmissionResult = { submissionError: null, submissionSuccess: null };\n\nclass ManageSeo extends React.Component {\n  state = {\n    currentEdit: {},\n    selectedProduct: selectProdString,\n    selectedBrand: selectBrandString,\n    selectedCollection: selectCollectionString,\n    selectedSpec: selectSpecString,\n    selectedCategory: selectContent,\n    currentCategoryValues: null,\n    categories: ['Products', 'Brands', 'Collections'],\n    specInput: '',\n    submissionError: null,\n    submissionSuccess: null\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    // const { selectedCategory } = this.state;\n    if (prevState.selectedProduct !== this.state.selectedProduct) {\n      this.loadProductSeo(this.state.selectedProduct);\n    }\n    if (this.state.selectedCategory === 'brands' && prevState.selectedBrand !== this.state.selectedBrand) {\n      this.loadBrandSeo(this.state.selectedBrand);\n      // console.log('brand', brand);\n    }\n    if (\n      this.state.selectedCategory === 'collections' &&\n      prevState.selectedCollection !== this.state.selectedCollection\n    ) {\n      this.loadCollectionSeo(this.state.selectedCollection);\n    }\n    // if (prevState.selectedCategory !== selectedCategory) {\n    //   console.log('SELECTED CAT IS DIFF', selectedCategory);\n    //   // const { productsLoading, sfy_shop, productData } = this.props;\n    //   console.log('THE PROPS::', this.props);\n    // }\n  }\n  loadProductSeo = async handle => {\n    const {\n      data: { productData }\n    } = await this.props.refetchProductData({ handle });\n    console.log('PRODUCT', productData);\n    this.setState({ currentCategoryValues: productData.seo });\n  };\n  loadCollectionSeo = async handle => {\n    const {\n      data: { collectionData }\n    } = await this.props.refetchCollectionSeo({ handle });\n    console.log('COLLECTION loaded::', collectionData);\n    this.setState({ currentCategoryValues: collectionData.seo });\n  };\n  loadBrandSeo = async handle => {\n    const {\n      data: { vendorData }\n    } = await this.props.refetchBrandSeo({ handle });\n    console.log('Brand::', vendorData);\n    this.setState({ currentCategoryValues: vendorData.seo });\n  };\n  handleProductSelect = e =>\n    this.setState({\n      selectedProduct: e.target.value,\n      selectedSpec: selectSpecString,\n      currentEdit: {},\n      ...clearedSubmissionResult\n    });\n  handleCategorySelect = e => {\n    this.setState({ selectedCategory: e.target.value.toLowerCase() });\n  };\n  handleSpecSelect = e =>\n    this.setState({\n      selectedSpec: e.target.value,\n      ...clearedSubmissionResult\n    });\n\n  handleSpecInput = e => {\n    const { currentEdit: prevEdit } = this.state;\n    const {\n      target: { name, value }\n    } = e;\n    this.setState({ currentEdit: { ...prevEdit, [name]: value } });\n  };\n\n  submitSpecs = async e => {\n    e.preventDefault();\n\n    const {\n      productData,\n      addProductData,\n      updateProductData,\n      sfy_shop: { products }\n    } = this.props;\n    const { currentEdit, selectedProduct } = this.state;\n\n    const currentSpecs = productData === null ? {} : productData;\n    const { __typename, id, ...specsToSubmit } = Object.assign(currentSpecs, currentEdit, {\n      handle: selectedProduct\n    });\n\n    let dataUpdateResult;\n    if (productData === null) {\n      // If adding a new product data to rcomm db, add sku and product name from Shopify\n      const [sfyData] = products.edges.filter(({ node }) => node.handle === selectedProduct);\n      const {\n        title,\n        vendor,\n        variants: { edges: variantEdges }\n      } = sfyData.node;\n      const { sku: _sku } = variantEdges[0].node;\n      const updatedSubmission = { ...specsToSubmit, product_name: `${vendor} ${title}`, sku: _sku };\n      dataUpdateResult = await addProductData(updatedSubmission);\n    } else {\n      dataUpdateResult = await updateProductData(specsToSubmit);\n    }\n\n    if (!dataUpdateResult) return;\n\n    if ('errors' in dataUpdateResult) {\n      return this.setState({ submissionError: dataUpdateResult.errors[0] });\n    }\n\n    if ('productData' in dataUpdateResult && dataUpdateResult.productData) {\n      const { product_name, handle } = dataUpdateResult.productData;\n      this.props.refetchProductData({ handle });\n      return this.setState({\n        submissionSuccess: `Successfully updated ${product_name}!`,\n        currentEdit: {},\n        selectedSpec: selectSpecString\n      });\n    }\n  };\n\n  renderInputValue = () => {\n    const { selectedSpec, currentEdit } = this.state;\n    const { productData } = this.props;\n    if (selectedSpec in currentEdit) return currentEdit[selectedSpec];\n    else if (productData && selectedSpec in productData) return productData[selectedSpec];\n    else return '';\n  };\n\n  handleCancelEdit = () => {\n    const { currentEdit, selectedSpec } = this.state;\n    if (selectedSpec in currentEdit) {\n      const { [selectedSpec]: removed, ...rest } = currentEdit;\n      this.setState({ currentEdit: rest });\n    }\n    return;\n  };\n\n  isDisabled = () => {\n    const { loadingProductData, productData } = this.props;\n    if (!loadingProductData && !productData) return false;\n    if (Object.keys(this.state.currentEdit).length > 0) return false;\n    return true;\n  };\n  validateTitle = (values, errors) => {\n    if (!values.title) {\n      errors.title = 'Required';\n    } else if (values.title.length > 60) {\n      errors.title = 'The title length should be under 60 characters';\n    }\n    return { values, errors };\n  };\n  validateDescription = ({ values, errors }) => {\n    if (!values.description) {\n      errors.description = 'Required';\n    } else if (values.description.length > 320) {\n      errors.description = 'Content descriptions should be 320 characters or less';\n    }\n    return { values, errors };\n  };\n  validateKeyWords = ({ values, errors }) => {\n    if (!values.keywords) {\n      errors.keywords = 'Required';\n    }\n    return { values, errors };\n  };\n  validateAll = values => {\n    let errors = {};\n    const composeValidation = Rcompose(this.validateKeyWords, this.validateDescription, this.validateTitle);\n    const validation = composeValidation(values, errors);\n    return validation.errors;\n  };\n  handleBrandSelect = e => {\n    this.setState({ selectedBrand: e.target.value });\n  };\n  handleCollectionSelect = e => {\n    this.setState({ selectedCollection: e.target.value });\n  };\n  renderSelect = category => {\n    const { selectedProduct, selectedBrand, selectedCollection } = this.state;\n    const { vendors, collections } = this.props;\n    switch (category) {\n      case 'products': {\n        const products = this.props.sfy_shop.products.edges;\n        return products ? (\n          <div>\n            <label htmlFor=\"product-select\">Please select a product to change seo values</label>\n            <select id=\"product-select\" onChange={this.handleProductSelect} value={selectedProduct}>\n              <option value={selectProdString} disabled>\n                {selectProdString}\n              </option>\n              {products\n                ? products.map(({ node }) => (\n                    <option key={node.handle} value={node.handle}>\n                      {`${node.vendor}: ${node.title}`}\n                    </option>\n                  ))\n                : null}\n            </select>\n          </div>\n        ) : null;\n      }\n      case 'brands': {\n        return (\n          <div>\n            <label htmlFor=\"product-select\">Please select a brand to change seo values</label>\n            <select id=\"product-select\" onChange={this.handleBrandSelect} value={selectedBrand}>\n              <option value={selectBrandString} disabled>\n                {selectBrandString}\n              </option>\n              {vendors\n                ? vendors.map(({ handle, name }) => (\n                    <option key={handle} value={handle}>\n                      {`${name}`}\n                    </option>\n                  ))\n                : null}\n            </select>\n          </div>\n        );\n      }\n      case 'collections': {\n        return (\n          <div>\n            <label htmlFor=\"product-select\">Please select a collection to change seo values</label>\n            <select id=\"product-select\" onChange={this.handleCollectionSelect} value={selectedCollection}>\n              <option value={selectCollectionString} disabled>\n                {selectCollectionString}\n              </option>\n              {collections\n                ? collections.map(({ node }) => (\n                    <option key={node.handle} value={node.handle}>\n                      {`${node.title}`}\n                    </option>\n                  ))\n                : null}\n            </select>\n          </div>\n        );\n      }\n      default:\n        return null;\n    }\n  };\n  currentSeoData = () => {\n    return this.state.currentCategoryValues;\n  };\n  render() {\n    const {\n      selectedProduct,\n      selectedBrand,\n      selectedCollection,\n      selectedCategory,\n      categories,\n      currentCategoryValues\n    } = this.state;\n    const { productsLoading, sfy_shop } = this.props;\n    // console.log('THE PROPS::', this.props);\n    let products = null;\n    // let seo = null;\n    if (!productsLoading && sfy_shop && 'products' in sfy_shop) {\n      if (sfy_shop.products.edges.length > 0) {\n        products = sfy_shop.products.edges;\n      }\n    }\n    // if (productData) {\n    //   seo = productData.seo;\n    // }\n    if (!products) {\n      return <Loader />;\n    }\n\n    return (\n      <section className=\"manage-specs\">\n        <div className=\"form__select-group\">\n          <label htmlFor=\"product-select\">Please select content category to update</label>\n          <select id=\"product-select\" onChange={this.handleCategorySelect} value={selectedCategory}>\n            <option value={selectedCategory} disabled>\n              {selectedCategory}\n            </option>\n            {categories.map(category => (\n              <option key={category} value={category}>\n                {category}\n              </option>\n            ))}\n          </select>\n        </div>\n        {this.renderSelect(selectedCategory)}\n\n        <SeoForm\n          seo={this.currentSeoData()}\n          validateAll={this.validateAll}\n          uploadSeoContent={this.props.uploadSeoContent}\n          uploadSeo={this.props.uploadSeo}\n          selectedProduct={selectedProduct}\n          selectedBrand={selectedBrand}\n          selectedCollection={selectedCollection}\n          selectedCategory={selectedCategory}\n          valuesAvailable={currentCategoryValues}\n        />\n      </section>\n    );\n  }\n}\n\nconst ManageSeoWithApollo = compose(\n  withApollo,\n  ADMIN_PRODUCTS_QUERY(),\n  graphql(VENDOR_SEO_QUERY, {\n    options: () => ({ variables: { handle: '' } }),\n    props: ({ data }) => {\n      // console.log('VENDOR SEO Data::', data);\n      const { loading, error, refetch } = data;\n      if (error) {\n        return { brandSeoError: error };\n      }\n      if (!loading) {\n        return { refetchBrandSeo: refetch };\n      }\n    }\n  }),\n  graphql(COLLECTION_SEO_QUERY, {\n    options: () => ({ variables: { handle: '' } }),\n    props: ({ data }) => {\n      // console.log('COLLECITON SEO DATA::', data);\n      const { loading, error, refetch } = data;\n\n      if (error) {\n        return { collectionSeoError: error };\n      }\n      if (!loading) {\n        return { loadingCollectionSeo: loading, refetchCollectionSeo: refetch };\n      }\n    }\n  }),\n  graphql(COLLECTIONS_QUERY, {\n    options: () => ({ variables: { first: 100 } }),\n    props: ({ data }) => {\n      // console.log('COLLECTIONS QUERY DATA::', data);\n      const { loading, admin_collections } = data;\n      if (!loading) {\n        const { edges } = admin_collections;\n        return { loadingCollections: loading, collections: edges };\n      }\n    }\n  }),\n  graphql(PRODUCT_SEO_QUERY, {\n    options: () => ({ variables: { handle: '' }, fetchPolicy: 'network-only' }),\n    props: ({ data }) => {\n      // console.log('PRODUCTS SEO DATA', data);\n      const { loading: loadingProductData, error, productData, refetch: refetchProductData } = data;\n      if (error) throw new Error(`Error in Related Prodcuts Query: ${error}`);\n      return { loadingProductData, productData, refetchProductData };\n    }\n  }),\n  graphql(UPLOAD_SEO, {\n    props: ({ mutate }) => ({\n      uploadSeo: async seoData => {\n        const { data } = await mutate({ variables: seoData });\n        return data.uploadSeo;\n      }\n    })\n  }),\n  graphql(UPLOAD_SEO_CONTENT, {\n    props: ({ mutate }) => ({\n      uploadSeoContent: async seoData => {\n        console.log('UPLOAD SEO DATA:', seoData);\n        const {\n          data: { updateProductSeo }\n        } = await mutate({ variables: { seo: seoData } });\n        console.log('CONTENT:', updateProductSeo);\n        return updateProductSeo;\n      }\n    })\n  }),\n  graphql(VENDORS_QUERY, {\n    props: ({ data: { loading, error, vendors } }) => {\n      if (error) throw new Error(`Error in Vendors Query: ${error}`);\n      return { loading, vendors };\n    }\n  }),\n  MODIFY_PRODUCT_DATA(ADD_PRODUCT_DATA, 'addProductData'),\n  MODIFY_PRODUCT_DATA(UPDATE_PRODUCT_DATA, 'updateProductData')\n)(ManageSeo);\n\nManageSeo.propTypes = {\n  uploadSeo: PropTypes.func,\n  refetchBrandSeo: PropTypes.func,\n  refetchCollectionSeo: PropTypes.func,\n  vendors: PropTypes.array,\n  collections: PropTypes.array,\n  productsLoading: PropTypes.bool,\n  products: PropTypes.array,\n  productSpecs: PropTypes.array,\n  refetchProductData: PropTypes.func,\n  sfy_shop: PropTypes.object,\n  productData: PropTypes.object,\n  loadingProductData: PropTypes.bool,\n  uploadSeoContent: PropTypes.func\n};\n\nexport default ManageSeoWithApollo;\n","/*eslint-disable no-unused-vars*/\nimport React from 'react';\nimport { graphql, compose } from 'react-apollo';\n\nimport AdminView from '../components/AdminView';\nimport PAGES_QUERY from '../graphql/PagesQuery.graphql';\nimport UPLOAD_CONTENT from '../graphql/UploadContent.graphql';\nimport SIMPLE_PAGE_QUERY from '../graphql/SimplePageQuery.graphql';\nimport DEALERS_QUERY from '../graphql/Dealers.graphql';\nimport DEALER_BY_HANDLE_QUERY from '../graphql/DealerQuery.graphql';\nimport UPDATE_DEALER from '../graphql/UpdateDealer.graphql';\n\nclass Admin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: new Map()\n    };\n  }\n  imageToState = images => {\n    this.setState({\n      images\n    });\n  };\n  save = (page_id, content) => {\n    // console.log('THIS.PROPS::', this.props);\n    this.props.uploadContent(9, [{}]);\n  };\n  render() {\n    return <AdminView {...this.props} save={this.save} />;\n  }\n}\nAdmin.defaultProps = {\n  images: []\n};\nconst AdminWithApollo = compose(\n  graphql(PAGES_QUERY, {\n    props: ({ data }) => {\n      const { pages, loading: loadingPages, error } = data;\n      console.log('pages', pages);\n      if (loadingPages && !error) {\n        return { loadingPages, pages: null };\n      } else {\n        return { pages, loadingPages };\n      }\n    }\n  }),\n  graphql(UPLOAD_CONTENT, {\n    props: ({ mutate }) => ({\n      uploadContent: async ({ page_id, content }) => {\n        // console.log('PAGE ID::', page_id);\n        // console.log('content::', content);\n        const {\n          data: { uploadPageContent }\n        } = await mutate({ variables: { pageContent: { page_id: page_id, content } } });\n        console.log('RETURN DATA::: ', uploadPageContent);\n        return uploadPageContent;\n      }\n    })\n  }),\n  graphql(DEALER_BY_HANDLE_QUERY, {\n    options: props => {\n      return { variables: { handle: ' ' } };\n    },\n    props: ({ data }) => {\n      console.log('data', data);\n      return { ...data };\n    }\n  }),\n  graphql(SIMPLE_PAGE_QUERY, {\n    options: () => {\n      return { variables: { pageTitle: 'Locations' } };\n    },\n    props: ({ data }) => {\n      console.log('Locations Page data', data);\n      const { page, loading: loadingPage, error } = data;\n      if (loadingPage && !error) {\n        return { loadingPage, page: null };\n      } else {\n        return { page, loadingPage };\n      }\n    }\n  }),\n  graphql(DEALERS_QUERY, {\n    options: () => ({\n      variables: { first: 12, after: null }\n    }),\n    props: ({ data }) => {\n      console.log('DATA:::', data);\n      const { loading, error, dealers } = data;\n      if (error) {\n        return { dealersError: error };\n      }\n      if (loading) {\n        return { loadingDealers: loading };\n      }\n      if (!loading && !error) {\n        return { loadingDealers: loading, dealers };\n      }\n    }\n  }),\n  graphql(UPDATE_DEALER, {\n    props: ({ mutate }) => ({\n      updateDealer: async dealer => {\n        try {\n          const {\n            data: { updateDealer }\n          } = await mutate({\n            variables: { dealer },\n            update: (proxy, { data: { updateDealer } }) => {\n              try {\n                console.log('UPDATE DEALER::', updateDealer);\n                const data = proxy.readQuery({ query: DEALERS_QUERY, variables: { first: 12 } });\n                console.log('Data::: on update::??', data);\n\n              } catch (e) {\n                console.log('EEE', e);\n              }\n            }\n          });\n          console.log('UPDATED::', updateDealer);\n          return updateDealer;\n        } catch (e) {\n          console.log('ERROR UPDATING:', e);\n        }\n      }\n    })\n  })\n)(Admin);\n\nexport default AdminWithApollo;\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"dealerByHandle\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dealerByHandle\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerDataFrag\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":142}};\n    doc.loc.source = {\"body\":\"#import \\\"./Frags/DealerFrag.graphql\\\"\\n\\nquery dealerByHandle($handle: String) {\\n  dealerByHandle(handle: $handle) {\\n    ...DealerDataFrag\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./Frags/DealerFrag.graphql\").definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"dealerByHandle\"] = oneQuery(doc, \"dealerByHandle\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"allDealers\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":{\"kind\":\"IntValue\",\"value\":\"12\"}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dealers\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dealers_count\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"cursor\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":195}};\n    doc.loc.source = {\"body\":\"\\nquery allDealers($first: Int = 12, $after: Int) {\\n  dealers(first: $first, after: $after) {\\n    dealers_count\\n    edges {\\n      node {\\n        id\\n        handle\\n      }\\n      cursor\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"allDealers\"] = oneQuery(doc, \"allDealers\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerDataFrag\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Dealer\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"street\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"suite\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"city\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"zip\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"state\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"country\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"phone\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"website\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"lat\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"lng\"},\"arguments\":[],\"directives\":[]}]}}],\"loc\":{\"start\":0,\"end\":145}};\n    doc.loc.source = {\"body\":\"fragment DealerDataFrag on Dealer {\\n  id\\n  handle\\n  name\\n  street\\n  suite\\n  city\\n  zip\\n  state\\n  country\\n  email\\n  phone\\n  website\\n  lat\\n  lng\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"fieldNames\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"fields\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"field_names\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"fieldNames\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_label\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_type\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"field_value\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":255}};\n    doc.loc.source = {\"body\":\"query page($id: ID, $pageTitle: String, $fieldNames: [[String]]) {\\n  page(id: $id, pageTitle: $pageTitle) {\\n    id\\n    title\\n    name\\n    fields(field_names: $fieldNames) {\\n      field_name\\n      field_label\\n      field_type\\n      field_value\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"page\"] = oneQuery(doc, \"page\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageTitle\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":115}};\n    doc.loc.source = {\"body\":\"query page($id: ID, $pageTitle: String) {\\n  page(id: $id, pageTitle: $pageTitle) {\\n    id\\n    title\\n    name\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"page\"] = oneQuery(doc, \"page\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDealer\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerInput\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDealer\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerDataFrag\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":145}};\n    doc.loc.source = {\"body\":\"#import \\\"./Frags/DealerFrag.graphql\\\"\\n\\nmutation updateDealer($dealer: DealerInput) {\\n  updateDealer(dealer: $dealer){\\n    ...DealerDataFrag\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require(\"./Frags/DealerFrag.graphql\").definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"updateDealer\"] = oneQuery(doc, \"updateDealer\");\n        \n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { withLoadedUser } from './AuthBase';\n\nconst AuthRoute = withLoadedUser(\n  ({ currentUser, role, redirect = '/admin/login', redirectOnLoggedIn, component: Component, ...rest }) => {\n    const RenderComponent = props => {\n      console.log('CURRENTUER:::', currentUser, role);\n      // The users is not logged in\n      if (redirectOnLoggedIn && currentUser) {\n        return <Redirect to={{ pathname: redirect }} />;\n      }\n\n      return isRoleMatch(role, currentUser) ? (\n        <Component currentUser={currentUser} {...props} {...rest} />\n      ) : (\n        <Redirect to={{ pathname: redirect }} />\n      );\n    };\n\n    return <Route {...rest} render={RenderComponent} />;\n  }\n);\n\nAuthRoute.propTypes = {\n  role: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n  redirect: PropTypes.string,\n  redirectOnLoggedIn: PropTypes.bool\n};\n\nconst isRoleMatch = (role, currentUser) => {\n  if (!role) {\n    return true;\n  }\n  return currentUser && (Array.isArray(role) ? role : [role]).includes(currentUser.role);\n};\n\nexport * from './AuthBase';\nexport { AuthRoute };\n","import FileUploader from '../util/FileUploader';\n\nconst getField = (field, values) => {\n  if (values.hasOwnProperty(field)) {\n    return values[field];\n  }\n};\nconst handleLocationsCheck = async (context) => {\n const check = await context.get.dealers();\n console.log('CHECK::', check);\n return check;\n}\n/*eslint-disable no-unused-vars*/\nexport default pubsub => ({\n  Query: {\n    async pages(obj, input, { Admin }) {\n      try {\n        const pages = await Admin.get.pages();\n        // console.log('PAGES:::', pages);\n        if (pages.length == 0) {\n          const page = await Admin.insert.page({ id: 0, name: 'home' });\n          // console.log('PAGE::', page);\n          return page;\n        }\n        return pages;\n      } catch (e) {\n        return e;\n      }\n    },\n    async page(obj, { id, pageTitle }, { Admin, Dealers }) {\n      try {\n        if (id) {\n          return { id };\n        } else {\n          console.log('NO ID:::', pageTitle);\n          const page = await Admin.get.pageByTitle(pageTitle);\n          if (page.name === 'locations') {\n            // const check = await handleLocationsCheck(Dealers);\n            // console.log('LOCATIONSCHECK DONE', check);\n          }\n          console.log('PAGE::', page);\n          return { id: page.id, title: page.title, name: page.name };\n        }\n      } catch (e) {\n        console.log('ERRROR GETTING PAGE:', e);\n        return e;\n      }\n    },\n    async vendorData(_, { handle }, { Admin }) {\n      console.log('Vendor HANDLE:', handle);\n      try {\n        const data = await Admin.get.vendorByHandle(handle);\n        console.log('DATA::', data, handle.length);\n        if (typeof data == 'undefined' && handle.length > 0) {\n          const vendor = await Admin.insert.vendorSeo(handle);\n          console.log('VENDOR::', vendor);\n          return vendor;\n        }\n        if (handle.length == 0) {\n          return null;\n        }\n        if (data) {\n          return { handle, seo: data };\n        }\n      } catch (e) {\n        return e;\n      }\n    },\n    async collectionData(_, { handle }, { Admin }) {\n      console.log('COLLECTION HANDLE:', handle);\n      try {\n        const data = await Admin.get.collectionByHandle(handle);\n        console.log('COLLECTION DATA::', data, handle);\n        if ((typeof data == 'undefined' || !data) && handle.length > 0) {\n          const collection = await Admin.insert.collectionSeo(handle);\n          console.log('VENDOR::', collection);\n          return collection;\n        }\n        if (handle.length == 0) {\n          return null;\n        }\n        if (data) {\n          return data;\n        }\n      } catch (e) {\n        return e;\n      }\n      return null;\n    }\n  },\n  Page: {\n    async fields(obj, { field_names }, { Admin }, info) {\n      // console.log('PAGE ID::', obj);\n      const { page_content } = await Admin.get.pageContents(obj.id);\n      const requestedFields = field_names\n        .map(([section, field]) => {\n          return page_content\n            .map(({ field_value, ...rest }) => {\n              const values = JSON.parse(field_value);\n              if (section == rest.section_name) {\n                const combined = Object.assign({}, rest, { [field]: getField(field, values) });\n                return combined;\n              }\n            })\n            .reduce(\n              (accum, curr) => {\n                const field_value = curr[field];\n                delete curr[field];\n                accum = Object.assign({}, accum, curr, { field_value: { [field]: field_value } });\n                return accum;\n              },\n              { field_value: null }\n            );\n        })\n        .reduce((accum, curr) => {\n          accum['field_value'] = Object.assign({}, accum['field_value'], curr['field_value']);\n          delete curr['field_value'];\n          accum = Object.assign({}, accum, curr);\n          return accum;\n        }, {});\n      // console.log('REQUESTED FIELDS:', requestedFields);\n      const { field_value, ...fields } = requestedFields;\n      const stringValues = JSON.stringify(field_value);\n      const data = { ...fields, field_value: stringValues };\n      return [data];\n    }\n  },\n  Mutation: {\n    async signS3(obj, { filename, filetype }) {\n      const signedRequest = await FileUploader.getSignedUrl({ filename, filetype });\n      // console.log('signedRequest::??', signedRequest);\n      return signedRequest;\n    },\n    async uploadPageContent(obj, { pageContent }, { Admin }) {\n      try {\n        const [data] = await Admin.update.pageContent(pageContent);\n        return data.page_content;\n      } catch (e) {\n        console.log('EERROO', e);\n      }\n    },\n    async uploadSeo(obj, { path, handle, seo }, { Admin }) {\n      console.log('PATH::', path);\n      console.log('HANDLE::', handle);\n      console.log('SEO::', seo);\n      try {\n        const [data] = await Admin.update.seo({ path, handle, seo });\n        console.log('DATA::', data);\n        return data;\n      } catch (e) {\n        console.log('ERROR UPDATING SEO DATA::', e);\n      }\n    }\n  },\n  Subscription: {}\n});\n","/*eslint-disable no-unused-vars*/\nimport knex from '../../sql/connector';\n\nexport default class Admin {\n  get = {\n    async pages() {\n      try {\n        return await knex('pages').select('*');\n      } catch (e) {\n        return e;\n      }\n    },\n    async pageById(id) {\n      try {\n        return await knex('pages')\n          .select('*')\n          .where('id', id)\n          .first();\n      } catch (e) {\n        return e;\n      }\n    },\n    async pageByTitle(title) {\n      try {\n        const exists = await knex('pages')\n          .select('*')\n          .where('title', title)\n          .first();\n        if (!exists) {\n          const [page] = await knex('pages')\n            .insert({ title, name: title.toLowerCase() })\n            .returning(['id', 'title', 'name']);\n          return page;\n        } else {\n          return exists;\n        }\n      } catch (e) {\n        return e;\n      }\n    },\n    async vendorByHandle(handle) {\n      try {\n        const exists = await knex.schema.hasTable('vendor_seo');\n        if (!exists) {\n          await knex.schema.createTable('vendor_seo', function(t) {\n            t.increments('id').primary();\n            t.string('handle', 100);\n            t.string('title', 100);\n            t.text('description');\n            t.text('keywords');\n          });\n        }\n        return await knex('vendor_seo')\n          .select('*')\n          .where({ handle })\n          .first();\n      } catch (e) {\n        return e;\n      }\n    },\n    async collectionByHandle(handle) {\n      try {\n        const exists = await knex.schema.hasTable('collection_seo');\n        if (!exists) {\n          await knex.schema.createTable('collection_seo', function(t) {\n            t.increments('id').primary();\n            t.string('handle', 100);\n            t.string('title', 100);\n            t.text('description');\n            t.text('keywords');\n          });\n        }\n        return await knex('collection_seo')\n          .select('*')\n          .where({ handle })\n          .first();\n      } catch (e) {\n        return e;\n      }\n    },\n    async pageContents(page_id) {\n      try {\n        return await knex('page_contents')\n          .select('page_content')\n          .where('page_id', page_id)\n          .first();\n      } catch (e) {\n        return e;\n      }\n    }\n  };\n  insert = {\n    async page({ name }) {\n      try {\n        const data = await knex('pages')\n          .returning(['id', 'name'])\n          .insert({ name });\n        await knex('page_contents').insert({ page_id: data[0].id });\n        return data;\n      } catch (e) {\n        return e;\n      }\n    },\n    async vendorSeo(handle) {\n      try {\n        const data = await knex('vendor_seo')\n          .returning(['id', 'handle'])\n          .insert({ handle });\n        return data;\n      } catch (e) {\n        return e;\n      }\n    },\n    async collectionSeo(handle) {\n      try {\n        const data = await knex('collection_seo')\n          .returning(['id', 'handle'])\n          .insert({ handle });\n        return data;\n      } catch (e) {\n        return e;\n      }\n    }\n  };\n  update = {\n    async pageContent({ page_id, content }) {\n      try {\n        return await knex('page_contents')\n          .where('page_id', page_id)\n          .update({ page_content: JSON.stringify(content) }, ['page_content']);\n      } catch (e) {\n        return e;\n      }\n    },\n    async seo({ path, handle, seo }) {\n      try {\n        const update = await knex(`${path}_seo`).where({ handle });\n        if (update.length == 0) {\n          // console.log('NOTHING::');\n          return await knex(`${path}_seo`)\n            .insert({ handle, ...seo })\n            .returning(['handle', 'title', 'description', 'keywords']);\n        } else {\n          // console.log('WE HAVE A PRODUCT:', update);\n          return await knex(`${path}_seo`)\n            .where({ handle })\n            .update(seo)\n            .returning(['handle', 'title', 'description', 'keywords']);\n        }\n      } catch (e) {\n        return e;\n      }\n    }\n  };\n  delete = {};\n}\n","import Dealers from './sql';\nimport schema from './schema.graphql';\nimport createResolvers from './resolvers';\nimport Feature from '../connector';\n\nexport default new Feature({\n  schema,\n  createResolversFunc: createResolvers,\n  createContextFunc: () => ({ Dealers: new Dealers() })\n});\n","const defaultDealer = {\n  id: '0',\n  handle: '',\n  name: ' ',\n  street: ' ',\n  suite: ' ',\n  city: ' ',\n  zip: ' ',\n  state: ' ',\n  country: ' ',\n  email: ' ',\n  phone: null,\n  website: ' ',\n  lat: ' ',\n  lng: ' '\n};\n/*eslint-disable no-unused-vars*/\nexport default pubsub => ({\n  Query: {\n    async dealers(obj, _, { Dealers }) {\n      const edgesArray = [];\n      try {\n        const dealers = await Dealers.get.dealers();\n        console.log('DEALERS', dealers);\n        const updated = dealers.hasOwnProperty('isUpdated');\n        console.log('UPDATED::', updated);\n        if (updated) {\n          return {\n            dealers_count: 0,\n            edges: [{ node: null, cursor: null }],\n            dealer_info: { hasNextPage: false, end_cursor: 0 }\n          };\n        } else if (dealers.length == 0) {\n          console.log('LENGTH WAS ZERO::', dealers);\n          return {\n            dealers_count: 0,\n            edges: [{ node: null, cursor: null }],\n            dealer_info: { hasNextPage: false, end_cursor: 0 }\n          };\n        } else {\n          const edgesArray = [];\n          dealers.map(dealer => edgesArray.push({ node: dealer }));\n          console.log('dealers');\n          return {\n            dealers_count: dealers.length,\n            edges: edgesArray\n            // dealer_info: { hasNextPage: false, end_cursor: 0 }\n          };\n        }\n      } catch (e) {\n        console.log('ERROR ON DEALERS:', e);\n      }\n    },\n    async dealerByHandle(obj, input, { Dealers }) {\n      try {\n        const handle = input.handle;\n        const dealer = await Dealers.get.dealerByHandle({ handle });\n\n        if (typeof dealer == 'undefined' || !dealer) {\n          console.log('DEALER IF', defaultDealer);\n          return defaultDealer; //{ dealerByHandle: defaultDealer };\n        }\n        console.log('WHY RETURN HERE YET::', dealer);\n        return { dealerByHandle: dealer };\n      } catch (e) {\n        console.log('ERR GETTING DEALER:', e);\n        return e;\n      }\n    }\n  },\n  Mutation: {\n    async updateDealer(obj, { dealer }, { Dealers }) {\n      const data = dealer;\n      try {\n        console.log('UPDATE DEALER INPUT::', data);\n\n        const dealer = await Dealers.insertOrUpdate.updateDealer(data);\n        console.log('DEALER RETURN ::', dealer);\n        return dealer;\n      } catch (e) {\n        console.log('ERROR::', e);\n      }\n    }\n  },\n  Subscription: {}\n});\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeExtension\",\"name\":{\"kind\":\"Name\",\"value\":\"Query\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"dealers\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Dealers\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"dealerByHandle\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Dealer\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Dealer\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"street\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"suite\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"city\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"zip\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"state\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"country\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"phone\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"website\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"lat\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"lng\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"DealersEdges\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Dealer\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"cursor\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerInfo\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"hasNextPage\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"end_cursor\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Dealers\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"dealers_count\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DealersEdges\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer_info\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerInfo\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeExtension\",\"name\":{\"kind\":\"Name\",\"value\":\"Mutation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDealer\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"dealer\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerInput\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Dealer\"}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"DealerInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"street\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"suite\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"city\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"zip\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"state\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"country\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"phone\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"website\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"lat\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"lng\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":866}};\n    doc.loc.source = {\"body\":\"extend type Query {\\n  dealers(first: Int, after: Int): Dealers\\n  dealerByHandle(handle: String): Dealer\\n}\\n\\ntype Dealer {\\n  id: ID\\n  handle: String\\n  name: String\\n  street: String\\n  suite: String\\n  city: String\\n  zip: String\\n  state: String\\n  country: String\\n  email: String\\n  phone: Int\\n  website: String\\n  lat: String\\n  lng: String\\n}\\ntype DealersEdges {\\n  node: Dealer\\n  cursor: Int\\n}\\ntype DealerInfo {\\n  hasNextPage: Boolean\\n  end_cursor: Int\\n}\\ntype Dealers {\\n  dealers_count: Int\\n  edges: [DealersEdges]\\n  dealer_info: DealerInfo\\n}\\n#########################\\n\\nextend type Mutation {\\n  updateDealer(dealer: DealerInput): Dealer\\n}\\n\\ninput DealerInput {\\n  id: ID\\n  handle: String\\n  name: String\\n  street: String\\n  suite: String\\n  city: String\\n  zip: String\\n  state: String\\n  country: String\\n  email: String\\n  phone: Int\\n  website: String\\n  lat: String\\n  lng: String\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","/*eslint-disable no-unused-vars*/\nimport knex from '../../sql/connector';\n\nexport default class Dealers {\n  static alterDealers = async () => {\n    try {\n      const done = await knex.schema.alterTable('dealers', t => {\n        t.string('image_url');\n        t.text('description');\n        t.string('url_name');\n        t.string('hours');\n        t.string('handle');\n      });\n      if (done) {\n        return true;\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n  get = {\n    async dealers() {\n      try {\n        const dealers = await knex('dealers').select('*');\n        const isUpdated = await knex.schema.hasColumn('dealers', 'image_url');\n\n        if (!isUpdated) {\n          const updated = await Dealers.alterDealers();\n          if (updated) {\n            return { isUpdated: true };\n          }\n        }\n        return dealers;\n      } catch (e) {\n        return e;\n      }\n    },\n    async dealerByHandle(handle) {\n      try {\n        const dealer = await knex('dealers')\n          .where({ handle })\n          .select('*')\n          .first();\n        return dealer;\n      } catch (e) {\n        console.log('Dealer by handle error', e);\n        return e;\n      }\n    }\n  };\n  insertOrUpdate = {\n    async updateDealer(input) {\n      console.log('INSERT HANDLE:', input.handle);\n      try {\n        const update = await knex('dealers').where({ handle: input.handle });\n        if (update.length == 0) {\n          console.log('HANDLE::', input.handle);\n          await knex('dealers').insert({ ...input });\n          return knex('dealers')\n            .select('*')\n            .where({ handle: input.handle })\n            .first();\n        } else {\n          await knex('dealers')\n            .where({ handle: input.handle })\n            .update({ ...input });\n\n          return knex('dealers')\n            .where({ handle: input.handle })\n            .select('*')\n            .first();\n        }\n      } catch (e) {\n        return e;\n      }\n    }\n  };\n  update = {};\n  delete = {};\n}\n","import dealers from './dealers';\nimport admin from './admin';\nimport vendor from './vendor';\nimport categories from './categories';\nimport product from './product';\nimport cookies from './cookies';\nimport i18n from './i18n';\nimport user from './user';\nimport contact from './contact';\nimport mailer from './mailer';\nimport graphqlTypes from './graphqlTypes';\nimport './debug';\n\nimport Feature from './connector';\n\nexport default new Feature(dealers, admin, categories, product, vendor, cookies, i18n, user, contact, mailer, graphqlTypes);\n"],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AARA;AADA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAzBA;AADA;AAFA;AADA;AADA;AALA;AATA;AAuDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAFA;AACA;AAHA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AARA;AAaA;AAjEA;AAoEA;AACA;AAAA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAQA;AACA;AACA;AAVA;AAWA;AACA;AACA;AAXA;AACA;AADA;AAFA;AAKA;AACA;;;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAHA;AAMA;;;;AA5BA;AACA;AADA;AACA;AACA;AA6BA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;;;;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAmCA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAMA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AAEA;AADA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAWA;AAXA;AAaA;AADA;AAIA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AAiBA;AAlBA;AAmBA;AAAA;AAAA;AAnBA;AAyBA;AACA;AA1BA;AAAA;AACA;AADA;AA2BA;AA3BA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AA6BA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAuCA;AAxCA;AA0CA;AACA;AACA;AAHA;AACA;AA1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAgDA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AADA;AADA;AALA;AAFA;AAgBA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AAFA;AAgBA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AAFA;AAgBA;AACA;AACA;AA5DA;AA8DA;AAEA;AACA;;;;;AAhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA6NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AADA;AADA;AAJA;AAFA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAhBA;AA6BA;;;;AAvTA;AACA;AAyTA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAOA;AACA;AADA;AAGA;AACA;AAXA;AAYA;AACA;AACA;AACA;AAbA;AACA;AADA;AAFA;AAKA;AACA;;;AASA;AACA;AACA;;;;AAlBA;AACA;AAmBA;AACA;AADA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AANA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAcA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAXA;AACA;AALA;AAAA;AAGA;AACA;AAaA;AAjBA;AACA;AADA;AAAA;AAAA;AACA;AAmBA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AACA;AA4BA;;;;;;;AClpnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvnnpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAKA;AALA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAXA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAcA;AAfA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA;AACA;AAAA;AAPA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA;AACA;AAAA;AAPA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AA1EA;AA4EA;AACA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAhCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AAnCA;AAqzBA;AA2BA;AA7IA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAPA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AArFA;AAuFA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AA/BA;AAiCA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AA5BA;AA8BA;;;;;;;;;;;AC1JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AASA;AACA;AACA;AAHA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAdA;AAgBA;AACA;AACA;AAHA;AACA;AAhBA;AAqBA;AACA;AAAA;AAAA;AAAA;AACA;AAvBA;AAyBA;AACA;AACA;AAHA;AACA;AAzBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA8BA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAKA;AANA;AACA;AADA;AASA;AATA;AACA;AADA;AAAA;AAAA;AACA;AAWA;AAZA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAlDA;AAoDA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAJA;AAAA;AACA;AADA;AAKA;AACA;AAAA;AANA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAZA;AAcA;AAnEA;AAAA;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;;;AAiBA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AARA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AA5BA;AA8BA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAIA;AALA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAzBA;AA2BA;AACA;AA1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}