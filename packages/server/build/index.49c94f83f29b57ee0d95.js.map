{"version":3,"file":"index.46924ff744e391d51427.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/products/components/SimilarProducts.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/products/components/SingleProductView.web.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// import classnames from 'classnames';\nimport { Link } from 'react-router-dom';\n//import removeVendorName from '../utils/helpers';\n//import { toUrlName } from '../../common/components/global/components/PageBreadcrumbs';\nimport ResponsiveShpfyPicture from '../../common/components/global/components/ResponsiveShpfyPicture';\n\nimport '../styles/similar-products.scss';\n\nclass SimilarProducts extends React.Component {\n  location = handle => ({ pathname: `/product/${handle}` });\n  renderImage = image => {\n    const className = image.hasOwnProperty('className') ? image.className : '';\n    const options = {\n      image: image.link,\n      altText: image.name,\n      className,\n      image_size: '300X300',\n      sources: [\n        {\n          image: image.link,\n          image_size: '700X700',\n          size: '(min-width: 990px)'\n        },\n        {\n          image: image.link,\n          image_size: '370X370',\n          size: '(max-width: 450px)'\n        }\n      ]\n    };\n    return <ResponsiveShpfyPicture options={options} />;\n  };\n  productLocation = (vendor, handle, id, title, productType) => {\n    // console.log('ID', id, 'TITLE', title, 'PRODUCT TYPE', productType);\n    // console.log('NODE::', node);\n    const regex = /(\\/|[\"])/gm;\n    const subst = ``;\n\n    // The substituted value will be contained in the result variable\n    const result = title.replace(regex, subst);\n    const path = vendor\n      .split(' ')\n      .join('-')\n      .toLowerCase();\n    // console.log('HANDLE:::', `/product/${path}/${handle}`);\n\n    return {\n      pathname: `/product/${path}/${result\n        .split(' ')\n        .join('-')\n        .toLowerCase()}/${productType\n        .split('/')\n        .join('-')\n        .toLowerCase()}`,\n      state: handle\n    };\n  };\n\n  render() {\n    const { relatedProducts } = this.props;\n    if (!relatedProducts || (Array.isArray(relatedProducts) && relatedProducts.length === 0)) return null;\n    return (\n      <div className=\"similar-products\">\n        <h2 className=\"similar-products__header\">Similar items related to this product.</h2>\n        <div className=\"similar-products__description\">\n          Based on your selection, here are similar items you may be interested in.\n        </div>\n        <div className=\"similar-products__item-container\">\n          {Array.isArray(relatedProducts) && relatedProducts.length > 0 ? (\n            relatedProducts.map(({ id, handle, image, vendor, title, productType }) => (\n              <Link\n                key={id}\n                to={this.productLocation(vendor, handle, id, title, productType)}\n                className=\"similar-products__item\"\n              >\n                {/* <img src={image} alt={title} /> */}\n                {this.renderImage({ link: image, name: title })}\n\n                <div className=\"similar-products__item-name\">{`${vendor} ${title}`}</div>\n              </Link>\n            ))\n          ) : (\n            <span>No similar product(s) to display</span>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nSimilarProducts.propTypes = {\n  relatedProducts: PropTypes.array\n};\n\nexport default SimilarProducts;\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { FaSearch } from 'react-icons/fa';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport { PageLayout, ScrollToTop, Modal, TabContainer, TabItem, Badge } from '../../common/components/global';\nimport SimilarProducts from './SimilarProducts';\nimport settings from '../../../../../../settings';\nimport '../styles/single-product-view.scss';\nimport RPBHQ from '../../common/graphql/SFY/sfyRelatedProductByHandle.graphql';\nimport ResponsiveShpfyPicture from '../../common/components/global/components/ResponsiveShpfyPicture';\n\nexport const prodFeatures = [\n  ['shock_absorption', 'Shock Absorption'],\n  ['console', 'Console'],\n  ['user_ids', 'User IDs'],\n  ['workouts', 'Workouts'],\n  ['hrt_monitoring', 'Heart Monitoring'],\n  ['stride_technology', 'Stride Technology'],\n  ['power', 'Power'],\n  ['design', 'Design'],\n  ['drive_system', 'Drive System'],\n  ['handlebars', 'Handlebars'],\n  ['seat', 'Seat'],\n  ['pedals', 'Pedals'],\n  ['frame', 'Frame'],\n  ['finish', 'Finish'],\n  ['motion', 'Motion'],\n  ['exercises', 'Exercises'],\n  ['weight_stack', 'Weight Stack'],\n  ['included_accessories', 'Included Accessories'],\n  ['optional_weight_stack', 'Optional Weight Stack']\n];\nexport const prodSpecs = [\n  ['running_area', 'Running Area'],\n  ['motor', 'Motor'],\n  ['speed', 'Speed'],\n  ['incline', 'Incline'],\n  ['resistance_levels', 'Resistance Levels'],\n  ['resistance_system', 'Resistance System'],\n  ['stride', 'Stride'],\n  ['max_user_weight', 'Max User Weight'],\n  ['ramp', 'Ramp'],\n  ['stored_vertical_height', 'Stored Vertical Height'],\n  ['seat_floor_distance', 'Seat Floor Distance'],\n  ['warranty', 'Warranty']\n];\n\nconst featureTypes = prodFeatures.map(f => f[0]);\nconst specTypes = prodSpecs.map(s => s[0]);\n\nconst ProductDataList = ({ dataArr, data }) => {\n  return (\n    <ul>\n      {dataArr.map(([key, value], i) => {\n        if (key in data && data[key]) {\n          return (\n            <li key={i}>\n              <span style={{ fontWeight: 600 }}>{value}</span> {data[key]}\n            </li>\n          );\n        } else {\n          return null;\n        }\n      })}\n    </ul>\n  );\n};\n\nclass SingleProductView extends React.Component {\n  state = {\n    selectedImage: '0',\n    showSpecsModal: false,\n    relatedProducts: []\n  };\n  componentDidUpdate(prevProps) {\n    const { relatedProducts, client } = this.props;\n    if (typeof prevProps.relatedProducts === 'undefined' && relatedProducts) {\n      if (relatedProducts.length > 0) {\n        Promise.all(\n          relatedProducts.map(async ({ related_handle: handle }) => {\n            return await client.query({ query: RPBHQ, variables: { handle } });\n          })\n        ).then(res => {\n          const relatedProducts = res.map(({ data: { sfy_shop: { productByHandle: relatedProduct } } }) => {\n            const { images, ...rest } = relatedProduct;\n            const image = images.edges[0].node.originalSrc;\n            return { ...rest, image };\n          });\n          return this.setState({ relatedProducts });\n        });\n      }\n    }\n    return;\n  }\n  addToCart = async variantId => {\n    const checkoutId = localStorage.getItem('sfy-checkout-id');\n    if (!checkoutId) {\n      const addedItem = { lineItems: [{ variantId, quantity: 1 }] };\n      await this.props.createInitialCheckout(addedItem);\n    } else {\n      const addedItem = { lineItems: [{ variantId, quantity: 1 }], checkoutId };\n      await this.props.addCartItem(addedItem);\n    }\n    this.props.toggleCart();\n  };\n  getDisplayPrice = input =>\n    parseInt(input)\n      .toFixed(2)\n      .replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n  toggleModal = () => this.setState({ showSpecsModal: !this.state.showSpecsModal });\n  formatVendor = name => {\n    return name.replace(/[\\s/-]/g, '').toLowerCase();\n  };\n  vendorLogo = vendorName => {\n    const { vendors } = this.props;\n    const [match] = vendors.filter(v => this.formatVendor(v.name) === this.formatVendor(vendorName));\n    if (typeof match !== 'undefined') return match.logo_url;\n    else return 'https://via.placeholder.com/300x300';\n  };\n  vendorDescription = vendorName => {\n    const { vendors } = this.props;\n    const [match] = vendors.filter(v => this.formatVendor(v.name) === this.formatVendor(vendorName));\n    if (typeof match !== 'undefined') return match.description;\n    else return '';\n  };\n  renderImage = image => {\n    const className = image.hasOwnProperty('className') ? image.className : '';\n    const options = {\n      image: image.link,\n      altText: image.name,\n      className,\n      image_size: '300X300',\n      sources: [\n        {\n          image: image.link,\n          image_size: '700X700',\n          size: '(min-width: 990px)'\n        },\n        {\n          image: image.link,\n          image_size: '370X370',\n          size: '(max-width: 450px)'\n        }\n      ]\n    };\n    return <ResponsiveShpfyPicture options={options} />;\n  };\n  swap = e => {\n    const el = e.currentTarget;\n    const index = [...el.parentElement.children].indexOf(el);\n    const imagesNode = document.getElementById('details-images');\n    const children = imagesNode.children;\n    children[0].parentNode.insertBefore(children[index], children[0]);\n  };\n  render() {\n    const { showSpecsModal } = this.state;\n    const { product, vendors, relatedProducts, productData, loading } = this.props;\n    // const renderMetaData = () => (\n    //   <Helmet\n    //     title={`${settings.app.name} - ${product.vendor} ${product.title}`}\n    //     meta={[\n    //       {\n    //         name: 'description',\n    //         content: `${product.vendor} ${product.title} - Product page`\n    //       }\n    //     ]}\n    //   />\n    // );\n    const productInfoTabs = [\n      { name: 'About Product' },\n      { name: 'Dimensions' },\n      { name: 'Product Specs' },\n      { name: 'About Vendor' }\n    ];\n\n    if (loading || !product || !vendors || !relatedProducts) {\n      // console.log('LOADING::', loading);\n      // console.log('PRODUCT:', product);\n      // console.log('VENDORS', vendors);\n      // console.log('Related Products', relatedProducts);\n      // console.log('PRODUCTDATA::', productData);\n      return (\n        <PageLayout>\n          <div>Loading...</div>\n        </PageLayout>\n      );\n    } else {\n      const renderMetaData = () => (\n        <Helmet\n          title={`${settings.app.name} - ${product.vendor} ${product.title}`}\n          meta={[\n            {\n              name: 'title',\n              content: productData && productData.seo ? productData.seo.title : ''\n            },\n            {\n              name: 'description',\n              content: productData && productData.seo ? productData.seo.description : ''\n            },\n            {\n              name: 'keywords',\n              content: productData && productData.seo ? productData.seo.keywords : ''\n            }\n          ]}\n        />\n      );\n      // eslint-disable-next-line\n      const { title, description, productType, images, vendor, availableForSale, priceRange, options } = product;\n      const dimensions = options[0].values[0];\n      // eslint-disable-next-line\n      const {\n        variants: { edges }\n      } = product;\n      // eslint-disable-next-line\n      const {\n        node: { compareAtPrice, price, /*sku, weight, selectedOptions,*/ id: variantId }\n      } = edges[0];\n      const vendorDescription = this.vendorDescription(vendor);\n      // const specifications = [...selectedOptions, { name: 'weight', value: weight }, { nane: 'sku', value: sku }];\n      const specExists = productData ? specTypes.some(key => key in productData && productData[key]) : false;\n      const featureExists = productData ? featureTypes.some(key => key in productData && productData[key]) : false;\n      return (\n        <PageLayout>\n          {renderMetaData()}\n          <ScrollToTop />\n          <div className=\"single-product-view\">\n            <div className=\"single-product-view__product-details\">\n              {'product' in this.props ? (\n                <section className=\"product-details\">\n                  <div id=\"details-images\" className=\"product-details__images\">\n                    {images && 'edges' in images && images.edges.length > 0 ? (\n                      images.edges.map(({ node: { originalSrc, id, altText } }, i) => (\n                        <div key={id} className=\"product-details__image\" onClick={this.swap}>\n                          {this.renderImage({ link: originalSrc, name: altText })}\n                          {/* <img src={originalSrc} alt={altText} /> */}\n                          {compareAtPrice !== null && i == 0 ? <Badge badgeType=\"sale\" /> : null}\n                        </div>\n                      ))\n                    ) : (\n                      <span>No product image(s) to display</span>\n                    )}\n                  </div>\n                  <div className=\"product-details__info\">\n                    <img className=\"product-details__vendor-image\" src={this.vendorLogo(vendor)} alt={vendor} />\n                    <h2 className=\"product-details__name\">{title}</h2>\n                    <p className=\"product-details__description\">{description}</p>\n                    <div className=\"product-details__cart\">\n                      {compareAtPrice !== null ? (\n                        <div className=\"product-details__price-group\">\n                          <span className=\"product-details__price product-details__price--sale\">\n                            {`$${this.getDisplayPrice(price)}`}\n                          </span>\n                          <span className=\"product-details__price product-details__price--original\">\n                            {`$${this.getDisplayPrice(compareAtPrice)}`}\n                          </span>\n                        </div>\n                      ) : (\n                        <span className=\"product-details__price\">{`$${this.getDisplayPrice(price)}`}</span>\n                      )}\n                      <div className=\"product-details__button-group\">\n                        <Link to=\"/locations\" className=\"product-details__button\">\n                          <FaSearch size=\"2em\" className=\"product-details__icon\" />\n                          Call For Best Price\n                        </Link>\n                        <button\n                          onClick={() => this.addToCart(variantId)}\n                          className=\"product-details__button\"\n                          disabled={availableForSale === false ? true : false}\n                        >\n                          <FiShoppingCart size=\"2em\" className=\"product-details__icon\" />\n                          Add to cart\n                        </button>\n                      </div>\n                    </div>\n                    <div className=\"product-details__specs\">\n                      <div className=\"product-details__collapse-label\" onClick={this.toggleModal}>\n                        Product Information\n                      </div>\n                      <Modal showModal={showSpecsModal} toggleModal={this.toggleModal} transparent={true}>\n                        <TabContainer tabs={productInfoTabs}>\n                          <TabItem>\n                            {/* About Product */}\n                            {description !== '' ? description : <span>No product description to display.</span>}\n                          </TabItem>\n                          <TabItem>\n                            {/* Dimensions */}\n                            {dimensions !== '' ? dimensions : <span>No product dimensions to display.</span>}\n                          </TabItem>\n                          <TabItem>\n                            {/* Product Specs */}\n                            <h5> Features </h5>\n                            {featureExists ? (\n                              <ProductDataList dataArr={prodFeatures} data={productData} />\n                            ) : (\n                              <span>No features available at this time</span>\n                            )}\n                            <h5> Specs </h5>\n                            {specExists ? (\n                              <ProductDataList dataArr={prodSpecs} data={productData} />\n                            ) : (\n                              <span>No specs available at this time</span>\n                            )}\n                          </TabItem>\n                          <TabItem>\n                            {/* About Vendor */}\n                            {vendorDescription !== '' ? (\n                              vendorDescription\n                            ) : (\n                              <span>No vendor story to share at this time.</span>\n                            )}\n                          </TabItem>\n                        </TabContainer>\n                        {/* }<div className=\"product-details__collapse-menu\">\n                          {specifications.length > 0 ? (\n                            <CollapseMenu label=\"Specifications\">\n                              {specifications.map(({ name, value }, i) => (\n                                <div key={i} className=\"product-details__collapse-item\">\n                                  <span className=\"product-details__collapse-name\">{name}</span>\n                                  <span className=\"product-details__collapse-description\">{value}</span>\n                                </div>\n                              ))}\n                            </CollapseMenu>\n                          ) : null}\n                        </div> */}\n                      </Modal>\n                    </div>\n                  </div>\n                </section>\n              ) : (\n                <span>No product to display</span>\n              )}\n            </div>\n            <div className=\"single-product-view__similar-products\">\n              {this.state.relatedProducts.length > 0 ? (\n                <SimilarProducts relatedProducts={this.state.relatedProducts} />\n              ) : null}\n            </div>\n          </div>\n        </PageLayout>\n      );\n    }\n  }\n}\n\nSingleProductView.propTypes = {\n  product: PropTypes.object,\n  relatedProducts: PropTypes.array,\n  loading: PropTypes.bool,\n  createInitialCheckout: PropTypes.func,\n  addCartItem: PropTypes.func,\n  toggleCart: PropTypes.func,\n  vendors: PropTypes.array,\n  productData: PropTypes.object,\n  client: PropTypes.object\n};\n\nProductDataList.propTypes = {\n  dataArr: PropTypes.array,\n  data: PropTypes.object\n};\n\nSingleProductView.defaultProps = {};\n\nexport default SingleProductView;\n"],"mappings":"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","sourceRoot":""}