{"version":3,"file":"index.45fa9c9a121ef3395d0e.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/containers/Location.jsx"],"sourcesContent":["import React from 'react';\nimport { graphql, compose, withApollo } from 'react-apollo';\nimport axios from 'axios';\nimport { forEach, values, pick } from 'ramda';\n\nimport DEALERS_QUERY from '../graphql/Dealers.graphql';\nimport DEALER_BY_HANDLE_QUERY from '../graphql/DealerQuery.graphql';\nimport UPDATE_DEALER from '../graphql/UpdateDealer.graphql';\nimport S3SIGNUPLOAD from '../graphql/S3Upload.graphql';\n\nimport LocationInfo from '../components/Locations/LocationInfo';\n\n/*eslint-disable no-unused-vars*/\n\nimport AdminView from '../components/AdminView';\nimport ImagePreview from '../components/CarouselImages/ImagePreview';\nimport AWSImageAdapter from '../components/CarouselImages/ImageAdapter';\n\nconst uploadToS3 = () => {\n  return;\n};\n\nclass Location extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: null\n    };\n  }\n  updateProgress = percent => {\n    const elem = document.getElementById('upload-bar');\n    elem.style.visibility = 'visible';\n    elem.style.width = percent + '%';\n    elem.innerHTML = percent * 1 + '%';\n  };\n  uploadToS3 = async (signedRequest, file) => {\n    const options = {\n      headers: {\n        'Content-Type': `\"${file.type}\"`\n      },\n      onUploadProgress: function(progressEvent) {\n        let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n        this.setState({ percentCompleted });\n      }.bind(this)\n    };\n    await axios.put(signedRequest, file, options);\n  };\n  adaptFileEventToValue = delegate => async e => {\n    const {\n      target: { files }\n    } = e;\n    console.log('FILES;::', files);\n    const { signS3 } = this.props;\n    const image_data = new Map();\n    const getFileNameAndType = file => pick(['name', 'type'], file);\n    const response = async (signS3, { name, type }) => await signS3(name, type);\n\n    if (files.length !== 0 && typeof files !== 'undefined') {\n      let updatedImageData;\n      // TODO THIS FOREACH BIZ SUCKS WE ARE HAVING TO SET STATE WAY TO MUCH IN THIS LOOP\n      // BUT PLACING SETSTATE AFTER FOREACH FIRES BEFORE UPDATED IMAGEMAP IS CREATED\n      forEach(async file => {\n        // NOTE JUST need to update the state and then map the urls down on the preview component\n        const { name } = getFileNameAndType(file);\n        const res = await response(signS3, getFileNameAndType(file));\n        const { signedRequest, url } = res.data.signS3;\n        await this.uploadToS3(signedRequest, file);\n        console.log('URL::', url);\n        // const currentImageSize = this.state.images.size;\n        // const fileIndex = currentImageSize === 0 ? 0 : currentImageSize;\n        // indexOf(file, values(files));\n        // image_data.set(`image_url-${fileIndex}`, { name: name, url });\n        // updatedImageData = new Map([...this.state.images, ...image_data]);\n        // this.setState({ images: updatedImageData });\n        delegate('image_url', url);\n      }, values(files));\n    }\n  };\n  render() {\n    console.log('The props::::', this.props);\n    console.log('The state::', this.state);\n    return (\n      <AdminView {...this.props}>\n        <LocationInfo adaptFileEventToValue={this.adaptFileEventToValue} {...this.props} />\n        {/* <ImagePreview\n          images={this.state.images}\n          removeImage={this.removeImage}\n          handleDragStart={this.handleDragStart}\n          handleDragEnter={this.handleDragEnter}\n          handleDrop={this.handleDrop}\n          handleDragOver={this.handleDragOver}\n          handleDragLeave={this.handleDragLeave}\n          handleDragEnd={this.handleDragEnd}\n          handleReorder={this.handleReorder}\n        /> */}\n        <div id=\"upload-bar\" className=\"upload-progress\">\n          <div className=\"upload-bar\">0%</div>\n        </div>\n      </AdminView>\n    );\n  }\n}\nconst LocationWithApollo = compose(\n  withApollo,\n  // graphql(PAGES_QUERY, {\n  //   props: ({ data }) => {\n  //     const { pages, loading: loadingPages, error } = data;\n  //     console.log('pages', pages);\n  //     if (loadingPages && !error) {\n  //       return { loadingPages, pages: null };\n  //     } else {\n  //       return { pages, loadingPages };\n  //     }\n  //   }\n  // }),\n  // graphql(UPLOAD_CONTENT, {\n  //   props: ({ mutate }) => ({\n  //     uploadContent: async ({ page_id, content }) => {\n  //       // console.log('PAGE ID::', page_id);\n  //       // console.log('content::', content);\n  //       const {\n  //         data: { uploadPageContent }\n  //       } = await mutate({ variables: { pageContent: { page_id: page_id, content } } });\n  //       console.log('RETURN DATA::: ', uploadPageContent);\n  //       return uploadPageContent;\n  //     }\n  //   })\n  // }),\n  graphql(DEALER_BY_HANDLE_QUERY, {\n    options: props => {\n      const handle = props.match.params.location_handle;\n      return { variables: { handle } };\n    },\n    props: ({ data }) => {\n      console.log('DEALER HANDLE QUERY:', data);\n      return { ...data };\n    }\n  }),\n  // graphql(SIMPLE_PAGE_QUERY, {\n  //   options: () => {\n  //     return { variables: { pageTitle: 'Locations' } };\n  //   },\n  //   props: ({ data }) => {\n  //     console.log('Locations Page data', data);\n  //     const { page, loading: loadingPage, error } = data;\n  //     if (loadingPage && !error) {\n  //       return { loadingPage, page: null };\n  //     } else {\n  //       return { page, loadingPage };\n  //     }\n  //   }\n  // }),\n  graphql(DEALERS_QUERY, {\n    options: () => ({\n      variables: { first: 12, after: 0 }\n    }),\n    props: ({ data }) => {\n      console.log('DATA:::', data);\n      const { loading, error, dealers } = data;\n      if (error) {\n        console.log('DEALERS ERROR:::', error);\n        return { dealersError: error };\n      }\n      if (loading) {\n        return { loadingDealers: loading };\n      }\n      if (!loading && !error) {\n        return { loadingDealers: loading, dealers };\n      }\n    }\n  }),\n  graphql(UPDATE_DEALER, {\n    props: ({ mutate }) => ({\n      updateDealer: async dealer => {\n        try {\n          const {\n            data: { updateDealer }\n          } = await mutate({\n            variables: { dealer }\n          });\n          console.log('UPDATED::', updateDealer);\n          return updateDealer;\n        } catch (e) {\n          console.log('ERROR UPDATING:', e);\n        }\n      }\n    })\n    // options: {\n    //   refetchQueries: ({ data: { updateDealer } }) => {\n    //     console.log('RESULT', updateDealer);\n    //     return [\n    //       { query: DEALER_BY_HANDLE_QUERY, variables: { handle: updateDealer.handle } },\n    //       // { query: DEALERS_QUERY, variables: { first: 12, after: 0 } }\n    //     ];\n    //   }\n    // }\n  }),\n  graphql(S3SIGNUPLOAD, {\n    props: ({ mutate }) => ({\n      signS3: async (filename, filetype) => {\n        let response = await mutate({\n          variables: {\n            filename,\n            filetype\n          }\n        });\n        return response;\n      }\n    })\n  })\n)(Location);\n\nexport default LocationWithApollo;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAPA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AARA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAeA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAvBA;AACA;AADA;AAFA;AAKA;AACA;;;AAiDA;AACA;AACA;AACA;AACA;AAAA;AACA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAbA;AAkBA;;;;AA9EA;AACA;AA+EA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AACA;AALA;AAAA;AAGA;AACA;AAGA;AAPA;AACA;AADA;AAAA;AAAA;AACA;AASA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA2BA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AACA;AAFA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AACA;AAcA;;;;A","sourceRoot":""}