{"version":3,"file":"index.fd0c81b38ba92e331369.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/containers/Vendor.jsx","/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/graphql/UpdateBrand.graphql"],"sourcesContent":["import React, { Component } from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport axios from 'axios';\nimport { forEach, values, pick } from 'ramda';\n\nimport AdminView from '../components/AdminView';\nimport Loader from '../../common/components/global/components/Loader';\nimport S3SIGNUPLOAD from '../graphql/S3Upload.graphql';\nimport UPDATE_BRAND from '../graphql/UpdateBrand.graphql';\n\nimport VendorEdit from '../components/Vendors/VendorEdit';\n\nconst uploadToS3 = () => {\n  return;\n};\nclass Vendor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: null,\n      percentCompleted: 0\n    };\n  }\n  componentDidMount() {\n    console.log('DID MOUNT PROPS', this.props);\n      const {\n        location: { state }\n      } = this.props;\n      console.log('C D U:::', state);\n      const { vendor } = state;\n      this.setState({ image: vendor.logo_url });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      location: { state }\n    } = this.props;\n    console.log('C D U:::', state);\n    const { vendor } = state;\n    if (vendor) {\n      if (!prevState.image) {\n        this.setState({ image: vendor.logo_url });\n      }\n    }\n    const { percentCompleted } = this.state;\n    // console.log('PERCENT COMPLETED::', percentCompleted);\n    if (percentCompleted > 0) {\n      this.updateProgress(percentCompleted);\n    }\n    if (percentCompleted == 0 || percentCompleted == 100) {\n      const elem = document.getElementById('upload-bar');\n      elem.style.visibility = 'hidden';\n      return;\n    }\n  }\n  updateProgress = percent => {\n    const elem = document.getElementById('upload-bar');\n    elem.style.visibility = 'visible';\n    elem.style.width = percent + '%';\n    elem.innerHTML = percent * 1 + '%';\n  };\n  uploadToS3 = async (signedRequest, file) => {\n    const options = {\n      headers: {\n        'Content-Type': `\"${file.type}\"`\n      },\n      onUploadProgress: function(progressEvent) {\n        // console.log('');\n        let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n        // console.log('UPLOAD PROGRESS:::', percentCompleted);\n        this.setState({ percentCompleted });\n      }.bind(this)\n    };\n    await axios.put(signedRequest, file, options);\n  };\n  adaptFileEventToValue = delegate => async e => {\n    const {\n      target: { files }\n    } = e;\n    // console.log('FILES;::', files);\n    const { signS3 } = this.props;\n    // const image_data = new Map();\n    const getFileNameAndType = file => pick(['name', 'type'], file);\n    const response = async (signS3, { name, type }) => await signS3(name, type);\n\n    if (files.length !== 0 && typeof files !== 'undefined') {\n      let updatedImageData;\n      // TODO THIS FOREACH BIZ SUCKS WE ARE HAVING TO SET STATE WAY TO MUCH IN THIS LOOP\n      // BUT PLACING SETSTATE AFTER FOREACH FIRES BEFORE UPDATED IMAGEMAP IS CREATED\n      forEach(async file => {\n        // NOTE JUST need to update the state and then map the urls down on the preview component\n        const { name } = getFileNameAndType(file);\n        const res = await response(signS3, getFileNameAndType(file));\n        const { signedRequest, url } = res.data.signS3;\n        await this.uploadToS3(signedRequest, file);\n        this.setState({ image: url });\n        // console.log('URL::', url);\n        // const currentImageSize = this.state.images.size;\n        // const fileIndex = currentImageSize === 0 ? 0 : currentImageSize;\n        // indexOf(file, values(files));\n        // image_data.set(`image_url-${fileIndex}`, { name: name, url });\n        // updatedImageData = new Map([...this.state.images, ...image_data]);\n        // this.setState({ images: updatedImageData });\n        // console.log('DELEGATE:', delegate);\n        delegate('logo_url', url);\n      }, values(files));\n    }\n  };\n  render() {\n    console.log('THE PROPS:::', this.props);\n    console.log('THE STATE::', this.state);\n    const {\n      location: { state }\n    } = this.props;\n    const { vendor } = state;\n    if (!vendor) {\n      return (\n        <AdminView {...this.props}>\n          <Loader />\n        </AdminView>\n      );\n    }\n    return (\n      <AdminView {...this.props}>\n        <VendorEdit vendor={vendor} image={this.state.image} adaptFileEventToValue={this.adaptFileEventToValue} {...this.props} />\n      </AdminView>\n    );\n  }\n}\n\nexport default compose(\n  withApollo,\n  graphql(UPDATE_BRAND, {\n    props: ({ mutate }) => ({\n      updateBrand: async vendor => {\n        let response = await mutate({\n          variables: vendor\n        });\n        return response;\n      }\n    })\n  }),\n  graphql(S3SIGNUPLOAD, {\n    props: ({ mutate }) => ({\n      signS3: async (filename, filetype) => {\n        let response = await mutate({\n          variables: {\n            filename,\n            filetype\n          }\n        });\n        return response;\n      }\n    })\n  })\n)(Vendor);\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateBrand\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdateVendorInput\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateBrand\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"handle\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"logo_url\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_featured\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_top_six\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"top_six_position\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":195}};\n    doc.loc.source = {\"body\":\"mutation updateBrand($input: UpdateVendorInput) {\\n  updateBrand(input: $input) {\\n    id\\n    name\\n    handle\\n    logo_url\\n    is_featured\\n    is_top_six\\n    top_six_position\\n    description\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"updateBrand\"] = oneQuery(doc, \"updateBrand\");\n        \n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAuCA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;AA4CA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA7CA;AAAA;AAAA;AAAA;AACA;AADA;AA0DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AARA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAiBA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAzDA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AAAA;AACA;AADA;AACA;AAIA;AALA;AACA;AAMA;AACA;;;AACA;AAAA;AACA;AAGA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAsDA;AACA;AACA;AAFA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;;AA/GA;AACA;AAiHA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AACA;AAFA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;;;;;;;AC7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}