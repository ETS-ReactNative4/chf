{"version":3,"file":"index.49003d853bb1f39ced0d.hot-update.js","sources":["/Users/austinreynolds/Documents/MOD/chf-rcomm/packages/client/src/modules/admin/components/Locations/LocationsView.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, Field, FieldArray, Form } from 'formik';\n// import FormCreator from '../FormCreator';\n// import Text from '../FormCreator/FormTypes/Text';\nimport DealerForm from './Form';\n//\n// const LocationForm = new FormCreator({\n//   field: [<Text />]\n// });\nconst SelectLocationString = 'Please select a location';\nconst AddDealer = props => {\n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={{ name: '' }}\n      validateOnBlur={true}\n      // validate={validateAll}\n      validateOnChange={false}\n      onSubmit={async ({ name, ...values }, actions) => {\n        console.log('Values::', values);\n        console.log('ACTIONS::', actions);\n        const dealer = await props.updateDealer({\n          name,\n          handle: name\n            .split(' ')\n            .join('-')\n            .toLowerCase(),\n          ...values\n        });\n        // props.handleInitialLocation(dealer.name);\n        // console.log('DEALER:::', dealer);\n\n        // try {\n        //   switch (selectedCategory) {\n        //     case 'products':\n        //       await uploadSeoContent({ handle: selectedProduct, ...values });\n        //\n        //       break;\n        //     case 'brands':\n        //       await uploadSeo({ path: 'vendor', handle: selectedBrand, seo: { ...values } });\n        //       break;\n        //     case 'collections':\n        //       await uploadSeo({ path: 'collection', handle: selectedCollection, seo: { ...values } });\n        //       break;\n        //     default:\n        //       return;\n        //   }\n        // } catch (e) {\n        //   console.log('ERROR:', e);\n        // }\n        // MyImaginaryRestApiCall(user.id, values).then(\n        // updatedUser => {\n        actions.setSubmitting(false);\n        // updateUser(updatedUser);\n        // onClose();\n        // },\n        // error => {\n        // actions.setSubmitting(false);\n        // actions.setErrors(transformMyRestApiErrorsToAnObject(error));\n        // actions.setStatus({ msg: 'Set some arbitrary status or data' });\n        // }\n        // );\n      }}\n      render={({ errors, status, touched, isSubmitting, isValid }) => {\n        return (\n          <Form className=\"admin__form__seo\">\n            <div className=\"admin__form__seo--field\">\n              <label htmlFor=\"Location\"> Please add your first location</label>\n              <Field className=\"admin__form__seo--input\" type=\"text\" name=\"name\" placeholder=\"Name\" />\n              {errors.title && touched.title && <div className=\"admin__form__seo--error\">{errors.name}</div>}\n            </div>\n            {status && status.msg && <div className=\"admin__form__seo--status\">{status.msg}</div>}\n\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        );\n      }}\n    />\n  );\n};\nexport default class LocationsView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLocation: SelectLocationString\n    };\n  }\n  componentDidUpdate(prevProps, prevState) {\n    console.log('COMPONENT DID UPDATE::', this.props);\n    return;\n  }\n  handleSelectedLocation = e => {\n    return this.setState({ selectedLocation: e.target.value });\n  };\n  handleInitialLocation = location => {\n    this.setState({ selectedLocation: location });\n  };\n  render() {\n    const { selectedLocation } = this.state;\n    const { loadingDealers, dealers } = this.props;\n    console.log('THE RENDER PROPS:::', this.props);\n    if (loadingDealers) {\n      return <div>Loading</div>;\n    }\n    return (\n      <div className={'admin__page__view'}>\n        {dealers.edges.length !== 0 ? (\n          <AddDealer {...this.state} {...this.props} />\n        ) : (\n          <DealerForm {...this.state} {...this.props} />\n        )}\n        {/* <DealerForm {...this.state} {...this.props} /> */}\n        {/* <AddDealer handleInitialLocation={this.handleInitialLocation} {...this.state} {...this.props} /> */}\n      </div>\n    );\n  }\n}\n\nLocationsView.propTypes = {\n  children: PropTypes.node,\n  updateDealer: PropTypes.func\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AAFA;AACA;AAJA;AAGA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AARA;AAaA;AAlEA;AAqEA;AACA;AAAA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAWA;AACA;AACA;AAbA;AAcA;AACA;AACA;AAdA;AACA;AADA;AAFA;AAKA;AACA;;;AAAA;AACA;AACA;AACA;;;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAUA;;;;AAnCA;AACA;AADA;AACA;AACA;AAoCA;AACA;AACA;AAFA;;;;A","sourceRoot":""}